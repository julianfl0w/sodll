
from enum import Enum
from ctypes import *
jvulkanLib = CDLL('vulkan-1.dll') 

def array2ctype(inarray):
	return (type(inarray[0]) * len(inarray))(*inarray)

def ctype2array(inctype):
	return inctype[:]

def preprocess(indict):
	if type(indict) is dict:
		for k, v in indict.items():
			indict[k] = preprocess(v)
	elif type(indict) is list:
		if type(indict[0]) is list or type(indict[0]) is dict:
			for i, e in enumerate(indict):
				indict[i] = preprocess(e)
		else:
			indict = array2ctype(indict)
	else:
		pass
	return indict 
	
# Generate Constants (ex VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR)
typeDef = {
  "__int128_t": "__int128",
  "__uint128_t": "unsigned __int128",
  "__NSConstantString": "struct __NSConstantString_tag",
  "__builtin_ms_va_list": "char *",
  "__builtin_va_list": "struct __va_list_tag [1]",
  "ptrdiff_t": "long",
  "size_t": "unsigned long",
  "wchar_t": "int",
  "max_align_t": "struct max_align_t",
  "__u_char": "unsigned char",
  "__u_short": "unsigned short",
  "__u_int": "unsigned int",
  "__u_long": "unsigned long",
  "__int8_t": "signed char",
  "__uint8_t": "unsigned char",
  "__int16_t": "short",
  "__uint16_t": "unsigned short",
  "__int32_t": "int",
  "__uint32_t": "unsigned int",
  "__int64_t": "long",
  "__uint64_t": "unsigned long",
  "__int_least8_t": "__int8_t",
  "__uint_least8_t": "__uint8_t",
  "__int_least16_t": "__int16_t",
  "__uint_least16_t": "__uint16_t",
  "__int_least32_t": "__int32_t",
  "__uint_least32_t": "__uint32_t",
  "__int_least64_t": "__int64_t",
  "__uint_least64_t": "__uint64_t",
  "__quad_t": "long",
  "__u_quad_t": "unsigned long",
  "__intmax_t": "long",
  "__uintmax_t": "unsigned long",
  "__dev_t": "unsigned long",
  "__uid_t": "unsigned int",
  "__gid_t": "unsigned int",
  "__ino_t": "unsigned long",
  "__ino64_t": "unsigned long",
  "__mode_t": "unsigned int",
  "__nlink_t": "unsigned long",
  "__off_t": "long",
  "__off64_t": "long",
  "__pid_t": "int",
  "__fsid_t": "struct __fsid_t",
  "__clock_t": "long",
  "__rlim_t": "unsigned long",
  "__rlim64_t": "unsigned long",
  "__id_t": "unsigned int",
  "__time_t": "long",
  "__useconds_t": "unsigned int",
  "__suseconds_t": "long",
  "__daddr_t": "int",
  "__key_t": "int",
  "__clockid_t": "int",
  "__timer_t": "void *",
  "__blksize_t": "long",
  "__blkcnt_t": "long",
  "__blkcnt64_t": "long",
  "__fsblkcnt_t": "unsigned long",
  "__fsblkcnt64_t": "unsigned long",
  "__fsfilcnt_t": "unsigned long",
  "__fsfilcnt64_t": "unsigned long",
  "__fsword_t": "long",
  "__ssize_t": "long",
  "__syscall_slong_t": "long",
  "__syscall_ulong_t": "unsigned long",
  "__loff_t": "__off64_t",
  "__caddr_t": "char *",
  "__intptr_t": "long",
  "__socklen_t": "unsigned int",
  "__sig_atomic_t": "int",
  "int8_t": "__int8_t",
  "int16_t": "__int16_t",
  "int32_t": "__int32_t",
  "int64_t": "__int64_t",
  "uint8_t": "__uint8_t",
  "uint16_t": "__uint16_t",
  "uint32_t": "__uint32_t",
  "uint64_t": "__uint64_t",
  "int_least8_t": "__int_least8_t",
  "int_least16_t": "__int_least16_t",
  "int_least32_t": "__int_least32_t",
  "int_least64_t": "__int_least64_t",
  "uint_least8_t": "__uint_least8_t",
  "uint_least16_t": "__uint_least16_t",
  "uint_least32_t": "__uint_least32_t",
  "uint_least64_t": "__uint_least64_t",
  "int_fast8_t": "signed char",
  "int_fast16_t": "long",
  "int_fast32_t": "long",
  "int_fast64_t": "long",
  "uint_fast8_t": "unsigned char",
  "uint_fast16_t": "unsigned long",
  "uint_fast32_t": "unsigned long",
  "uint_fast64_t": "unsigned long",
  "intptr_t": "long",
  "uintptr_t": "unsigned long",
  "intmax_t": "__intmax_t",
  "uintmax_t": "__uintmax_t",
  "VkBool32": "uint32_t",
  "VkDeviceAddress": "uint64_t",
  "VkDeviceSize": "uint64_t",
  "VkFlags": "uint32_t",
  "VkSampleMask": "uint32_t",
  "VkBuffer": "struct VkBuffer_T *",
  "VkImage": "struct VkImage_T *",
  "VkInstance": "struct VkInstance_T *",
  "VkPhysicalDevice": "struct VkPhysicalDevice_T *",
  "VkDevice": "struct VkDevice_T *",
  "VkQueue": "struct VkQueue_T *",
  "VkSemaphore": "struct VkSemaphore_T *",
  "VkCommandBuffer": "struct VkCommandBuffer_T *",
  "VkFence": "struct VkFence_T *",
  "VkDeviceMemory": "struct VkDeviceMemory_T *",
  "VkEvent": "struct VkEvent_T *",
  "VkQueryPool": "struct VkQueryPool_T *",
  "VkBufferView": "struct VkBufferView_T *",
  "VkImageView": "struct VkImageView_T *",
  "VkShaderModule": "struct VkShaderModule_T *",
  "VkPipelineCache": "struct VkPipelineCache_T *",
  "VkPipelineLayout": "struct VkPipelineLayout_T *",
  "VkPipeline": "struct VkPipeline_T *",
  "VkRenderPass": "struct VkRenderPass_T *",
  "VkDescriptorSetLayout": "struct VkDescriptorSetLayout_T *",
  "VkSampler": "struct VkSampler_T *",
  "VkDescriptorSet": "struct VkDescriptorSet_T *",
  "VkDescriptorPool": "struct VkDescriptorPool_T *",
  "VkFramebuffer": "struct VkFramebuffer_T *",
  "VkCommandPool": "struct VkCommandPool_T *",
  "VkResult": "enum VkResult",
  "VkStructureType": "enum VkStructureType",
  "VkImageLayout": "enum VkImageLayout",
  "VkObjectType": "enum VkObjectType",
  "VkPipelineCacheHeaderVersion": "enum VkPipelineCacheHeaderVersion",
  "VkVendorId": "enum VkVendorId",
  "VkSystemAllocationScope": "enum VkSystemAllocationScope",
  "VkInternalAllocationType": "enum VkInternalAllocationType",
  "VkFormat": "enum VkFormat",
  "VkImageTiling": "enum VkImageTiling",
  "VkImageType": "enum VkImageType",
  "VkPhysicalDeviceType": "enum VkPhysicalDeviceType",
  "VkQueryType": "enum VkQueryType",
  "VkSharingMode": "enum VkSharingMode",
  "VkComponentSwizzle": "enum VkComponentSwizzle",
  "VkImageViewType": "enum VkImageViewType",
  "VkBlendFactor": "enum VkBlendFactor",
  "VkBlendOp": "enum VkBlendOp",
  "VkCompareOp": "enum VkCompareOp",
  "VkDynamicState": "enum VkDynamicState",
  "VkFrontFace": "enum VkFrontFace",
  "VkVertexInputRate": "enum VkVertexInputRate",
  "VkPrimitiveTopology": "enum VkPrimitiveTopology",
  "VkPolygonMode": "enum VkPolygonMode",
  "VkStencilOp": "enum VkStencilOp",
  "VkLogicOp": "enum VkLogicOp",
  "VkBorderColor": "enum VkBorderColor",
  "VkFilter": "enum VkFilter",
  "VkSamplerAddressMode": "enum VkSamplerAddressMode",
  "VkSamplerMipmapMode": "enum VkSamplerMipmapMode",
  "VkDescriptorType": "enum VkDescriptorType",
  "VkAttachmentLoadOp": "enum VkAttachmentLoadOp",
  "VkAttachmentStoreOp": "enum VkAttachmentStoreOp",
  "VkPipelineBindPoint": "enum VkPipelineBindPoint",
  "VkCommandBufferLevel": "enum VkCommandBufferLevel",
  "VkIndexType": "enum VkIndexType",
  "VkSubpassContents": "enum VkSubpassContents",
  "VkAccessFlagBits": "enum VkAccessFlagBits",
  "VkAccessFlags": "VkFlags",
  "VkImageAspectFlagBits": "enum VkImageAspectFlagBits",
  "VkImageAspectFlags": "VkFlags",
  "VkFormatFeatureFlagBits": "enum VkFormatFeatureFlagBits",
  "VkFormatFeatureFlags": "VkFlags",
  "VkImageCreateFlagBits": "enum VkImageCreateFlagBits",
  "VkImageCreateFlags": "VkFlags",
  "VkSampleCountFlagBits": "enum VkSampleCountFlagBits",
  "VkSampleCountFlags": "VkFlags",
  "VkImageUsageFlagBits": "enum VkImageUsageFlagBits",
  "VkImageUsageFlags": "VkFlags",
  "VkInstanceCreateFlagBits": "enum VkInstanceCreateFlagBits",
  "VkInstanceCreateFlags": "VkFlags",
  "VkMemoryHeapFlagBits": "enum VkMemoryHeapFlagBits",
  "VkMemoryHeapFlags": "VkFlags",
  "VkMemoryPropertyFlagBits": "enum VkMemoryPropertyFlagBits",
  "VkMemoryPropertyFlags": "VkFlags",
  "VkQueueFlagBits": "enum VkQueueFlagBits",
  "VkQueueFlags": "VkFlags",
  "VkDeviceCreateFlags": "VkFlags",
  "VkDeviceQueueCreateFlagBits": "enum VkDeviceQueueCreateFlagBits",
  "VkDeviceQueueCreateFlags": "VkFlags",
  "VkPipelineStageFlagBits": "enum VkPipelineStageFlagBits",
  "VkPipelineStageFlags": "VkFlags",
  "VkMemoryMapFlags": "VkFlags",
  "VkSparseMemoryBindFlagBits": "enum VkSparseMemoryBindFlagBits",
  "VkSparseMemoryBindFlags": "VkFlags",
  "VkSparseImageFormatFlagBits": "enum VkSparseImageFormatFlagBits",
  "VkSparseImageFormatFlags": "VkFlags",
  "VkFenceCreateFlagBits": "enum VkFenceCreateFlagBits",
  "VkFenceCreateFlags": "VkFlags",
  "VkSemaphoreCreateFlags": "VkFlags",
  "VkEventCreateFlagBits": "enum VkEventCreateFlagBits",
  "VkEventCreateFlags": "VkFlags",
  "VkQueryPipelineStatisticFlagBits": "enum VkQueryPipelineStatisticFlagBits",
  "VkQueryPipelineStatisticFlags": "VkFlags",
  "VkQueryPoolCreateFlags": "VkFlags",
  "VkQueryResultFlagBits": "enum VkQueryResultFlagBits",
  "VkQueryResultFlags": "VkFlags",
  "VkBufferCreateFlagBits": "enum VkBufferCreateFlagBits",
  "VkBufferCreateFlags": "VkFlags",
  "VkBufferUsageFlagBits": "enum VkBufferUsageFlagBits",
  "VkBufferUsageFlags": "VkFlags",
  "VkBufferViewCreateFlags": "VkFlags",
  "VkImageViewCreateFlagBits": "enum VkImageViewCreateFlagBits",
  "VkImageViewCreateFlags": "VkFlags",
  "VkShaderModuleCreateFlags": "VkFlags",
  "VkPipelineCacheCreateFlagBits": "enum VkPipelineCacheCreateFlagBits",
  "VkPipelineCacheCreateFlags": "VkFlags",
  "VkColorComponentFlagBits": "enum VkColorComponentFlagBits",
  "VkColorComponentFlags": "VkFlags",
  "VkPipelineCreateFlagBits": "enum VkPipelineCreateFlagBits",
  "VkPipelineCreateFlags": "VkFlags",
  "VkPipelineShaderStageCreateFlagBits": "enum VkPipelineShaderStageCreateFlagBits",
  "VkPipelineShaderStageCreateFlags": "VkFlags",
  "VkShaderStageFlagBits": "enum VkShaderStageFlagBits",
  "VkCullModeFlagBits": "enum VkCullModeFlagBits",
  "VkCullModeFlags": "VkFlags",
  "VkPipelineVertexInputStateCreateFlags": "VkFlags",
  "VkPipelineInputAssemblyStateCreateFlags": "VkFlags",
  "VkPipelineTessellationStateCreateFlags": "VkFlags",
  "VkPipelineViewportStateCreateFlags": "VkFlags",
  "VkPipelineRasterizationStateCreateFlags": "VkFlags",
  "VkPipelineMultisampleStateCreateFlags": "VkFlags",
  "VkPipelineDepthStencilStateCreateFlagBits": "enum VkPipelineDepthStencilStateCreateFlagBits",
  "VkPipelineDepthStencilStateCreateFlags": "VkFlags",
  "VkPipelineColorBlendStateCreateFlagBits": "enum VkPipelineColorBlendStateCreateFlagBits",
  "VkPipelineColorBlendStateCreateFlags": "VkFlags",
  "VkPipelineDynamicStateCreateFlags": "VkFlags",
  "VkPipelineLayoutCreateFlagBits": "enum VkPipelineLayoutCreateFlagBits",
  "VkPipelineLayoutCreateFlags": "VkFlags",
  "VkShaderStageFlags": "VkFlags",
  "VkSamplerCreateFlagBits": "enum VkSamplerCreateFlagBits",
  "VkSamplerCreateFlags": "VkFlags",
  "VkDescriptorPoolCreateFlagBits": "enum VkDescriptorPoolCreateFlagBits",
  "VkDescriptorPoolCreateFlags": "VkFlags",
  "VkDescriptorPoolResetFlags": "VkFlags",
  "VkDescriptorSetLayoutCreateFlagBits": "enum VkDescriptorSetLayoutCreateFlagBits",
  "VkDescriptorSetLayoutCreateFlags": "VkFlags",
  "VkAttachmentDescriptionFlagBits": "enum VkAttachmentDescriptionFlagBits",
  "VkAttachmentDescriptionFlags": "VkFlags",
  "VkDependencyFlagBits": "enum VkDependencyFlagBits",
  "VkDependencyFlags": "VkFlags",
  "VkFramebufferCreateFlagBits": "enum VkFramebufferCreateFlagBits",
  "VkFramebufferCreateFlags": "VkFlags",
  "VkRenderPassCreateFlagBits": "enum VkRenderPassCreateFlagBits",
  "VkRenderPassCreateFlags": "VkFlags",
  "VkSubpassDescriptionFlagBits": "enum VkSubpassDescriptionFlagBits",
  "VkSubpassDescriptionFlags": "VkFlags",
  "VkCommandPoolCreateFlagBits": "enum VkCommandPoolCreateFlagBits",
  "VkCommandPoolCreateFlags": "VkFlags",
  "VkCommandPoolResetFlagBits": "enum VkCommandPoolResetFlagBits",
  "VkCommandPoolResetFlags": "VkFlags",
  "VkCommandBufferUsageFlagBits": "enum VkCommandBufferUsageFlagBits",
  "VkCommandBufferUsageFlags": "VkFlags",
  "VkQueryControlFlagBits": "enum VkQueryControlFlagBits",
  "VkQueryControlFlags": "VkFlags",
  "VkCommandBufferResetFlagBits": "enum VkCommandBufferResetFlagBits",
  "VkCommandBufferResetFlags": "VkFlags",
  "VkStencilFaceFlagBits": "enum VkStencilFaceFlagBits",
  "VkStencilFaceFlags": "VkFlags",
  "VkExtent2D": "struct VkExtent2D",
  "VkExtent3D": "struct VkExtent3D",
  "VkOffset2D": "struct VkOffset2D",
  "VkOffset3D": "struct VkOffset3D",
  "VkRect2D": "struct VkRect2D",
  "VkBaseInStructure": "struct VkBaseInStructure",
  "VkBaseOutStructure": "struct VkBaseOutStructure",
  "VkBufferMemoryBarrier": "struct VkBufferMemoryBarrier",
  "VkDispatchIndirectCommand": "struct VkDispatchIndirectCommand",
  "VkDrawIndexedIndirectCommand": "struct VkDrawIndexedIndirectCommand",
  "VkDrawIndirectCommand": "struct VkDrawIndirectCommand",
  "VkImageSubresourceRange": "struct VkImageSubresourceRange",
  "VkImageMemoryBarrier": "struct VkImageMemoryBarrier",
  "VkMemoryBarrier": "struct VkMemoryBarrier",
  "VkPipelineCacheHeaderVersionOne": "struct VkPipelineCacheHeaderVersionOne",
  "PFN_vkAllocationFunction": "void *(*)(void *, size_t, size_t, VkSystemAllocationScope)",
  "PFN_vkFreeFunction": "void (*)(void *, void *)",
  "PFN_vkInternalAllocationNotification": "void (*)(void *, size_t, VkInternalAllocationType, VkSystemAllocationScope)",
  "PFN_vkInternalFreeNotification": "void (*)(void *, size_t, VkInternalAllocationType, VkSystemAllocationScope)",
  "PFN_vkReallocationFunction": "void *(*)(void *, void *, size_t, size_t, VkSystemAllocationScope)",
  "PFN_vkVoidFunction": "void (*)(void)",
  "VkAllocationCallbacks": "struct VkAllocationCallbacks",
  "VkApplicationInfo": "struct VkApplicationInfo",
  "VkFormatProperties": "struct VkFormatProperties",
  "VkImageFormatProperties": "struct VkImageFormatProperties",
  "VkInstanceCreateInfo": "struct VkInstanceCreateInfo",
  "VkMemoryHeap": "struct VkMemoryHeap",
  "VkMemoryType": "struct VkMemoryType",
  "VkPhysicalDeviceFeatures": "struct VkPhysicalDeviceFeatures",
  "VkPhysicalDeviceLimits": "struct VkPhysicalDeviceLimits",
  "VkPhysicalDeviceMemoryProperties": "struct VkPhysicalDeviceMemoryProperties",
  "VkPhysicalDeviceSparseProperties": "struct VkPhysicalDeviceSparseProperties",
  "VkPhysicalDeviceProperties": "struct VkPhysicalDeviceProperties",
  "VkQueueFamilyProperties": "struct VkQueueFamilyProperties",
  "VkDeviceQueueCreateInfo": "struct VkDeviceQueueCreateInfo",
  "VkDeviceCreateInfo": "struct VkDeviceCreateInfo",
  "VkExtensionProperties": "struct VkExtensionProperties",
  "VkLayerProperties": "struct VkLayerProperties",
  "VkSubmitInfo": "struct VkSubmitInfo",
  "VkMappedMemoryRange": "struct VkMappedMemoryRange",
  "VkMemoryAllocateInfo": "struct VkMemoryAllocateInfo",
  "VkMemoryRequirements": "struct VkMemoryRequirements",
  "VkSparseMemoryBind": "struct VkSparseMemoryBind",
  "VkSparseBufferMemoryBindInfo": "struct VkSparseBufferMemoryBindInfo",
  "VkSparseImageOpaqueMemoryBindInfo": "struct VkSparseImageOpaqueMemoryBindInfo",
  "VkImageSubresource": "struct VkImageSubresource",
  "VkSparseImageMemoryBind": "struct VkSparseImageMemoryBind",
  "VkSparseImageMemoryBindInfo": "struct VkSparseImageMemoryBindInfo",
  "VkBindSparseInfo": "struct VkBindSparseInfo",
  "VkSparseImageFormatProperties": "struct VkSparseImageFormatProperties",
  "VkSparseImageMemoryRequirements": "struct VkSparseImageMemoryRequirements",
  "VkFenceCreateInfo": "struct VkFenceCreateInfo",
  "VkSemaphoreCreateInfo": "struct VkSemaphoreCreateInfo",
  "VkEventCreateInfo": "struct VkEventCreateInfo",
  "VkQueryPoolCreateInfo": "struct VkQueryPoolCreateInfo",
  "VkBufferCreateInfo": "struct VkBufferCreateInfo",
  "VkBufferViewCreateInfo": "struct VkBufferViewCreateInfo",
  "VkImageCreateInfo": "struct VkImageCreateInfo",
  "VkSubresourceLayout": "struct VkSubresourceLayout",
  "VkComponentMapping": "struct VkComponentMapping",
  "VkImageViewCreateInfo": "struct VkImageViewCreateInfo",
  "VkShaderModuleCreateInfo": "struct VkShaderModuleCreateInfo",
  "VkPipelineCacheCreateInfo": "struct VkPipelineCacheCreateInfo",
  "VkSpecializationMapEntry": "struct VkSpecializationMapEntry",
  "VkSpecializationInfo": "struct VkSpecializationInfo",
  "VkPipelineShaderStageCreateInfo": "struct VkPipelineShaderStageCreateInfo",
  "VkComputePipelineCreateInfo": "struct VkComputePipelineCreateInfo",
  "VkVertexInputBindingDescription": "struct VkVertexInputBindingDescription",
  "VkVertexInputAttributeDescription": "struct VkVertexInputAttributeDescription",
  "VkPipelineVertexInputStateCreateInfo": "struct VkPipelineVertexInputStateCreateInfo",
  "VkPipelineInputAssemblyStateCreateInfo": "struct VkPipelineInputAssemblyStateCreateInfo",
  "VkPipelineTessellationStateCreateInfo": "struct VkPipelineTessellationStateCreateInfo",
  "VkViewport": "struct VkViewport",
  "VkPipelineViewportStateCreateInfo": "struct VkPipelineViewportStateCreateInfo",
  "VkPipelineRasterizationStateCreateInfo": "struct VkPipelineRasterizationStateCreateInfo",
  "VkPipelineMultisampleStateCreateInfo": "struct VkPipelineMultisampleStateCreateInfo",
  "VkStencilOpState": "struct VkStencilOpState",
  "VkPipelineDepthStencilStateCreateInfo": "struct VkPipelineDepthStencilStateCreateInfo",
  "VkPipelineColorBlendAttachmentState": "struct VkPipelineColorBlendAttachmentState",
  "VkPipelineColorBlendStateCreateInfo": "struct VkPipelineColorBlendStateCreateInfo",
  "VkPipelineDynamicStateCreateInfo": "struct VkPipelineDynamicStateCreateInfo",
  "VkGraphicsPipelineCreateInfo": "struct VkGraphicsPipelineCreateInfo",
  "VkPushConstantRange": "struct VkPushConstantRange",
  "VkPipelineLayoutCreateInfo": "struct VkPipelineLayoutCreateInfo",
  "VkSamplerCreateInfo": "struct VkSamplerCreateInfo",
  "VkCopyDescriptorSet": "struct VkCopyDescriptorSet",
  "VkDescriptorBufferInfo": "struct VkDescriptorBufferInfo",
  "VkDescriptorImageInfo": "struct VkDescriptorImageInfo",
  "VkDescriptorPoolSize": "struct VkDescriptorPoolSize",
  "VkDescriptorPoolCreateInfo": "struct VkDescriptorPoolCreateInfo",
  "VkDescriptorSetAllocateInfo": "struct VkDescriptorSetAllocateInfo",
  "VkDescriptorSetLayoutBinding": "struct VkDescriptorSetLayoutBinding",
  "VkDescriptorSetLayoutCreateInfo": "struct VkDescriptorSetLayoutCreateInfo",
  "VkWriteDescriptorSet": "struct VkWriteDescriptorSet",
  "VkAttachmentDescription": "struct VkAttachmentDescription",
  "VkAttachmentReference": "struct VkAttachmentReference",
  "VkFramebufferCreateInfo": "struct VkFramebufferCreateInfo",
  "VkSubpassDescription": "struct VkSubpassDescription",
  "VkSubpassDependency": "struct VkSubpassDependency",
  "VkRenderPassCreateInfo": "struct VkRenderPassCreateInfo",
  "VkCommandPoolCreateInfo": "struct VkCommandPoolCreateInfo",
  "VkCommandBufferAllocateInfo": "struct VkCommandBufferAllocateInfo",
  "VkCommandBufferInheritanceInfo": "struct VkCommandBufferInheritanceInfo",
  "VkCommandBufferBeginInfo": "struct VkCommandBufferBeginInfo",
  "VkBufferCopy": "struct VkBufferCopy",
  "VkImageSubresourceLayers": "struct VkImageSubresourceLayers",
  "VkBufferImageCopy": "struct VkBufferImageCopy",
  "VkClearColorValue": "union VkClearColorValue",
  "VkClearDepthStencilValue": "struct VkClearDepthStencilValue",
  "VkClearValue": "union VkClearValue",
  "VkClearAttachment": "struct VkClearAttachment",
  "VkClearRect": "struct VkClearRect",
  "VkImageBlit": "struct VkImageBlit",
  "VkImageCopy": "struct VkImageCopy",
  "VkImageResolve": "struct VkImageResolve",
  "VkRenderPassBeginInfo": "struct VkRenderPassBeginInfo",
  "PFN_vkCreateInstance": "VkResult (*)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *)",
  "PFN_vkDestroyInstance": "void (*)(VkInstance, const VkAllocationCallbacks *)",
  "PFN_vkEnumeratePhysicalDevices": "VkResult (*)(VkInstance, uint32_t *, VkPhysicalDevice *)",
  "PFN_vkGetPhysicalDeviceFeatures": "void (*)(VkPhysicalDevice, VkPhysicalDeviceFeatures *)",
  "PFN_vkGetPhysicalDeviceFormatProperties": "void (*)(VkPhysicalDevice, VkFormat, VkFormatProperties *)",
  "PFN_vkGetPhysicalDeviceImageFormatProperties": "VkResult (*)(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties *)",
  "PFN_vkGetPhysicalDeviceProperties": "void (*)(VkPhysicalDevice, VkPhysicalDeviceProperties *)",
  "PFN_vkGetPhysicalDeviceQueueFamilyProperties": "void (*)(VkPhysicalDevice, uint32_t *, VkQueueFamilyProperties *)",
  "PFN_vkGetPhysicalDeviceMemoryProperties": "void (*)(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties *)",
  "PFN_vkGetInstanceProcAddr": "PFN_vkVoidFunction (*)(VkInstance, const char *)",
  "PFN_vkGetDeviceProcAddr": "PFN_vkVoidFunction (*)(VkDevice, const char *)",
  "PFN_vkCreateDevice": "VkResult (*)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *, VkDevice *)",
  "PFN_vkDestroyDevice": "void (*)(VkDevice, const VkAllocationCallbacks *)",
  "PFN_vkEnumerateInstanceExtensionProperties": "VkResult (*)(const char *, uint32_t *, VkExtensionProperties *)",
  "PFN_vkEnumerateDeviceExtensionProperties": "VkResult (*)(VkPhysicalDevice, const char *, uint32_t *, VkExtensionProperties *)",
  "PFN_vkEnumerateInstanceLayerProperties": "VkResult (*)(uint32_t *, VkLayerProperties *)",
  "PFN_vkEnumerateDeviceLayerProperties": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkLayerProperties *)",
  "PFN_vkGetDeviceQueue": "void (*)(VkDevice, uint32_t, uint32_t, VkQueue *)",
  "PFN_vkQueueSubmit": "VkResult (*)(VkQueue, uint32_t, const VkSubmitInfo *, VkFence)",
  "PFN_vkQueueWaitIdle": "VkResult (*)(VkQueue)",
  "PFN_vkDeviceWaitIdle": "VkResult (*)(VkDevice)",
  "PFN_vkAllocateMemory": "VkResult (*)(VkDevice, const VkMemoryAllocateInfo *, const VkAllocationCallbacks *, VkDeviceMemory *)",
  "PFN_vkFreeMemory": "void (*)(VkDevice, VkDeviceMemory, const VkAllocationCallbacks *)",
  "PFN_vkMapMemory": "VkResult (*)(VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void **)",
  "PFN_vkUnmapMemory": "void (*)(VkDevice, VkDeviceMemory)",
  "PFN_vkFlushMappedMemoryRanges": "VkResult (*)(VkDevice, uint32_t, const VkMappedMemoryRange *)",
  "PFN_vkInvalidateMappedMemoryRanges": "VkResult (*)(VkDevice, uint32_t, const VkMappedMemoryRange *)",
  "PFN_vkGetDeviceMemoryCommitment": "void (*)(VkDevice, VkDeviceMemory, VkDeviceSize *)",
  "PFN_vkBindBufferMemory": "VkResult (*)(VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize)",
  "PFN_vkBindImageMemory": "VkResult (*)(VkDevice, VkImage, VkDeviceMemory, VkDeviceSize)",
  "PFN_vkGetBufferMemoryRequirements": "void (*)(VkDevice, VkBuffer, VkMemoryRequirements *)",
  "PFN_vkGetImageMemoryRequirements": "void (*)(VkDevice, VkImage, VkMemoryRequirements *)",
  "PFN_vkGetImageSparseMemoryRequirements": "void (*)(VkDevice, VkImage, uint32_t *, VkSparseImageMemoryRequirements *)",
  "PFN_vkGetPhysicalDeviceSparseImageFormatProperties": "void (*)(VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, uint32_t *, VkSparseImageFormatProperties *)",
  "PFN_vkQueueBindSparse": "VkResult (*)(VkQueue, uint32_t, const VkBindSparseInfo *, VkFence)",
  "PFN_vkCreateFence": "VkResult (*)(VkDevice, const VkFenceCreateInfo *, const VkAllocationCallbacks *, VkFence *)",
  "PFN_vkDestroyFence": "void (*)(VkDevice, VkFence, const VkAllocationCallbacks *)",
  "PFN_vkResetFences": "VkResult (*)(VkDevice, uint32_t, const VkFence *)",
  "PFN_vkGetFenceStatus": "VkResult (*)(VkDevice, VkFence)",
  "PFN_vkWaitForFences": "VkResult (*)(VkDevice, uint32_t, const VkFence *, VkBool32, uint64_t)",
  "PFN_vkCreateSemaphore": "VkResult (*)(VkDevice, const VkSemaphoreCreateInfo *, const VkAllocationCallbacks *, VkSemaphore *)",
  "PFN_vkDestroySemaphore": "void (*)(VkDevice, VkSemaphore, const VkAllocationCallbacks *)",
  "PFN_vkCreateEvent": "VkResult (*)(VkDevice, const VkEventCreateInfo *, const VkAllocationCallbacks *, VkEvent *)",
  "PFN_vkDestroyEvent": "void (*)(VkDevice, VkEvent, const VkAllocationCallbacks *)",
  "PFN_vkGetEventStatus": "VkResult (*)(VkDevice, VkEvent)",
  "PFN_vkSetEvent": "VkResult (*)(VkDevice, VkEvent)",
  "PFN_vkResetEvent": "VkResult (*)(VkDevice, VkEvent)",
  "PFN_vkCreateQueryPool": "VkResult (*)(VkDevice, const VkQueryPoolCreateInfo *, const VkAllocationCallbacks *, VkQueryPool *)",
  "PFN_vkDestroyQueryPool": "void (*)(VkDevice, VkQueryPool, const VkAllocationCallbacks *)",
  "PFN_vkGetQueryPoolResults": "VkResult (*)(VkDevice, VkQueryPool, uint32_t, uint32_t, size_t, void *, VkDeviceSize, VkQueryResultFlags)",
  "PFN_vkCreateBuffer": "VkResult (*)(VkDevice, const VkBufferCreateInfo *, const VkAllocationCallbacks *, VkBuffer *)",
  "PFN_vkDestroyBuffer": "void (*)(VkDevice, VkBuffer, const VkAllocationCallbacks *)",
  "PFN_vkCreateBufferView": "VkResult (*)(VkDevice, const VkBufferViewCreateInfo *, const VkAllocationCallbacks *, VkBufferView *)",
  "PFN_vkDestroyBufferView": "void (*)(VkDevice, VkBufferView, const VkAllocationCallbacks *)",
  "PFN_vkCreateImage": "VkResult (*)(VkDevice, const VkImageCreateInfo *, const VkAllocationCallbacks *, VkImage *)",
  "PFN_vkDestroyImage": "void (*)(VkDevice, VkImage, const VkAllocationCallbacks *)",
  "PFN_vkGetImageSubresourceLayout": "void (*)(VkDevice, VkImage, const VkImageSubresource *, VkSubresourceLayout *)",
  "PFN_vkCreateImageView": "VkResult (*)(VkDevice, const VkImageViewCreateInfo *, const VkAllocationCallbacks *, VkImageView *)",
  "PFN_vkDestroyImageView": "void (*)(VkDevice, VkImageView, const VkAllocationCallbacks *)",
  "PFN_vkCreateShaderModule": "VkResult (*)(VkDevice, const VkShaderModuleCreateInfo *, const VkAllocationCallbacks *, VkShaderModule *)",
  "PFN_vkDestroyShaderModule": "void (*)(VkDevice, VkShaderModule, const VkAllocationCallbacks *)",
  "PFN_vkCreatePipelineCache": "VkResult (*)(VkDevice, const VkPipelineCacheCreateInfo *, const VkAllocationCallbacks *, VkPipelineCache *)",
  "PFN_vkDestroyPipelineCache": "void (*)(VkDevice, VkPipelineCache, const VkAllocationCallbacks *)",
  "PFN_vkGetPipelineCacheData": "VkResult (*)(VkDevice, VkPipelineCache, size_t *, void *)",
  "PFN_vkMergePipelineCaches": "VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkPipelineCache *)",
  "PFN_vkCreateGraphicsPipelines": "VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkGraphicsPipelineCreateInfo *, const VkAllocationCallbacks *, VkPipeline *)",
  "PFN_vkCreateComputePipelines": "VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkComputePipelineCreateInfo *, const VkAllocationCallbacks *, VkPipeline *)",
  "PFN_vkDestroyPipeline": "void (*)(VkDevice, VkPipeline, const VkAllocationCallbacks *)",
  "PFN_vkCreatePipelineLayout": "VkResult (*)(VkDevice, const VkPipelineLayoutCreateInfo *, const VkAllocationCallbacks *, VkPipelineLayout *)",
  "PFN_vkDestroyPipelineLayout": "void (*)(VkDevice, VkPipelineLayout, const VkAllocationCallbacks *)",
  "PFN_vkCreateSampler": "VkResult (*)(VkDevice, const VkSamplerCreateInfo *, const VkAllocationCallbacks *, VkSampler *)",
  "PFN_vkDestroySampler": "void (*)(VkDevice, VkSampler, const VkAllocationCallbacks *)",
  "PFN_vkCreateDescriptorSetLayout": "VkResult (*)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, const VkAllocationCallbacks *, VkDescriptorSetLayout *)",
  "PFN_vkDestroyDescriptorSetLayout": "void (*)(VkDevice, VkDescriptorSetLayout, const VkAllocationCallbacks *)",
  "PFN_vkCreateDescriptorPool": "VkResult (*)(VkDevice, const VkDescriptorPoolCreateInfo *, const VkAllocationCallbacks *, VkDescriptorPool *)",
  "PFN_vkDestroyDescriptorPool": "void (*)(VkDevice, VkDescriptorPool, const VkAllocationCallbacks *)",
  "PFN_vkResetDescriptorPool": "VkResult (*)(VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags)",
  "PFN_vkAllocateDescriptorSets": "VkResult (*)(VkDevice, const VkDescriptorSetAllocateInfo *, VkDescriptorSet *)",
  "PFN_vkFreeDescriptorSets": "VkResult (*)(VkDevice, VkDescriptorPool, uint32_t, const VkDescriptorSet *)",
  "PFN_vkUpdateDescriptorSets": "void (*)(VkDevice, uint32_t, const VkWriteDescriptorSet *, uint32_t, const VkCopyDescriptorSet *)",
  "PFN_vkCreateFramebuffer": "VkResult (*)(VkDevice, const VkFramebufferCreateInfo *, const VkAllocationCallbacks *, VkFramebuffer *)",
  "PFN_vkDestroyFramebuffer": "void (*)(VkDevice, VkFramebuffer, const VkAllocationCallbacks *)",
  "PFN_vkCreateRenderPass": "VkResult (*)(VkDevice, const VkRenderPassCreateInfo *, const VkAllocationCallbacks *, VkRenderPass *)",
  "PFN_vkDestroyRenderPass": "void (*)(VkDevice, VkRenderPass, const VkAllocationCallbacks *)",
  "PFN_vkGetRenderAreaGranularity": "void (*)(VkDevice, VkRenderPass, VkExtent2D *)",
  "PFN_vkCreateCommandPool": "VkResult (*)(VkDevice, const VkCommandPoolCreateInfo *, const VkAllocationCallbacks *, VkCommandPool *)",
  "PFN_vkDestroyCommandPool": "void (*)(VkDevice, VkCommandPool, const VkAllocationCallbacks *)",
  "PFN_vkResetCommandPool": "VkResult (*)(VkDevice, VkCommandPool, VkCommandPoolResetFlags)",
  "PFN_vkAllocateCommandBuffers": "VkResult (*)(VkDevice, const VkCommandBufferAllocateInfo *, VkCommandBuffer *)",
  "PFN_vkFreeCommandBuffers": "void (*)(VkDevice, VkCommandPool, uint32_t, const VkCommandBuffer *)",
  "PFN_vkBeginCommandBuffer": "VkResult (*)(VkCommandBuffer, const VkCommandBufferBeginInfo *)",
  "PFN_vkEndCommandBuffer": "VkResult (*)(VkCommandBuffer)",
  "PFN_vkResetCommandBuffer": "VkResult (*)(VkCommandBuffer, VkCommandBufferResetFlags)",
  "PFN_vkCmdBindPipeline": "void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipeline)",
  "PFN_vkCmdSetViewport": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkViewport *)",
  "PFN_vkCmdSetScissor": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *)",
  "PFN_vkCmdSetLineWidth": "void (*)(VkCommandBuffer, float)",
  "PFN_vkCmdSetDepthBias": "void (*)(VkCommandBuffer, float, float, float)",
  "PFN_vkCmdSetBlendConstants": "void (*)(VkCommandBuffer, const float *)",
  "PFN_vkCmdSetDepthBounds": "void (*)(VkCommandBuffer, float, float)",
  "PFN_vkCmdSetStencilCompareMask": "void (*)(VkCommandBuffer, VkStencilFaceFlags, uint32_t)",
  "PFN_vkCmdSetStencilWriteMask": "void (*)(VkCommandBuffer, VkStencilFaceFlags, uint32_t)",
  "PFN_vkCmdSetStencilReference": "void (*)(VkCommandBuffer, VkStencilFaceFlags, uint32_t)",
  "PFN_vkCmdBindDescriptorSets": "void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkDescriptorSet *, uint32_t, const uint32_t *)",
  "PFN_vkCmdBindIndexBuffer": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType)",
  "PFN_vkCmdBindVertexBuffers": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *)",
  "PFN_vkCmdDraw": "void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t)",
  "PFN_vkCmdDrawIndexed": "void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, int32_t, uint32_t)",
  "PFN_vkCmdDrawIndirect": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCmdDrawIndexedIndirect": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCmdDispatch": "void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t)",
  "PFN_vkCmdDispatchIndirect": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize)",
  "PFN_vkCmdCopyBuffer": "void (*)(VkCommandBuffer, VkBuffer, VkBuffer, uint32_t, const VkBufferCopy *)",
  "PFN_vkCmdCopyImage": "void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageCopy *)",
  "PFN_vkCmdBlitImage": "void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageBlit *, VkFilter)",
  "PFN_vkCmdCopyBufferToImage": "void (*)(VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint32_t, const VkBufferImageCopy *)",
  "PFN_vkCmdCopyImageToBuffer": "void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint32_t, const VkBufferImageCopy *)",
  "PFN_vkCmdUpdateBuffer": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, const void *)",
  "PFN_vkCmdFillBuffer": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t)",
  "PFN_vkCmdClearColorImage": "void (*)(VkCommandBuffer, VkImage, VkImageLayout, const VkClearColorValue *, uint32_t, const VkImageSubresourceRange *)",
  "PFN_vkCmdClearDepthStencilImage": "void (*)(VkCommandBuffer, VkImage, VkImageLayout, const VkClearDepthStencilValue *, uint32_t, const VkImageSubresourceRange *)",
  "PFN_vkCmdClearAttachments": "void (*)(VkCommandBuffer, uint32_t, const VkClearAttachment *, uint32_t, const VkClearRect *)",
  "PFN_vkCmdResolveImage": "void (*)(VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint32_t, const VkImageResolve *)",
  "PFN_vkCmdSetEvent": "void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags)",
  "PFN_vkCmdResetEvent": "void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags)",
  "PFN_vkCmdWaitEvents": "void (*)(VkCommandBuffer, uint32_t, const VkEvent *, VkPipelineStageFlags, VkPipelineStageFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier *, uint32_t, const VkImageMemoryBarrier *)",
  "PFN_vkCmdPipelineBarrier": "void (*)(VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint32_t, const VkMemoryBarrier *, uint32_t, const VkBufferMemoryBarrier *, uint32_t, const VkImageMemoryBarrier *)",
  "PFN_vkCmdBeginQuery": "void (*)(VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags)",
  "PFN_vkCmdEndQuery": "void (*)(VkCommandBuffer, VkQueryPool, uint32_t)",
  "PFN_vkCmdResetQueryPool": "void (*)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t)",
  "PFN_vkCmdWriteTimestamp": "void (*)(VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint32_t)",
  "PFN_vkCmdCopyQueryPoolResults": "void (*)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags)",
  "PFN_vkCmdPushConstants": "void (*)(VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint32_t, uint32_t, const void *)",
  "PFN_vkCmdBeginRenderPass": "void (*)(VkCommandBuffer, const VkRenderPassBeginInfo *, VkSubpassContents)",
  "PFN_vkCmdNextSubpass": "void (*)(VkCommandBuffer, VkSubpassContents)",
  "PFN_vkCmdEndRenderPass": "void (*)(VkCommandBuffer)",
  "PFN_vkCmdExecuteCommands": "void (*)(VkCommandBuffer, uint32_t, const VkCommandBuffer *)",
  "VkSamplerYcbcrConversion": "struct VkSamplerYcbcrConversion_T *",
  "VkDescriptorUpdateTemplate": "struct VkDescriptorUpdateTemplate_T *",
  "VkPointClippingBehavior": "enum VkPointClippingBehavior",
  "VkTessellationDomainOrigin": "enum VkTessellationDomainOrigin",
  "VkSamplerYcbcrModelConversion": "enum VkSamplerYcbcrModelConversion",
  "VkSamplerYcbcrRange": "enum VkSamplerYcbcrRange",
  "VkChromaLocation": "enum VkChromaLocation",
  "VkDescriptorUpdateTemplateType": "enum VkDescriptorUpdateTemplateType",
  "VkSubgroupFeatureFlagBits": "enum VkSubgroupFeatureFlagBits",
  "VkSubgroupFeatureFlags": "VkFlags",
  "VkPeerMemoryFeatureFlagBits": "enum VkPeerMemoryFeatureFlagBits",
  "VkPeerMemoryFeatureFlags": "VkFlags",
  "VkMemoryAllocateFlagBits": "enum VkMemoryAllocateFlagBits",
  "VkMemoryAllocateFlags": "VkFlags",
  "VkCommandPoolTrimFlags": "VkFlags",
  "VkDescriptorUpdateTemplateCreateFlags": "VkFlags",
  "VkExternalMemoryHandleTypeFlagBits": "enum VkExternalMemoryHandleTypeFlagBits",
  "VkExternalMemoryHandleTypeFlags": "VkFlags",
  "VkExternalMemoryFeatureFlagBits": "enum VkExternalMemoryFeatureFlagBits",
  "VkExternalMemoryFeatureFlags": "VkFlags",
  "VkExternalFenceHandleTypeFlagBits": "enum VkExternalFenceHandleTypeFlagBits",
  "VkExternalFenceHandleTypeFlags": "VkFlags",
  "VkExternalFenceFeatureFlagBits": "enum VkExternalFenceFeatureFlagBits",
  "VkExternalFenceFeatureFlags": "VkFlags",
  "VkFenceImportFlagBits": "enum VkFenceImportFlagBits",
  "VkFenceImportFlags": "VkFlags",
  "VkSemaphoreImportFlagBits": "enum VkSemaphoreImportFlagBits",
  "VkSemaphoreImportFlags": "VkFlags",
  "VkExternalSemaphoreHandleTypeFlagBits": "enum VkExternalSemaphoreHandleTypeFlagBits",
  "VkExternalSemaphoreHandleTypeFlags": "VkFlags",
  "VkExternalSemaphoreFeatureFlagBits": "enum VkExternalSemaphoreFeatureFlagBits",
  "VkExternalSemaphoreFeatureFlags": "VkFlags",
  "VkPhysicalDeviceSubgroupProperties": "struct VkPhysicalDeviceSubgroupProperties",
  "VkBindBufferMemoryInfo": "struct VkBindBufferMemoryInfo",
  "VkBindImageMemoryInfo": "struct VkBindImageMemoryInfo",
  "VkPhysicalDevice16BitStorageFeatures": "struct VkPhysicalDevice16BitStorageFeatures",
  "VkMemoryDedicatedRequirements": "struct VkMemoryDedicatedRequirements",
  "VkMemoryDedicatedAllocateInfo": "struct VkMemoryDedicatedAllocateInfo",
  "VkMemoryAllocateFlagsInfo": "struct VkMemoryAllocateFlagsInfo",
  "VkDeviceGroupRenderPassBeginInfo": "struct VkDeviceGroupRenderPassBeginInfo",
  "VkDeviceGroupCommandBufferBeginInfo": "struct VkDeviceGroupCommandBufferBeginInfo",
  "VkDeviceGroupSubmitInfo": "struct VkDeviceGroupSubmitInfo",
  "VkDeviceGroupBindSparseInfo": "struct VkDeviceGroupBindSparseInfo",
  "VkBindBufferMemoryDeviceGroupInfo": "struct VkBindBufferMemoryDeviceGroupInfo",
  "VkBindImageMemoryDeviceGroupInfo": "struct VkBindImageMemoryDeviceGroupInfo",
  "VkPhysicalDeviceGroupProperties": "struct VkPhysicalDeviceGroupProperties",
  "VkDeviceGroupDeviceCreateInfo": "struct VkDeviceGroupDeviceCreateInfo",
  "VkBufferMemoryRequirementsInfo2": "struct VkBufferMemoryRequirementsInfo2",
  "VkImageMemoryRequirementsInfo2": "struct VkImageMemoryRequirementsInfo2",
  "VkImageSparseMemoryRequirementsInfo2": "struct VkImageSparseMemoryRequirementsInfo2",
  "VkMemoryRequirements2": "struct VkMemoryRequirements2",
  "VkSparseImageMemoryRequirements2": "struct VkSparseImageMemoryRequirements2",
  "VkPhysicalDeviceFeatures2": "struct VkPhysicalDeviceFeatures2",
  "VkPhysicalDeviceProperties2": "struct VkPhysicalDeviceProperties2",
  "VkFormatProperties2": "struct VkFormatProperties2",
  "VkImageFormatProperties2": "struct VkImageFormatProperties2",
  "VkPhysicalDeviceImageFormatInfo2": "struct VkPhysicalDeviceImageFormatInfo2",
  "VkQueueFamilyProperties2": "struct VkQueueFamilyProperties2",
  "VkPhysicalDeviceMemoryProperties2": "struct VkPhysicalDeviceMemoryProperties2",
  "VkSparseImageFormatProperties2": "struct VkSparseImageFormatProperties2",
  "VkPhysicalDeviceSparseImageFormatInfo2": "struct VkPhysicalDeviceSparseImageFormatInfo2",
  "VkPhysicalDevicePointClippingProperties": "struct VkPhysicalDevicePointClippingProperties",
  "VkInputAttachmentAspectReference": "struct VkInputAttachmentAspectReference",
  "VkRenderPassInputAttachmentAspectCreateInfo": "struct VkRenderPassInputAttachmentAspectCreateInfo",
  "VkImageViewUsageCreateInfo": "struct VkImageViewUsageCreateInfo",
  "VkPipelineTessellationDomainOriginStateCreateInfo": "struct VkPipelineTessellationDomainOriginStateCreateInfo",
  "VkRenderPassMultiviewCreateInfo": "struct VkRenderPassMultiviewCreateInfo",
  "VkPhysicalDeviceMultiviewFeatures": "struct VkPhysicalDeviceMultiviewFeatures",
  "VkPhysicalDeviceMultiviewProperties": "struct VkPhysicalDeviceMultiviewProperties",
  "VkPhysicalDeviceVariablePointersFeatures": "struct VkPhysicalDeviceVariablePointersFeatures",
  "VkPhysicalDeviceVariablePointerFeatures": "VkPhysicalDeviceVariablePointersFeatures",
  "VkPhysicalDeviceProtectedMemoryFeatures": "struct VkPhysicalDeviceProtectedMemoryFeatures",
  "VkPhysicalDeviceProtectedMemoryProperties": "struct VkPhysicalDeviceProtectedMemoryProperties",
  "VkDeviceQueueInfo2": "struct VkDeviceQueueInfo2",
  "VkProtectedSubmitInfo": "struct VkProtectedSubmitInfo",
  "VkSamplerYcbcrConversionCreateInfo": "struct VkSamplerYcbcrConversionCreateInfo",
  "VkSamplerYcbcrConversionInfo": "struct VkSamplerYcbcrConversionInfo",
  "VkBindImagePlaneMemoryInfo": "struct VkBindImagePlaneMemoryInfo",
  "VkImagePlaneMemoryRequirementsInfo": "struct VkImagePlaneMemoryRequirementsInfo",
  "VkPhysicalDeviceSamplerYcbcrConversionFeatures": "struct VkPhysicalDeviceSamplerYcbcrConversionFeatures",
  "VkSamplerYcbcrConversionImageFormatProperties": "struct VkSamplerYcbcrConversionImageFormatProperties",
  "VkDescriptorUpdateTemplateEntry": "struct VkDescriptorUpdateTemplateEntry",
  "VkDescriptorUpdateTemplateCreateInfo": "struct VkDescriptorUpdateTemplateCreateInfo",
  "VkExternalMemoryProperties": "struct VkExternalMemoryProperties",
  "VkPhysicalDeviceExternalImageFormatInfo": "struct VkPhysicalDeviceExternalImageFormatInfo",
  "VkExternalImageFormatProperties": "struct VkExternalImageFormatProperties",
  "VkPhysicalDeviceExternalBufferInfo": "struct VkPhysicalDeviceExternalBufferInfo",
  "VkExternalBufferProperties": "struct VkExternalBufferProperties",
  "VkPhysicalDeviceIDProperties": "struct VkPhysicalDeviceIDProperties",
  "VkExternalMemoryImageCreateInfo": "struct VkExternalMemoryImageCreateInfo",
  "VkExternalMemoryBufferCreateInfo": "struct VkExternalMemoryBufferCreateInfo",
  "VkExportMemoryAllocateInfo": "struct VkExportMemoryAllocateInfo",
  "VkPhysicalDeviceExternalFenceInfo": "struct VkPhysicalDeviceExternalFenceInfo",
  "VkExternalFenceProperties": "struct VkExternalFenceProperties",
  "VkExportFenceCreateInfo": "struct VkExportFenceCreateInfo",
  "VkExportSemaphoreCreateInfo": "struct VkExportSemaphoreCreateInfo",
  "VkPhysicalDeviceExternalSemaphoreInfo": "struct VkPhysicalDeviceExternalSemaphoreInfo",
  "VkExternalSemaphoreProperties": "struct VkExternalSemaphoreProperties",
  "VkPhysicalDeviceMaintenance3Properties": "struct VkPhysicalDeviceMaintenance3Properties",
  "VkDescriptorSetLayoutSupport": "struct VkDescriptorSetLayoutSupport",
  "VkPhysicalDeviceShaderDrawParametersFeatures": "struct VkPhysicalDeviceShaderDrawParametersFeatures",
  "VkPhysicalDeviceShaderDrawParameterFeatures": "VkPhysicalDeviceShaderDrawParametersFeatures",
  "PFN_vkEnumerateInstanceVersion": "VkResult (*)(uint32_t *)",
  "PFN_vkBindBufferMemory2": "VkResult (*)(VkDevice, uint32_t, const VkBindBufferMemoryInfo *)",
  "PFN_vkBindImageMemory2": "VkResult (*)(VkDevice, uint32_t, const VkBindImageMemoryInfo *)",
  "PFN_vkGetDeviceGroupPeerMemoryFeatures": "void (*)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *)",
  "PFN_vkCmdSetDeviceMask": "void (*)(VkCommandBuffer, uint32_t)",
  "PFN_vkCmdDispatchBase": "void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)",
  "PFN_vkEnumeratePhysicalDeviceGroups": "VkResult (*)(VkInstance, uint32_t *, VkPhysicalDeviceGroupProperties *)",
  "PFN_vkGetImageMemoryRequirements2": "void (*)(VkDevice, const VkImageMemoryRequirementsInfo2 *, VkMemoryRequirements2 *)",
  "PFN_vkGetBufferMemoryRequirements2": "void (*)(VkDevice, const VkBufferMemoryRequirementsInfo2 *, VkMemoryRequirements2 *)",
  "PFN_vkGetImageSparseMemoryRequirements2": "void (*)(VkDevice, const VkImageSparseMemoryRequirementsInfo2 *, uint32_t *, VkSparseImageMemoryRequirements2 *)",
  "PFN_vkGetPhysicalDeviceFeatures2": "void (*)(VkPhysicalDevice, VkPhysicalDeviceFeatures2 *)",
  "PFN_vkGetPhysicalDeviceProperties2": "void (*)(VkPhysicalDevice, VkPhysicalDeviceProperties2 *)",
  "PFN_vkGetPhysicalDeviceFormatProperties2": "void (*)(VkPhysicalDevice, VkFormat, VkFormatProperties2 *)",
  "PFN_vkGetPhysicalDeviceImageFormatProperties2": "VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceImageFormatInfo2 *, VkImageFormatProperties2 *)",
  "PFN_vkGetPhysicalDeviceQueueFamilyProperties2": "void (*)(VkPhysicalDevice, uint32_t *, VkQueueFamilyProperties2 *)",
  "PFN_vkGetPhysicalDeviceMemoryProperties2": "void (*)(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2 *)",
  "PFN_vkGetPhysicalDeviceSparseImageFormatProperties2": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *, uint32_t *, VkSparseImageFormatProperties2 *)",
  "PFN_vkTrimCommandPool": "void (*)(VkDevice, VkCommandPool, VkCommandPoolTrimFlags)",
  "PFN_vkGetDeviceQueue2": "void (*)(VkDevice, const VkDeviceQueueInfo2 *, VkQueue *)",
  "PFN_vkCreateSamplerYcbcrConversion": "VkResult (*)(VkDevice, const VkSamplerYcbcrConversionCreateInfo *, const VkAllocationCallbacks *, VkSamplerYcbcrConversion *)",
  "PFN_vkDestroySamplerYcbcrConversion": "void (*)(VkDevice, VkSamplerYcbcrConversion, const VkAllocationCallbacks *)",
  "PFN_vkCreateDescriptorUpdateTemplate": "VkResult (*)(VkDevice, const VkDescriptorUpdateTemplateCreateInfo *, const VkAllocationCallbacks *, VkDescriptorUpdateTemplate *)",
  "PFN_vkDestroyDescriptorUpdateTemplate": "void (*)(VkDevice, VkDescriptorUpdateTemplate, const VkAllocationCallbacks *)",
  "PFN_vkUpdateDescriptorSetWithTemplate": "void (*)(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, const void *)",
  "PFN_vkGetPhysicalDeviceExternalBufferProperties": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalBufferInfo *, VkExternalBufferProperties *)",
  "PFN_vkGetPhysicalDeviceExternalFenceProperties": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalFenceInfo *, VkExternalFenceProperties *)",
  "PFN_vkGetPhysicalDeviceExternalSemaphoreProperties": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *, VkExternalSemaphoreProperties *)",
  "PFN_vkGetDescriptorSetLayoutSupport": "void (*)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *)",
  "VkDriverId": "enum VkDriverId",
  "VkShaderFloatControlsIndependence": "enum VkShaderFloatControlsIndependence",
  "VkSamplerReductionMode": "enum VkSamplerReductionMode",
  "VkSemaphoreType": "enum VkSemaphoreType",
  "VkResolveModeFlagBits": "enum VkResolveModeFlagBits",
  "VkResolveModeFlags": "VkFlags",
  "VkDescriptorBindingFlagBits": "enum VkDescriptorBindingFlagBits",
  "VkDescriptorBindingFlags": "VkFlags",
  "VkSemaphoreWaitFlagBits": "enum VkSemaphoreWaitFlagBits",
  "VkSemaphoreWaitFlags": "VkFlags",
  "VkPhysicalDeviceVulkan11Features": "struct VkPhysicalDeviceVulkan11Features",
  "VkPhysicalDeviceVulkan11Properties": "struct VkPhysicalDeviceVulkan11Properties",
  "VkPhysicalDeviceVulkan12Features": "struct VkPhysicalDeviceVulkan12Features",
  "VkConformanceVersion": "struct VkConformanceVersion",
  "VkPhysicalDeviceVulkan12Properties": "struct VkPhysicalDeviceVulkan12Properties",
  "VkImageFormatListCreateInfo": "struct VkImageFormatListCreateInfo",
  "VkAttachmentDescription2": "struct VkAttachmentDescription2",
  "VkAttachmentReference2": "struct VkAttachmentReference2",
  "VkSubpassDescription2": "struct VkSubpassDescription2",
  "VkSubpassDependency2": "struct VkSubpassDependency2",
  "VkRenderPassCreateInfo2": "struct VkRenderPassCreateInfo2",
  "VkSubpassBeginInfo": "struct VkSubpassBeginInfo",
  "VkSubpassEndInfo": "struct VkSubpassEndInfo",
  "VkPhysicalDevice8BitStorageFeatures": "struct VkPhysicalDevice8BitStorageFeatures",
  "VkPhysicalDeviceDriverProperties": "struct VkPhysicalDeviceDriverProperties",
  "VkPhysicalDeviceShaderAtomicInt64Features": "struct VkPhysicalDeviceShaderAtomicInt64Features",
  "VkPhysicalDeviceShaderFloat16Int8Features": "struct VkPhysicalDeviceShaderFloat16Int8Features",
  "VkPhysicalDeviceFloatControlsProperties": "struct VkPhysicalDeviceFloatControlsProperties",
  "VkDescriptorSetLayoutBindingFlagsCreateInfo": "struct VkDescriptorSetLayoutBindingFlagsCreateInfo",
  "VkPhysicalDeviceDescriptorIndexingFeatures": "struct VkPhysicalDeviceDescriptorIndexingFeatures",
  "VkPhysicalDeviceDescriptorIndexingProperties": "struct VkPhysicalDeviceDescriptorIndexingProperties",
  "VkDescriptorSetVariableDescriptorCountAllocateInfo": "struct VkDescriptorSetVariableDescriptorCountAllocateInfo",
  "VkDescriptorSetVariableDescriptorCountLayoutSupport": "struct VkDescriptorSetVariableDescriptorCountLayoutSupport",
  "VkSubpassDescriptionDepthStencilResolve": "struct VkSubpassDescriptionDepthStencilResolve",
  "VkPhysicalDeviceDepthStencilResolveProperties": "struct VkPhysicalDeviceDepthStencilResolveProperties",
  "VkPhysicalDeviceScalarBlockLayoutFeatures": "struct VkPhysicalDeviceScalarBlockLayoutFeatures",
  "VkImageStencilUsageCreateInfo": "struct VkImageStencilUsageCreateInfo",
  "VkSamplerReductionModeCreateInfo": "struct VkSamplerReductionModeCreateInfo",
  "VkPhysicalDeviceSamplerFilterMinmaxProperties": "struct VkPhysicalDeviceSamplerFilterMinmaxProperties",
  "VkPhysicalDeviceVulkanMemoryModelFeatures": "struct VkPhysicalDeviceVulkanMemoryModelFeatures",
  "VkPhysicalDeviceImagelessFramebufferFeatures": "struct VkPhysicalDeviceImagelessFramebufferFeatures",
  "VkFramebufferAttachmentImageInfo": "struct VkFramebufferAttachmentImageInfo",
  "VkFramebufferAttachmentsCreateInfo": "struct VkFramebufferAttachmentsCreateInfo",
  "VkRenderPassAttachmentBeginInfo": "struct VkRenderPassAttachmentBeginInfo",
  "VkPhysicalDeviceUniformBufferStandardLayoutFeatures": "struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures",
  "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures": "struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures",
  "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures": "struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures",
  "VkAttachmentReferenceStencilLayout": "struct VkAttachmentReferenceStencilLayout",
  "VkAttachmentDescriptionStencilLayout": "struct VkAttachmentDescriptionStencilLayout",
  "VkPhysicalDeviceHostQueryResetFeatures": "struct VkPhysicalDeviceHostQueryResetFeatures",
  "VkPhysicalDeviceTimelineSemaphoreFeatures": "struct VkPhysicalDeviceTimelineSemaphoreFeatures",
  "VkPhysicalDeviceTimelineSemaphoreProperties": "struct VkPhysicalDeviceTimelineSemaphoreProperties",
  "VkSemaphoreTypeCreateInfo": "struct VkSemaphoreTypeCreateInfo",
  "VkTimelineSemaphoreSubmitInfo": "struct VkTimelineSemaphoreSubmitInfo",
  "VkSemaphoreWaitInfo": "struct VkSemaphoreWaitInfo",
  "VkSemaphoreSignalInfo": "struct VkSemaphoreSignalInfo",
  "VkPhysicalDeviceBufferDeviceAddressFeatures": "struct VkPhysicalDeviceBufferDeviceAddressFeatures",
  "VkBufferDeviceAddressInfo": "struct VkBufferDeviceAddressInfo",
  "VkBufferOpaqueCaptureAddressCreateInfo": "struct VkBufferOpaqueCaptureAddressCreateInfo",
  "VkMemoryOpaqueCaptureAddressAllocateInfo": "struct VkMemoryOpaqueCaptureAddressAllocateInfo",
  "VkDeviceMemoryOpaqueCaptureAddressInfo": "struct VkDeviceMemoryOpaqueCaptureAddressInfo",
  "PFN_vkCmdDrawIndirectCount": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCmdDrawIndexedIndirectCount": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCreateRenderPass2": "VkResult (*)(VkDevice, const VkRenderPassCreateInfo2 *, const VkAllocationCallbacks *, VkRenderPass *)",
  "PFN_vkCmdBeginRenderPass2": "void (*)(VkCommandBuffer, const VkRenderPassBeginInfo *, const VkSubpassBeginInfo *)",
  "PFN_vkCmdNextSubpass2": "void (*)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *)",
  "PFN_vkCmdEndRenderPass2": "void (*)(VkCommandBuffer, const VkSubpassEndInfo *)",
  "PFN_vkResetQueryPool": "void (*)(VkDevice, VkQueryPool, uint32_t, uint32_t)",
  "PFN_vkGetSemaphoreCounterValue": "VkResult (*)(VkDevice, VkSemaphore, uint64_t *)",
  "PFN_vkWaitSemaphores": "VkResult (*)(VkDevice, const VkSemaphoreWaitInfo *, uint64_t)",
  "PFN_vkSignalSemaphore": "VkResult (*)(VkDevice, const VkSemaphoreSignalInfo *)",
  "PFN_vkGetBufferDeviceAddress": "VkDeviceAddress (*)(VkDevice, const VkBufferDeviceAddressInfo *)",
  "PFN_vkGetBufferOpaqueCaptureAddress": "uint64_t (*)(VkDevice, const VkBufferDeviceAddressInfo *)",
  "PFN_vkGetDeviceMemoryOpaqueCaptureAddress": "uint64_t (*)(VkDevice, const VkDeviceMemoryOpaqueCaptureAddressInfo *)",
  "VkFlags64": "uint64_t",
  "VkPrivateDataSlot": "struct VkPrivateDataSlot_T *",
  "VkPipelineCreationFeedbackFlagBits": "enum VkPipelineCreationFeedbackFlagBits",
  "VkPipelineCreationFeedbackFlags": "VkFlags",
  "VkToolPurposeFlagBits": "enum VkToolPurposeFlagBits",
  "VkToolPurposeFlags": "VkFlags",
  "VkPrivateDataSlotCreateFlags": "VkFlags",
  "VkPipelineStageFlags2": "VkFlags64",
  "VkPipelineStageFlagBits2": "VkFlags64",
  "VkAccessFlags2": "VkFlags64",
  "VkAccessFlagBits2": "VkFlags64",
  "VkSubmitFlagBits": "enum VkSubmitFlagBits",
  "VkSubmitFlags": "VkFlags",
  "VkRenderingFlagBits": "enum VkRenderingFlagBits",
  "VkRenderingFlags": "VkFlags",
  "VkFormatFeatureFlags2": "VkFlags64",
  "VkFormatFeatureFlagBits2": "VkFlags64",
  "VkPhysicalDeviceVulkan13Features": "struct VkPhysicalDeviceVulkan13Features",
  "VkPhysicalDeviceVulkan13Properties": "struct VkPhysicalDeviceVulkan13Properties",
  "VkPipelineCreationFeedback": "struct VkPipelineCreationFeedback",
  "VkPipelineCreationFeedbackCreateInfo": "struct VkPipelineCreationFeedbackCreateInfo",
  "VkPhysicalDeviceShaderTerminateInvocationFeatures": "struct VkPhysicalDeviceShaderTerminateInvocationFeatures",
  "VkPhysicalDeviceToolProperties": "struct VkPhysicalDeviceToolProperties",
  "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures": "struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures",
  "VkPhysicalDevicePrivateDataFeatures": "struct VkPhysicalDevicePrivateDataFeatures",
  "VkDevicePrivateDataCreateInfo": "struct VkDevicePrivateDataCreateInfo",
  "VkPrivateDataSlotCreateInfo": "struct VkPrivateDataSlotCreateInfo",
  "VkPhysicalDevicePipelineCreationCacheControlFeatures": "struct VkPhysicalDevicePipelineCreationCacheControlFeatures",
  "VkMemoryBarrier2": "struct VkMemoryBarrier2",
  "VkBufferMemoryBarrier2": "struct VkBufferMemoryBarrier2",
  "VkImageMemoryBarrier2": "struct VkImageMemoryBarrier2",
  "VkDependencyInfo": "struct VkDependencyInfo",
  "VkSemaphoreSubmitInfo": "struct VkSemaphoreSubmitInfo",
  "VkCommandBufferSubmitInfo": "struct VkCommandBufferSubmitInfo",
  "VkSubmitInfo2": "struct VkSubmitInfo2",
  "VkPhysicalDeviceSynchronization2Features": "struct VkPhysicalDeviceSynchronization2Features",
  "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures": "struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures",
  "VkPhysicalDeviceImageRobustnessFeatures": "struct VkPhysicalDeviceImageRobustnessFeatures",
  "VkBufferCopy2": "struct VkBufferCopy2",
  "VkCopyBufferInfo2": "struct VkCopyBufferInfo2",
  "VkImageCopy2": "struct VkImageCopy2",
  "VkCopyImageInfo2": "struct VkCopyImageInfo2",
  "VkBufferImageCopy2": "struct VkBufferImageCopy2",
  "VkCopyBufferToImageInfo2": "struct VkCopyBufferToImageInfo2",
  "VkCopyImageToBufferInfo2": "struct VkCopyImageToBufferInfo2",
  "VkImageBlit2": "struct VkImageBlit2",
  "VkBlitImageInfo2": "struct VkBlitImageInfo2",
  "VkImageResolve2": "struct VkImageResolve2",
  "VkResolveImageInfo2": "struct VkResolveImageInfo2",
  "VkPhysicalDeviceSubgroupSizeControlFeatures": "struct VkPhysicalDeviceSubgroupSizeControlFeatures",
  "VkPhysicalDeviceSubgroupSizeControlProperties": "struct VkPhysicalDeviceSubgroupSizeControlProperties",
  "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo": "struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo",
  "VkPhysicalDeviceInlineUniformBlockFeatures": "struct VkPhysicalDeviceInlineUniformBlockFeatures",
  "VkPhysicalDeviceInlineUniformBlockProperties": "struct VkPhysicalDeviceInlineUniformBlockProperties",
  "VkWriteDescriptorSetInlineUniformBlock": "struct VkWriteDescriptorSetInlineUniformBlock",
  "VkDescriptorPoolInlineUniformBlockCreateInfo": "struct VkDescriptorPoolInlineUniformBlockCreateInfo",
  "VkPhysicalDeviceTextureCompressionASTCHDRFeatures": "struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures",
  "VkRenderingAttachmentInfo": "struct VkRenderingAttachmentInfo",
  "VkRenderingInfo": "struct VkRenderingInfo",
  "VkPipelineRenderingCreateInfo": "struct VkPipelineRenderingCreateInfo",
  "VkPhysicalDeviceDynamicRenderingFeatures": "struct VkPhysicalDeviceDynamicRenderingFeatures",
  "VkCommandBufferInheritanceRenderingInfo": "struct VkCommandBufferInheritanceRenderingInfo",
  "VkPhysicalDeviceShaderIntegerDotProductFeatures": "struct VkPhysicalDeviceShaderIntegerDotProductFeatures",
  "VkPhysicalDeviceShaderIntegerDotProductProperties": "struct VkPhysicalDeviceShaderIntegerDotProductProperties",
  "VkPhysicalDeviceTexelBufferAlignmentProperties": "struct VkPhysicalDeviceTexelBufferAlignmentProperties",
  "VkFormatProperties3": "struct VkFormatProperties3",
  "VkPhysicalDeviceMaintenance4Features": "struct VkPhysicalDeviceMaintenance4Features",
  "VkPhysicalDeviceMaintenance4Properties": "struct VkPhysicalDeviceMaintenance4Properties",
  "VkDeviceBufferMemoryRequirements": "struct VkDeviceBufferMemoryRequirements",
  "VkDeviceImageMemoryRequirements": "struct VkDeviceImageMemoryRequirements",
  "PFN_vkGetPhysicalDeviceToolProperties": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *)",
  "PFN_vkCreatePrivateDataSlot": "VkResult (*)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *)",
  "PFN_vkDestroyPrivateDataSlot": "void (*)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *)",
  "PFN_vkSetPrivateData": "VkResult (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t)",
  "PFN_vkGetPrivateData": "void (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *)",
  "PFN_vkCmdSetEvent2": "void (*)(VkCommandBuffer, VkEvent, const VkDependencyInfo *)",
  "PFN_vkCmdResetEvent2": "void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2)",
  "PFN_vkCmdWaitEvents2": "void (*)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo *)",
  "PFN_vkCmdPipelineBarrier2": "void (*)(VkCommandBuffer, const VkDependencyInfo *)",
  "PFN_vkCmdWriteTimestamp2": "void (*)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t)",
  "PFN_vkQueueSubmit2": "VkResult (*)(VkQueue, uint32_t, const VkSubmitInfo2 *, VkFence)",
  "PFN_vkCmdCopyBuffer2": "void (*)(VkCommandBuffer, const VkCopyBufferInfo2 *)",
  "PFN_vkCmdCopyImage2": "void (*)(VkCommandBuffer, const VkCopyImageInfo2 *)",
  "PFN_vkCmdCopyBufferToImage2": "void (*)(VkCommandBuffer, const VkCopyBufferToImageInfo2 *)",
  "PFN_vkCmdCopyImageToBuffer2": "void (*)(VkCommandBuffer, const VkCopyImageToBufferInfo2 *)",
  "PFN_vkCmdBlitImage2": "void (*)(VkCommandBuffer, const VkBlitImageInfo2 *)",
  "PFN_vkCmdResolveImage2": "void (*)(VkCommandBuffer, const VkResolveImageInfo2 *)",
  "PFN_vkCmdBeginRendering": "void (*)(VkCommandBuffer, const VkRenderingInfo *)",
  "PFN_vkCmdEndRendering": "void (*)(VkCommandBuffer)",
  "PFN_vkCmdSetCullMode": "void (*)(VkCommandBuffer, VkCullModeFlags)",
  "PFN_vkCmdSetFrontFace": "void (*)(VkCommandBuffer, VkFrontFace)",
  "PFN_vkCmdSetPrimitiveTopology": "void (*)(VkCommandBuffer, VkPrimitiveTopology)",
  "PFN_vkCmdSetViewportWithCount": "void (*)(VkCommandBuffer, uint32_t, const VkViewport *)",
  "PFN_vkCmdSetScissorWithCount": "void (*)(VkCommandBuffer, uint32_t, const VkRect2D *)",
  "PFN_vkCmdBindVertexBuffers2": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *)",
  "PFN_vkCmdSetDepthTestEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetDepthWriteEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetDepthCompareOp": "void (*)(VkCommandBuffer, VkCompareOp)",
  "PFN_vkCmdSetDepthBoundsTestEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetStencilTestEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetStencilOp": "void (*)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp)",
  "PFN_vkCmdSetRasterizerDiscardEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetDepthBiasEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetPrimitiveRestartEnable": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkGetDeviceBufferMemoryRequirements": "void (*)(VkDevice, const VkDeviceBufferMemoryRequirements *, VkMemoryRequirements2 *)",
  "PFN_vkGetDeviceImageMemoryRequirements": "void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2 *)",
  "PFN_vkGetDeviceImageSparseMemoryRequirements": "void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *)",
  "VkSurfaceKHR": "struct VkSurfaceKHR_T *",
  "VkPresentModeKHR": "enum VkPresentModeKHR",
  "VkColorSpaceKHR": "enum VkColorSpaceKHR",
  "VkSurfaceTransformFlagBitsKHR": "enum VkSurfaceTransformFlagBitsKHR",
  "VkCompositeAlphaFlagBitsKHR": "enum VkCompositeAlphaFlagBitsKHR",
  "VkCompositeAlphaFlagsKHR": "VkFlags",
  "VkSurfaceTransformFlagsKHR": "VkFlags",
  "VkSurfaceCapabilitiesKHR": "struct VkSurfaceCapabilitiesKHR",
  "VkSurfaceFormatKHR": "struct VkSurfaceFormatKHR",
  "PFN_vkDestroySurfaceKHR": "void (*)(VkInstance, VkSurfaceKHR, const VkAllocationCallbacks *)",
  "PFN_vkGetPhysicalDeviceSurfaceSupportKHR": "VkResult (*)(VkPhysicalDevice, uint32_t, VkSurfaceKHR, VkBool32 *)",
  "PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR": "VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR *)",
  "PFN_vkGetPhysicalDeviceSurfaceFormatsKHR": "VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkSurfaceFormatKHR *)",
  "PFN_vkGetPhysicalDeviceSurfacePresentModesKHR": "VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkPresentModeKHR *)",
  "VkSwapchainKHR": "struct VkSwapchainKHR_T *",
  "VkSwapchainCreateFlagBitsKHR": "enum VkSwapchainCreateFlagBitsKHR",
  "VkSwapchainCreateFlagsKHR": "VkFlags",
  "VkDeviceGroupPresentModeFlagBitsKHR": "enum VkDeviceGroupPresentModeFlagBitsKHR",
  "VkDeviceGroupPresentModeFlagsKHR": "VkFlags",
  "VkSwapchainCreateInfoKHR": "struct VkSwapchainCreateInfoKHR",
  "VkPresentInfoKHR": "struct VkPresentInfoKHR",
  "VkImageSwapchainCreateInfoKHR": "struct VkImageSwapchainCreateInfoKHR",
  "VkBindImageMemorySwapchainInfoKHR": "struct VkBindImageMemorySwapchainInfoKHR",
  "VkAcquireNextImageInfoKHR": "struct VkAcquireNextImageInfoKHR",
  "VkDeviceGroupPresentCapabilitiesKHR": "struct VkDeviceGroupPresentCapabilitiesKHR",
  "VkDeviceGroupPresentInfoKHR": "struct VkDeviceGroupPresentInfoKHR",
  "VkDeviceGroupSwapchainCreateInfoKHR": "struct VkDeviceGroupSwapchainCreateInfoKHR",
  "PFN_vkCreateSwapchainKHR": "VkResult (*)(VkDevice, const VkSwapchainCreateInfoKHR *, const VkAllocationCallbacks *, VkSwapchainKHR *)",
  "PFN_vkDestroySwapchainKHR": "void (*)(VkDevice, VkSwapchainKHR, const VkAllocationCallbacks *)",
  "PFN_vkGetSwapchainImagesKHR": "VkResult (*)(VkDevice, VkSwapchainKHR, uint32_t *, VkImage *)",
  "PFN_vkAcquireNextImageKHR": "VkResult (*)(VkDevice, VkSwapchainKHR, uint64_t, VkSemaphore, VkFence, uint32_t *)",
  "PFN_vkQueuePresentKHR": "VkResult (*)(VkQueue, const VkPresentInfoKHR *)",
  "PFN_vkGetDeviceGroupPresentCapabilitiesKHR": "VkResult (*)(VkDevice, VkDeviceGroupPresentCapabilitiesKHR *)",
  "PFN_vkGetDeviceGroupSurfacePresentModesKHR": "VkResult (*)(VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR *)",
  "PFN_vkGetPhysicalDevicePresentRectanglesKHR": "VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, uint32_t *, VkRect2D *)",
  "PFN_vkAcquireNextImage2KHR": "VkResult (*)(VkDevice, const VkAcquireNextImageInfoKHR *, uint32_t *)",
  "VkDisplayKHR": "struct VkDisplayKHR_T *",
  "VkDisplayModeKHR": "struct VkDisplayModeKHR_T *",
  "VkDisplayModeCreateFlagsKHR": "VkFlags",
  "VkDisplayPlaneAlphaFlagBitsKHR": "enum VkDisplayPlaneAlphaFlagBitsKHR",
  "VkDisplayPlaneAlphaFlagsKHR": "VkFlags",
  "VkDisplaySurfaceCreateFlagsKHR": "VkFlags",
  "VkDisplayModeParametersKHR": "struct VkDisplayModeParametersKHR",
  "VkDisplayModeCreateInfoKHR": "struct VkDisplayModeCreateInfoKHR",
  "VkDisplayModePropertiesKHR": "struct VkDisplayModePropertiesKHR",
  "VkDisplayPlaneCapabilitiesKHR": "struct VkDisplayPlaneCapabilitiesKHR",
  "VkDisplayPlanePropertiesKHR": "struct VkDisplayPlanePropertiesKHR",
  "VkDisplayPropertiesKHR": "struct VkDisplayPropertiesKHR",
  "VkDisplaySurfaceCreateInfoKHR": "struct VkDisplaySurfaceCreateInfoKHR",
  "PFN_vkGetPhysicalDeviceDisplayPropertiesKHR": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayPropertiesKHR *)",
  "PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayPlanePropertiesKHR *)",
  "PFN_vkGetDisplayPlaneSupportedDisplaysKHR": "VkResult (*)(VkPhysicalDevice, uint32_t, uint32_t *, VkDisplayKHR *)",
  "PFN_vkGetDisplayModePropertiesKHR": "VkResult (*)(VkPhysicalDevice, VkDisplayKHR, uint32_t *, VkDisplayModePropertiesKHR *)",
  "PFN_vkCreateDisplayModeKHR": "VkResult (*)(VkPhysicalDevice, VkDisplayKHR, const VkDisplayModeCreateInfoKHR *, const VkAllocationCallbacks *, VkDisplayModeKHR *)",
  "PFN_vkGetDisplayPlaneCapabilitiesKHR": "VkResult (*)(VkPhysicalDevice, VkDisplayModeKHR, uint32_t, VkDisplayPlaneCapabilitiesKHR *)",
  "PFN_vkCreateDisplayPlaneSurfaceKHR": "VkResult (*)(VkInstance, const VkDisplaySurfaceCreateInfoKHR *, const VkAllocationCallbacks *, VkSurfaceKHR *)",
  "VkDisplayPresentInfoKHR": "struct VkDisplayPresentInfoKHR",
  "PFN_vkCreateSharedSwapchainsKHR": "VkResult (*)(VkDevice, uint32_t, const VkSwapchainCreateInfoKHR *, const VkAllocationCallbacks *, VkSwapchainKHR *)",
  "VkRenderingFlagsKHR": "VkRenderingFlags",
  "VkRenderingFlagBitsKHR": "VkRenderingFlagBits",
  "VkRenderingInfoKHR": "VkRenderingInfo",
  "VkRenderingAttachmentInfoKHR": "VkRenderingAttachmentInfo",
  "VkPipelineRenderingCreateInfoKHR": "VkPipelineRenderingCreateInfo",
  "VkPhysicalDeviceDynamicRenderingFeaturesKHR": "VkPhysicalDeviceDynamicRenderingFeatures",
  "VkCommandBufferInheritanceRenderingInfoKHR": "VkCommandBufferInheritanceRenderingInfo",
  "VkRenderingFragmentShadingRateAttachmentInfoKHR": "struct VkRenderingFragmentShadingRateAttachmentInfoKHR",
  "VkRenderingFragmentDensityMapAttachmentInfoEXT": "struct VkRenderingFragmentDensityMapAttachmentInfoEXT",
  "VkAttachmentSampleCountInfoAMD": "struct VkAttachmentSampleCountInfoAMD",
  "VkAttachmentSampleCountInfoNV": "VkAttachmentSampleCountInfoAMD",
  "VkMultiviewPerViewAttributesInfoNVX": "struct VkMultiviewPerViewAttributesInfoNVX",
  "PFN_vkCmdBeginRenderingKHR": "void (*)(VkCommandBuffer, const VkRenderingInfo *)",
  "PFN_vkCmdEndRenderingKHR": "void (*)(VkCommandBuffer)",
  "VkRenderPassMultiviewCreateInfoKHR": "VkRenderPassMultiviewCreateInfo",
  "VkPhysicalDeviceMultiviewFeaturesKHR": "VkPhysicalDeviceMultiviewFeatures",
  "VkPhysicalDeviceMultiviewPropertiesKHR": "VkPhysicalDeviceMultiviewProperties",
  "VkPhysicalDeviceFeatures2KHR": "VkPhysicalDeviceFeatures2",
  "VkPhysicalDeviceProperties2KHR": "VkPhysicalDeviceProperties2",
  "VkFormatProperties2KHR": "VkFormatProperties2",
  "VkImageFormatProperties2KHR": "VkImageFormatProperties2",
  "VkPhysicalDeviceImageFormatInfo2KHR": "VkPhysicalDeviceImageFormatInfo2",
  "VkQueueFamilyProperties2KHR": "VkQueueFamilyProperties2",
  "VkPhysicalDeviceMemoryProperties2KHR": "VkPhysicalDeviceMemoryProperties2",
  "VkSparseImageFormatProperties2KHR": "VkSparseImageFormatProperties2",
  "VkPhysicalDeviceSparseImageFormatInfo2KHR": "VkPhysicalDeviceSparseImageFormatInfo2",
  "PFN_vkGetPhysicalDeviceFeatures2KHR": "void (*)(VkPhysicalDevice, VkPhysicalDeviceFeatures2 *)",
  "PFN_vkGetPhysicalDeviceProperties2KHR": "void (*)(VkPhysicalDevice, VkPhysicalDeviceProperties2 *)",
  "PFN_vkGetPhysicalDeviceFormatProperties2KHR": "void (*)(VkPhysicalDevice, VkFormat, VkFormatProperties2 *)",
  "PFN_vkGetPhysicalDeviceImageFormatProperties2KHR": "VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceImageFormatInfo2 *, VkImageFormatProperties2 *)",
  "PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR": "void (*)(VkPhysicalDevice, uint32_t *, VkQueueFamilyProperties2 *)",
  "PFN_vkGetPhysicalDeviceMemoryProperties2KHR": "void (*)(VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2 *)",
  "PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *, uint32_t *, VkSparseImageFormatProperties2 *)",
  "VkPeerMemoryFeatureFlagsKHR": "VkPeerMemoryFeatureFlags",
  "VkPeerMemoryFeatureFlagBitsKHR": "VkPeerMemoryFeatureFlagBits",
  "VkMemoryAllocateFlagsKHR": "VkMemoryAllocateFlags",
  "VkMemoryAllocateFlagBitsKHR": "VkMemoryAllocateFlagBits",
  "VkMemoryAllocateFlagsInfoKHR": "VkMemoryAllocateFlagsInfo",
  "VkDeviceGroupRenderPassBeginInfoKHR": "VkDeviceGroupRenderPassBeginInfo",
  "VkDeviceGroupCommandBufferBeginInfoKHR": "VkDeviceGroupCommandBufferBeginInfo",
  "VkDeviceGroupSubmitInfoKHR": "VkDeviceGroupSubmitInfo",
  "VkDeviceGroupBindSparseInfoKHR": "VkDeviceGroupBindSparseInfo",
  "VkBindBufferMemoryDeviceGroupInfoKHR": "VkBindBufferMemoryDeviceGroupInfo",
  "VkBindImageMemoryDeviceGroupInfoKHR": "VkBindImageMemoryDeviceGroupInfo",
  "PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR": "void (*)(VkDevice, uint32_t, uint32_t, uint32_t, VkPeerMemoryFeatureFlags *)",
  "PFN_vkCmdSetDeviceMaskKHR": "void (*)(VkCommandBuffer, uint32_t)",
  "PFN_vkCmdDispatchBaseKHR": "void (*)(VkCommandBuffer, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)",
  "VkCommandPoolTrimFlagsKHR": "VkCommandPoolTrimFlags",
  "PFN_vkTrimCommandPoolKHR": "void (*)(VkDevice, VkCommandPool, VkCommandPoolTrimFlags)",
  "VkPhysicalDeviceGroupPropertiesKHR": "VkPhysicalDeviceGroupProperties",
  "VkDeviceGroupDeviceCreateInfoKHR": "VkDeviceGroupDeviceCreateInfo",
  "PFN_vkEnumeratePhysicalDeviceGroupsKHR": "VkResult (*)(VkInstance, uint32_t *, VkPhysicalDeviceGroupProperties *)",
  "VkExternalMemoryHandleTypeFlagsKHR": "VkExternalMemoryHandleTypeFlags",
  "VkExternalMemoryHandleTypeFlagBitsKHR": "VkExternalMemoryHandleTypeFlagBits",
  "VkExternalMemoryFeatureFlagsKHR": "VkExternalMemoryFeatureFlags",
  "VkExternalMemoryFeatureFlagBitsKHR": "VkExternalMemoryFeatureFlagBits",
  "VkExternalMemoryPropertiesKHR": "VkExternalMemoryProperties",
  "VkPhysicalDeviceExternalImageFormatInfoKHR": "VkPhysicalDeviceExternalImageFormatInfo",
  "VkExternalImageFormatPropertiesKHR": "VkExternalImageFormatProperties",
  "VkPhysicalDeviceExternalBufferInfoKHR": "VkPhysicalDeviceExternalBufferInfo",
  "VkExternalBufferPropertiesKHR": "VkExternalBufferProperties",
  "VkPhysicalDeviceIDPropertiesKHR": "VkPhysicalDeviceIDProperties",
  "PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalBufferInfo *, VkExternalBufferProperties *)",
  "VkExternalMemoryImageCreateInfoKHR": "VkExternalMemoryImageCreateInfo",
  "VkExternalMemoryBufferCreateInfoKHR": "VkExternalMemoryBufferCreateInfo",
  "VkExportMemoryAllocateInfoKHR": "VkExportMemoryAllocateInfo",
  "VkImportMemoryFdInfoKHR": "struct VkImportMemoryFdInfoKHR",
  "VkMemoryFdPropertiesKHR": "struct VkMemoryFdPropertiesKHR",
  "VkMemoryGetFdInfoKHR": "struct VkMemoryGetFdInfoKHR",
  "PFN_vkGetMemoryFdKHR": "VkResult (*)(VkDevice, const VkMemoryGetFdInfoKHR *, int *)",
  "PFN_vkGetMemoryFdPropertiesKHR": "VkResult (*)(VkDevice, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR *)",
  "VkExternalSemaphoreHandleTypeFlagsKHR": "VkExternalSemaphoreHandleTypeFlags",
  "VkExternalSemaphoreHandleTypeFlagBitsKHR": "VkExternalSemaphoreHandleTypeFlagBits",
  "VkExternalSemaphoreFeatureFlagsKHR": "VkExternalSemaphoreFeatureFlags",
  "VkExternalSemaphoreFeatureFlagBitsKHR": "VkExternalSemaphoreFeatureFlagBits",
  "VkPhysicalDeviceExternalSemaphoreInfoKHR": "VkPhysicalDeviceExternalSemaphoreInfo",
  "VkExternalSemaphorePropertiesKHR": "VkExternalSemaphoreProperties",
  "PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *, VkExternalSemaphoreProperties *)",
  "VkSemaphoreImportFlagsKHR": "VkSemaphoreImportFlags",
  "VkSemaphoreImportFlagBitsKHR": "VkSemaphoreImportFlagBits",
  "VkExportSemaphoreCreateInfoKHR": "VkExportSemaphoreCreateInfo",
  "VkImportSemaphoreFdInfoKHR": "struct VkImportSemaphoreFdInfoKHR",
  "VkSemaphoreGetFdInfoKHR": "struct VkSemaphoreGetFdInfoKHR",
  "PFN_vkImportSemaphoreFdKHR": "VkResult (*)(VkDevice, const VkImportSemaphoreFdInfoKHR *)",
  "PFN_vkGetSemaphoreFdKHR": "VkResult (*)(VkDevice, const VkSemaphoreGetFdInfoKHR *, int *)",
  "VkPhysicalDevicePushDescriptorPropertiesKHR": "struct VkPhysicalDevicePushDescriptorPropertiesKHR",
  "PFN_vkCmdPushDescriptorSetKHR": "void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint32_t, uint32_t, const VkWriteDescriptorSet *)",
  "PFN_vkCmdPushDescriptorSetWithTemplateKHR": "void (*)(VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint32_t, const void *)",
  "VkPhysicalDeviceShaderFloat16Int8FeaturesKHR": "VkPhysicalDeviceShaderFloat16Int8Features",
  "VkPhysicalDeviceFloat16Int8FeaturesKHR": "VkPhysicalDeviceShaderFloat16Int8Features",
  "VkPhysicalDevice16BitStorageFeaturesKHR": "VkPhysicalDevice16BitStorageFeatures",
  "VkRectLayerKHR": "struct VkRectLayerKHR",
  "VkPresentRegionKHR": "struct VkPresentRegionKHR",
  "VkPresentRegionsKHR": "struct VkPresentRegionsKHR",
  "VkDescriptorUpdateTemplateKHR": "VkDescriptorUpdateTemplate",
  "VkDescriptorUpdateTemplateTypeKHR": "VkDescriptorUpdateTemplateType",
  "VkDescriptorUpdateTemplateCreateFlagsKHR": "VkDescriptorUpdateTemplateCreateFlags",
  "VkDescriptorUpdateTemplateEntryKHR": "VkDescriptorUpdateTemplateEntry",
  "VkDescriptorUpdateTemplateCreateInfoKHR": "VkDescriptorUpdateTemplateCreateInfo",
  "PFN_vkCreateDescriptorUpdateTemplateKHR": "VkResult (*)(VkDevice, const VkDescriptorUpdateTemplateCreateInfo *, const VkAllocationCallbacks *, VkDescriptorUpdateTemplate *)",
  "PFN_vkDestroyDescriptorUpdateTemplateKHR": "void (*)(VkDevice, VkDescriptorUpdateTemplate, const VkAllocationCallbacks *)",
  "PFN_vkUpdateDescriptorSetWithTemplateKHR": "void (*)(VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, const void *)",
  "VkPhysicalDeviceImagelessFramebufferFeaturesKHR": "VkPhysicalDeviceImagelessFramebufferFeatures",
  "VkFramebufferAttachmentsCreateInfoKHR": "VkFramebufferAttachmentsCreateInfo",
  "VkFramebufferAttachmentImageInfoKHR": "VkFramebufferAttachmentImageInfo",
  "VkRenderPassAttachmentBeginInfoKHR": "VkRenderPassAttachmentBeginInfo",
  "VkRenderPassCreateInfo2KHR": "VkRenderPassCreateInfo2",
  "VkAttachmentDescription2KHR": "VkAttachmentDescription2",
  "VkAttachmentReference2KHR": "VkAttachmentReference2",
  "VkSubpassDescription2KHR": "VkSubpassDescription2",
  "VkSubpassDependency2KHR": "VkSubpassDependency2",
  "VkSubpassBeginInfoKHR": "VkSubpassBeginInfo",
  "VkSubpassEndInfoKHR": "VkSubpassEndInfo",
  "PFN_vkCreateRenderPass2KHR": "VkResult (*)(VkDevice, const VkRenderPassCreateInfo2 *, const VkAllocationCallbacks *, VkRenderPass *)",
  "PFN_vkCmdBeginRenderPass2KHR": "void (*)(VkCommandBuffer, const VkRenderPassBeginInfo *, const VkSubpassBeginInfo *)",
  "PFN_vkCmdNextSubpass2KHR": "void (*)(VkCommandBuffer, const VkSubpassBeginInfo *, const VkSubpassEndInfo *)",
  "PFN_vkCmdEndRenderPass2KHR": "void (*)(VkCommandBuffer, const VkSubpassEndInfo *)",
  "VkSharedPresentSurfaceCapabilitiesKHR": "struct VkSharedPresentSurfaceCapabilitiesKHR",
  "PFN_vkGetSwapchainStatusKHR": "VkResult (*)(VkDevice, VkSwapchainKHR)",
  "VkExternalFenceHandleTypeFlagsKHR": "VkExternalFenceHandleTypeFlags",
  "VkExternalFenceHandleTypeFlagBitsKHR": "VkExternalFenceHandleTypeFlagBits",
  "VkExternalFenceFeatureFlagsKHR": "VkExternalFenceFeatureFlags",
  "VkExternalFenceFeatureFlagBitsKHR": "VkExternalFenceFeatureFlagBits",
  "VkPhysicalDeviceExternalFenceInfoKHR": "VkPhysicalDeviceExternalFenceInfo",
  "VkExternalFencePropertiesKHR": "VkExternalFenceProperties",
  "PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR": "void (*)(VkPhysicalDevice, const VkPhysicalDeviceExternalFenceInfo *, VkExternalFenceProperties *)",
  "VkFenceImportFlagsKHR": "VkFenceImportFlags",
  "VkFenceImportFlagBitsKHR": "VkFenceImportFlagBits",
  "VkExportFenceCreateInfoKHR": "VkExportFenceCreateInfo",
  "VkImportFenceFdInfoKHR": "struct VkImportFenceFdInfoKHR",
  "VkFenceGetFdInfoKHR": "struct VkFenceGetFdInfoKHR",
  "PFN_vkImportFenceFdKHR": "VkResult (*)(VkDevice, const VkImportFenceFdInfoKHR *)",
  "PFN_vkGetFenceFdKHR": "VkResult (*)(VkDevice, const VkFenceGetFdInfoKHR *, int *)",
  "VkPerformanceCounterUnitKHR": "enum VkPerformanceCounterUnitKHR",
  "VkPerformanceCounterScopeKHR": "enum VkPerformanceCounterScopeKHR",
  "VkPerformanceCounterStorageKHR": "enum VkPerformanceCounterStorageKHR",
  "VkPerformanceCounterDescriptionFlagBitsKHR": "enum VkPerformanceCounterDescriptionFlagBitsKHR",
  "VkPerformanceCounterDescriptionFlagsKHR": "VkFlags",
  "VkAcquireProfilingLockFlagBitsKHR": "enum VkAcquireProfilingLockFlagBitsKHR",
  "VkAcquireProfilingLockFlagsKHR": "VkFlags",
  "VkPhysicalDevicePerformanceQueryFeaturesKHR": "struct VkPhysicalDevicePerformanceQueryFeaturesKHR",
  "VkPhysicalDevicePerformanceQueryPropertiesKHR": "struct VkPhysicalDevicePerformanceQueryPropertiesKHR",
  "VkPerformanceCounterKHR": "struct VkPerformanceCounterKHR",
  "VkPerformanceCounterDescriptionKHR": "struct VkPerformanceCounterDescriptionKHR",
  "VkQueryPoolPerformanceCreateInfoKHR": "struct VkQueryPoolPerformanceCreateInfoKHR",
  "VkPerformanceCounterResultKHR": "union VkPerformanceCounterResultKHR",
  "VkAcquireProfilingLockInfoKHR": "struct VkAcquireProfilingLockInfoKHR",
  "VkPerformanceQuerySubmitInfoKHR": "struct VkPerformanceQuerySubmitInfoKHR",
  "PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR": "VkResult (*)(VkPhysicalDevice, uint32_t, uint32_t *, VkPerformanceCounterKHR *, VkPerformanceCounterDescriptionKHR *)",
  "PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR": "void (*)(VkPhysicalDevice, const VkQueryPoolPerformanceCreateInfoKHR *, uint32_t *)",
  "PFN_vkAcquireProfilingLockKHR": "VkResult (*)(VkDevice, const VkAcquireProfilingLockInfoKHR *)",
  "PFN_vkReleaseProfilingLockKHR": "void (*)(VkDevice)",
  "VkPointClippingBehaviorKHR": "VkPointClippingBehavior",
  "VkTessellationDomainOriginKHR": "VkTessellationDomainOrigin",
  "VkPhysicalDevicePointClippingPropertiesKHR": "VkPhysicalDevicePointClippingProperties",
  "VkRenderPassInputAttachmentAspectCreateInfoKHR": "VkRenderPassInputAttachmentAspectCreateInfo",
  "VkInputAttachmentAspectReferenceKHR": "VkInputAttachmentAspectReference",
  "VkImageViewUsageCreateInfoKHR": "VkImageViewUsageCreateInfo",
  "VkPipelineTessellationDomainOriginStateCreateInfoKHR": "VkPipelineTessellationDomainOriginStateCreateInfo",
  "VkPhysicalDeviceSurfaceInfo2KHR": "struct VkPhysicalDeviceSurfaceInfo2KHR",
  "VkSurfaceCapabilities2KHR": "struct VkSurfaceCapabilities2KHR",
  "VkSurfaceFormat2KHR": "struct VkSurfaceFormat2KHR",
  "PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR": "VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *, VkSurfaceCapabilities2KHR *)",
  "PFN_vkGetPhysicalDeviceSurfaceFormats2KHR": "VkResult (*)(VkPhysicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *, uint32_t *, VkSurfaceFormat2KHR *)",
  "VkPhysicalDeviceVariablePointerFeaturesKHR": "VkPhysicalDeviceVariablePointersFeatures",
  "VkPhysicalDeviceVariablePointersFeaturesKHR": "VkPhysicalDeviceVariablePointersFeatures",
  "VkDisplayProperties2KHR": "struct VkDisplayProperties2KHR",
  "VkDisplayPlaneProperties2KHR": "struct VkDisplayPlaneProperties2KHR",
  "VkDisplayModeProperties2KHR": "struct VkDisplayModeProperties2KHR",
  "VkDisplayPlaneInfo2KHR": "struct VkDisplayPlaneInfo2KHR",
  "VkDisplayPlaneCapabilities2KHR": "struct VkDisplayPlaneCapabilities2KHR",
  "PFN_vkGetPhysicalDeviceDisplayProperties2KHR": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayProperties2KHR *)",
  "PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkDisplayPlaneProperties2KHR *)",
  "PFN_vkGetDisplayModeProperties2KHR": "VkResult (*)(VkPhysicalDevice, VkDisplayKHR, uint32_t *, VkDisplayModeProperties2KHR *)",
  "PFN_vkGetDisplayPlaneCapabilities2KHR": "VkResult (*)(VkPhysicalDevice, const VkDisplayPlaneInfo2KHR *, VkDisplayPlaneCapabilities2KHR *)",
  "VkMemoryDedicatedRequirementsKHR": "VkMemoryDedicatedRequirements",
  "VkMemoryDedicatedAllocateInfoKHR": "VkMemoryDedicatedAllocateInfo",
  "VkBufferMemoryRequirementsInfo2KHR": "VkBufferMemoryRequirementsInfo2",
  "VkImageMemoryRequirementsInfo2KHR": "VkImageMemoryRequirementsInfo2",
  "VkImageSparseMemoryRequirementsInfo2KHR": "VkImageSparseMemoryRequirementsInfo2",
  "VkMemoryRequirements2KHR": "VkMemoryRequirements2",
  "VkSparseImageMemoryRequirements2KHR": "VkSparseImageMemoryRequirements2",
  "PFN_vkGetImageMemoryRequirements2KHR": "void (*)(VkDevice, const VkImageMemoryRequirementsInfo2 *, VkMemoryRequirements2 *)",
  "PFN_vkGetBufferMemoryRequirements2KHR": "void (*)(VkDevice, const VkBufferMemoryRequirementsInfo2 *, VkMemoryRequirements2 *)",
  "PFN_vkGetImageSparseMemoryRequirements2KHR": "void (*)(VkDevice, const VkImageSparseMemoryRequirementsInfo2 *, uint32_t *, VkSparseImageMemoryRequirements2 *)",
  "VkImageFormatListCreateInfoKHR": "VkImageFormatListCreateInfo",
  "VkSamplerYcbcrConversionKHR": "VkSamplerYcbcrConversion",
  "VkSamplerYcbcrModelConversionKHR": "VkSamplerYcbcrModelConversion",
  "VkSamplerYcbcrRangeKHR": "VkSamplerYcbcrRange",
  "VkChromaLocationKHR": "VkChromaLocation",
  "VkSamplerYcbcrConversionCreateInfoKHR": "VkSamplerYcbcrConversionCreateInfo",
  "VkSamplerYcbcrConversionInfoKHR": "VkSamplerYcbcrConversionInfo",
  "VkBindImagePlaneMemoryInfoKHR": "VkBindImagePlaneMemoryInfo",
  "VkImagePlaneMemoryRequirementsInfoKHR": "VkImagePlaneMemoryRequirementsInfo",
  "VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR": "VkPhysicalDeviceSamplerYcbcrConversionFeatures",
  "VkSamplerYcbcrConversionImageFormatPropertiesKHR": "VkSamplerYcbcrConversionImageFormatProperties",
  "PFN_vkCreateSamplerYcbcrConversionKHR": "VkResult (*)(VkDevice, const VkSamplerYcbcrConversionCreateInfo *, const VkAllocationCallbacks *, VkSamplerYcbcrConversion *)",
  "PFN_vkDestroySamplerYcbcrConversionKHR": "void (*)(VkDevice, VkSamplerYcbcrConversion, const VkAllocationCallbacks *)",
  "VkBindBufferMemoryInfoKHR": "VkBindBufferMemoryInfo",
  "VkBindImageMemoryInfoKHR": "VkBindImageMemoryInfo",
  "PFN_vkBindBufferMemory2KHR": "VkResult (*)(VkDevice, uint32_t, const VkBindBufferMemoryInfo *)",
  "PFN_vkBindImageMemory2KHR": "VkResult (*)(VkDevice, uint32_t, const VkBindImageMemoryInfo *)",
  "VkPhysicalDeviceMaintenance3PropertiesKHR": "VkPhysicalDeviceMaintenance3Properties",
  "VkDescriptorSetLayoutSupportKHR": "VkDescriptorSetLayoutSupport",
  "PFN_vkGetDescriptorSetLayoutSupportKHR": "void (*)(VkDevice, const VkDescriptorSetLayoutCreateInfo *, VkDescriptorSetLayoutSupport *)",
  "PFN_vkCmdDrawIndirectCountKHR": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCmdDrawIndexedIndirectCountKHR": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR": "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures",
  "VkPhysicalDevice8BitStorageFeaturesKHR": "VkPhysicalDevice8BitStorageFeatures",
  "VkPhysicalDeviceShaderAtomicInt64FeaturesKHR": "VkPhysicalDeviceShaderAtomicInt64Features",
  "VkPhysicalDeviceShaderClockFeaturesKHR": "struct VkPhysicalDeviceShaderClockFeaturesKHR",
  "VkQueueGlobalPriorityKHR": "enum VkQueueGlobalPriorityKHR",
  "VkDeviceQueueGlobalPriorityCreateInfoKHR": "struct VkDeviceQueueGlobalPriorityCreateInfoKHR",
  "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR": "struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR",
  "VkQueueFamilyGlobalPriorityPropertiesKHR": "struct VkQueueFamilyGlobalPriorityPropertiesKHR",
  "VkDriverIdKHR": "VkDriverId",
  "VkConformanceVersionKHR": "VkConformanceVersion",
  "VkPhysicalDeviceDriverPropertiesKHR": "VkPhysicalDeviceDriverProperties",
  "VkShaderFloatControlsIndependenceKHR": "VkShaderFloatControlsIndependence",
  "VkPhysicalDeviceFloatControlsPropertiesKHR": "VkPhysicalDeviceFloatControlsProperties",
  "VkResolveModeFlagBitsKHR": "VkResolveModeFlagBits",
  "VkResolveModeFlagsKHR": "VkResolveModeFlags",
  "VkSubpassDescriptionDepthStencilResolveKHR": "VkSubpassDescriptionDepthStencilResolve",
  "VkPhysicalDeviceDepthStencilResolvePropertiesKHR": "VkPhysicalDeviceDepthStencilResolveProperties",
  "VkSemaphoreTypeKHR": "VkSemaphoreType",
  "VkSemaphoreWaitFlagBitsKHR": "VkSemaphoreWaitFlagBits",
  "VkSemaphoreWaitFlagsKHR": "VkSemaphoreWaitFlags",
  "VkPhysicalDeviceTimelineSemaphoreFeaturesKHR": "VkPhysicalDeviceTimelineSemaphoreFeatures",
  "VkPhysicalDeviceTimelineSemaphorePropertiesKHR": "VkPhysicalDeviceTimelineSemaphoreProperties",
  "VkSemaphoreTypeCreateInfoKHR": "VkSemaphoreTypeCreateInfo",
  "VkTimelineSemaphoreSubmitInfoKHR": "VkTimelineSemaphoreSubmitInfo",
  "VkSemaphoreWaitInfoKHR": "VkSemaphoreWaitInfo",
  "VkSemaphoreSignalInfoKHR": "VkSemaphoreSignalInfo",
  "PFN_vkGetSemaphoreCounterValueKHR": "VkResult (*)(VkDevice, VkSemaphore, uint64_t *)",
  "PFN_vkWaitSemaphoresKHR": "VkResult (*)(VkDevice, const VkSemaphoreWaitInfo *, uint64_t)",
  "PFN_vkSignalSemaphoreKHR": "VkResult (*)(VkDevice, const VkSemaphoreSignalInfo *)",
  "VkPhysicalDeviceVulkanMemoryModelFeaturesKHR": "VkPhysicalDeviceVulkanMemoryModelFeatures",
  "VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR": "VkPhysicalDeviceShaderTerminateInvocationFeatures",
  "VkFragmentShadingRateCombinerOpKHR": "enum VkFragmentShadingRateCombinerOpKHR",
  "VkFragmentShadingRateAttachmentInfoKHR": "struct VkFragmentShadingRateAttachmentInfoKHR",
  "VkPipelineFragmentShadingRateStateCreateInfoKHR": "struct VkPipelineFragmentShadingRateStateCreateInfoKHR",
  "VkPhysicalDeviceFragmentShadingRateFeaturesKHR": "struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR",
  "VkPhysicalDeviceFragmentShadingRatePropertiesKHR": "struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR",
  "VkPhysicalDeviceFragmentShadingRateKHR": "struct VkPhysicalDeviceFragmentShadingRateKHR",
  "PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceFragmentShadingRateKHR *)",
  "PFN_vkCmdSetFragmentShadingRateKHR": "void (*)(VkCommandBuffer, const VkExtent2D *, const VkFragmentShadingRateCombinerOpKHR *)",
  "VkSurfaceProtectedCapabilitiesKHR": "struct VkSurfaceProtectedCapabilitiesKHR",
  "VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR": "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures",
  "VkAttachmentReferenceStencilLayoutKHR": "VkAttachmentReferenceStencilLayout",
  "VkAttachmentDescriptionStencilLayoutKHR": "VkAttachmentDescriptionStencilLayout",
  "VkPhysicalDevicePresentWaitFeaturesKHR": "struct VkPhysicalDevicePresentWaitFeaturesKHR",
  "PFN_vkWaitForPresentKHR": "VkResult (*)(VkDevice, VkSwapchainKHR, uint64_t, uint64_t)",
  "VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR": "VkPhysicalDeviceUniformBufferStandardLayoutFeatures",
  "VkPhysicalDeviceBufferDeviceAddressFeaturesKHR": "VkPhysicalDeviceBufferDeviceAddressFeatures",
  "VkBufferDeviceAddressInfoKHR": "VkBufferDeviceAddressInfo",
  "VkBufferOpaqueCaptureAddressCreateInfoKHR": "VkBufferOpaqueCaptureAddressCreateInfo",
  "VkMemoryOpaqueCaptureAddressAllocateInfoKHR": "VkMemoryOpaqueCaptureAddressAllocateInfo",
  "VkDeviceMemoryOpaqueCaptureAddressInfoKHR": "VkDeviceMemoryOpaqueCaptureAddressInfo",
  "PFN_vkGetBufferDeviceAddressKHR": "VkDeviceAddress (*)(VkDevice, const VkBufferDeviceAddressInfo *)",
  "PFN_vkGetBufferOpaqueCaptureAddressKHR": "uint64_t (*)(VkDevice, const VkBufferDeviceAddressInfo *)",
  "PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR": "uint64_t (*)(VkDevice, const VkDeviceMemoryOpaqueCaptureAddressInfo *)",
  "VkDeferredOperationKHR": "struct VkDeferredOperationKHR_T *",
  "PFN_vkCreateDeferredOperationKHR": "VkResult (*)(VkDevice, const VkAllocationCallbacks *, VkDeferredOperationKHR *)",
  "PFN_vkDestroyDeferredOperationKHR": "void (*)(VkDevice, VkDeferredOperationKHR, const VkAllocationCallbacks *)",
  "PFN_vkGetDeferredOperationMaxConcurrencyKHR": "uint32_t (*)(VkDevice, VkDeferredOperationKHR)",
  "PFN_vkGetDeferredOperationResultKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR)",
  "PFN_vkDeferredOperationJoinKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR)",
  "VkPipelineExecutableStatisticFormatKHR": "enum VkPipelineExecutableStatisticFormatKHR",
  "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR": "struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR",
  "VkPipelineInfoKHR": "struct VkPipelineInfoKHR",
  "VkPipelineExecutablePropertiesKHR": "struct VkPipelineExecutablePropertiesKHR",
  "VkPipelineExecutableInfoKHR": "struct VkPipelineExecutableInfoKHR",
  "VkPipelineExecutableStatisticValueKHR": "union VkPipelineExecutableStatisticValueKHR",
  "VkPipelineExecutableStatisticKHR": "struct VkPipelineExecutableStatisticKHR",
  "VkPipelineExecutableInternalRepresentationKHR": "struct VkPipelineExecutableInternalRepresentationKHR",
  "PFN_vkGetPipelineExecutablePropertiesKHR": "VkResult (*)(VkDevice, const VkPipelineInfoKHR *, uint32_t *, VkPipelineExecutablePropertiesKHR *)",
  "PFN_vkGetPipelineExecutableStatisticsKHR": "VkResult (*)(VkDevice, const VkPipelineExecutableInfoKHR *, uint32_t *, VkPipelineExecutableStatisticKHR *)",
  "PFN_vkGetPipelineExecutableInternalRepresentationsKHR": "VkResult (*)(VkDevice, const VkPipelineExecutableInfoKHR *, uint32_t *, VkPipelineExecutableInternalRepresentationKHR *)",
  "VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR": "VkPhysicalDeviceShaderIntegerDotProductFeatures",
  "VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR": "VkPhysicalDeviceShaderIntegerDotProductProperties",
  "VkPipelineLibraryCreateInfoKHR": "struct VkPipelineLibraryCreateInfoKHR",
  "VkPresentIdKHR": "struct VkPresentIdKHR",
  "VkPhysicalDevicePresentIdFeaturesKHR": "struct VkPhysicalDevicePresentIdFeaturesKHR",
  "VkPipelineStageFlags2KHR": "VkPipelineStageFlags2",
  "VkPipelineStageFlagBits2KHR": "VkPipelineStageFlagBits2",
  "VkAccessFlags2KHR": "VkAccessFlags2",
  "VkAccessFlagBits2KHR": "VkAccessFlagBits2",
  "VkSubmitFlagBitsKHR": "VkSubmitFlagBits",
  "VkSubmitFlagsKHR": "VkSubmitFlags",
  "VkMemoryBarrier2KHR": "VkMemoryBarrier2",
  "VkBufferMemoryBarrier2KHR": "VkBufferMemoryBarrier2",
  "VkImageMemoryBarrier2KHR": "VkImageMemoryBarrier2",
  "VkDependencyInfoKHR": "VkDependencyInfo",
  "VkSubmitInfo2KHR": "VkSubmitInfo2",
  "VkSemaphoreSubmitInfoKHR": "VkSemaphoreSubmitInfo",
  "VkCommandBufferSubmitInfoKHR": "VkCommandBufferSubmitInfo",
  "VkPhysicalDeviceSynchronization2FeaturesKHR": "VkPhysicalDeviceSynchronization2Features",
  "VkQueueFamilyCheckpointProperties2NV": "struct VkQueueFamilyCheckpointProperties2NV",
  "VkCheckpointData2NV": "struct VkCheckpointData2NV",
  "PFN_vkCmdSetEvent2KHR": "void (*)(VkCommandBuffer, VkEvent, const VkDependencyInfo *)",
  "PFN_vkCmdResetEvent2KHR": "void (*)(VkCommandBuffer, VkEvent, VkPipelineStageFlags2)",
  "PFN_vkCmdWaitEvents2KHR": "void (*)(VkCommandBuffer, uint32_t, const VkEvent *, const VkDependencyInfo *)",
  "PFN_vkCmdPipelineBarrier2KHR": "void (*)(VkCommandBuffer, const VkDependencyInfo *)",
  "PFN_vkCmdWriteTimestamp2KHR": "void (*)(VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint32_t)",
  "PFN_vkQueueSubmit2KHR": "VkResult (*)(VkQueue, uint32_t, const VkSubmitInfo2 *, VkFence)",
  "PFN_vkCmdWriteBufferMarker2AMD": "void (*)(VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint32_t)",
  "PFN_vkGetQueueCheckpointData2NV": "void (*)(VkQueue, uint32_t *, VkCheckpointData2NV *)",
  "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR": "struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR",
  "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR": "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures",
  "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR": "struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR",
  "VkCopyBufferInfo2KHR": "VkCopyBufferInfo2",
  "VkCopyImageInfo2KHR": "VkCopyImageInfo2",
  "VkCopyBufferToImageInfo2KHR": "VkCopyBufferToImageInfo2",
  "VkCopyImageToBufferInfo2KHR": "VkCopyImageToBufferInfo2",
  "VkBlitImageInfo2KHR": "VkBlitImageInfo2",
  "VkResolveImageInfo2KHR": "VkResolveImageInfo2",
  "VkBufferCopy2KHR": "VkBufferCopy2",
  "VkImageCopy2KHR": "VkImageCopy2",
  "VkImageBlit2KHR": "VkImageBlit2",
  "VkBufferImageCopy2KHR": "VkBufferImageCopy2",
  "VkImageResolve2KHR": "VkImageResolve2",
  "PFN_vkCmdCopyBuffer2KHR": "void (*)(VkCommandBuffer, const VkCopyBufferInfo2 *)",
  "PFN_vkCmdCopyImage2KHR": "void (*)(VkCommandBuffer, const VkCopyImageInfo2 *)",
  "PFN_vkCmdCopyBufferToImage2KHR": "void (*)(VkCommandBuffer, const VkCopyBufferToImageInfo2 *)",
  "PFN_vkCmdCopyImageToBuffer2KHR": "void (*)(VkCommandBuffer, const VkCopyImageToBufferInfo2 *)",
  "PFN_vkCmdBlitImage2KHR": "void (*)(VkCommandBuffer, const VkBlitImageInfo2 *)",
  "PFN_vkCmdResolveImage2KHR": "void (*)(VkCommandBuffer, const VkResolveImageInfo2 *)",
  "VkFormatFeatureFlags2KHR": "VkFormatFeatureFlags2",
  "VkFormatFeatureFlagBits2KHR": "VkFormatFeatureFlagBits2",
  "VkFormatProperties3KHR": "VkFormatProperties3",
  "VkPhysicalDeviceMaintenance4FeaturesKHR": "VkPhysicalDeviceMaintenance4Features",
  "VkPhysicalDeviceMaintenance4PropertiesKHR": "VkPhysicalDeviceMaintenance4Properties",
  "VkDeviceBufferMemoryRequirementsKHR": "VkDeviceBufferMemoryRequirements",
  "VkDeviceImageMemoryRequirementsKHR": "VkDeviceImageMemoryRequirements",
  "PFN_vkGetDeviceBufferMemoryRequirementsKHR": "void (*)(VkDevice, const VkDeviceBufferMemoryRequirements *, VkMemoryRequirements2 *)",
  "PFN_vkGetDeviceImageMemoryRequirementsKHR": "void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, VkMemoryRequirements2 *)",
  "PFN_vkGetDeviceImageSparseMemoryRequirementsKHR": "void (*)(VkDevice, const VkDeviceImageMemoryRequirements *, uint32_t *, VkSparseImageMemoryRequirements2 *)",
  "VkDebugReportCallbackEXT": "struct VkDebugReportCallbackEXT_T *",
  "VkDebugReportObjectTypeEXT": "enum VkDebugReportObjectTypeEXT",
  "VkDebugReportFlagBitsEXT": "enum VkDebugReportFlagBitsEXT",
  "VkDebugReportFlagsEXT": "VkFlags",
  "PFN_vkDebugReportCallbackEXT": "VkBool32 (*)(VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64_t, size_t, int32_t, const char *, const char *, void *)",
  "VkDebugReportCallbackCreateInfoEXT": "struct VkDebugReportCallbackCreateInfoEXT",
  "PFN_vkCreateDebugReportCallbackEXT": "VkResult (*)(VkInstance, const VkDebugReportCallbackCreateInfoEXT *, const VkAllocationCallbacks *, VkDebugReportCallbackEXT *)",
  "PFN_vkDestroyDebugReportCallbackEXT": "void (*)(VkInstance, VkDebugReportCallbackEXT, const VkAllocationCallbacks *)",
  "PFN_vkDebugReportMessageEXT": "void (*)(VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, uint64_t, size_t, int32_t, const char *, const char *)",
  "VkRasterizationOrderAMD": "enum VkRasterizationOrderAMD",
  "VkPipelineRasterizationStateRasterizationOrderAMD": "struct VkPipelineRasterizationStateRasterizationOrderAMD",
  "VkDebugMarkerObjectNameInfoEXT": "struct VkDebugMarkerObjectNameInfoEXT",
  "VkDebugMarkerObjectTagInfoEXT": "struct VkDebugMarkerObjectTagInfoEXT",
  "VkDebugMarkerMarkerInfoEXT": "struct VkDebugMarkerMarkerInfoEXT",
  "PFN_vkDebugMarkerSetObjectTagEXT": "VkResult (*)(VkDevice, const VkDebugMarkerObjectTagInfoEXT *)",
  "PFN_vkDebugMarkerSetObjectNameEXT": "VkResult (*)(VkDevice, const VkDebugMarkerObjectNameInfoEXT *)",
  "PFN_vkCmdDebugMarkerBeginEXT": "void (*)(VkCommandBuffer, const VkDebugMarkerMarkerInfoEXT *)",
  "PFN_vkCmdDebugMarkerEndEXT": "void (*)(VkCommandBuffer)",
  "PFN_vkCmdDebugMarkerInsertEXT": "void (*)(VkCommandBuffer, const VkDebugMarkerMarkerInfoEXT *)",
  "VkDedicatedAllocationImageCreateInfoNV": "struct VkDedicatedAllocationImageCreateInfoNV",
  "VkDedicatedAllocationBufferCreateInfoNV": "struct VkDedicatedAllocationBufferCreateInfoNV",
  "VkDedicatedAllocationMemoryAllocateInfoNV": "struct VkDedicatedAllocationMemoryAllocateInfoNV",
  "VkPipelineRasterizationStateStreamCreateFlagsEXT": "VkFlags",
  "VkPhysicalDeviceTransformFeedbackFeaturesEXT": "struct VkPhysicalDeviceTransformFeedbackFeaturesEXT",
  "VkPhysicalDeviceTransformFeedbackPropertiesEXT": "struct VkPhysicalDeviceTransformFeedbackPropertiesEXT",
  "VkPipelineRasterizationStateStreamCreateInfoEXT": "struct VkPipelineRasterizationStateStreamCreateInfoEXT",
  "PFN_vkCmdBindTransformFeedbackBuffersEXT": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *)",
  "PFN_vkCmdBeginTransformFeedbackEXT": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *)",
  "PFN_vkCmdEndTransformFeedbackEXT": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *)",
  "PFN_vkCmdBeginQueryIndexedEXT": "void (*)(VkCommandBuffer, VkQueryPool, uint32_t, VkQueryControlFlags, uint32_t)",
  "PFN_vkCmdEndQueryIndexedEXT": "void (*)(VkCommandBuffer, VkQueryPool, uint32_t, uint32_t)",
  "PFN_vkCmdDrawIndirectByteCountEXT": "void (*)(VkCommandBuffer, uint32_t, uint32_t, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "VkCuModuleNVX": "struct VkCuModuleNVX_T *",
  "VkCuFunctionNVX": "struct VkCuFunctionNVX_T *",
  "VkCuModuleCreateInfoNVX": "struct VkCuModuleCreateInfoNVX",
  "VkCuFunctionCreateInfoNVX": "struct VkCuFunctionCreateInfoNVX",
  "VkCuLaunchInfoNVX": "struct VkCuLaunchInfoNVX",
  "PFN_vkCreateCuModuleNVX": "VkResult (*)(VkDevice, const VkCuModuleCreateInfoNVX *, const VkAllocationCallbacks *, VkCuModuleNVX *)",
  "PFN_vkCreateCuFunctionNVX": "VkResult (*)(VkDevice, const VkCuFunctionCreateInfoNVX *, const VkAllocationCallbacks *, VkCuFunctionNVX *)",
  "PFN_vkDestroyCuModuleNVX": "void (*)(VkDevice, VkCuModuleNVX, const VkAllocationCallbacks *)",
  "PFN_vkDestroyCuFunctionNVX": "void (*)(VkDevice, VkCuFunctionNVX, const VkAllocationCallbacks *)",
  "PFN_vkCmdCuLaunchKernelNVX": "void (*)(VkCommandBuffer, const VkCuLaunchInfoNVX *)",
  "VkImageViewHandleInfoNVX": "struct VkImageViewHandleInfoNVX",
  "VkImageViewAddressPropertiesNVX": "struct VkImageViewAddressPropertiesNVX",
  "PFN_vkGetImageViewHandleNVX": "uint32_t (*)(VkDevice, const VkImageViewHandleInfoNVX *)",
  "PFN_vkGetImageViewAddressNVX": "VkResult (*)(VkDevice, VkImageView, VkImageViewAddressPropertiesNVX *)",
  "PFN_vkCmdDrawIndirectCountAMD": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCmdDrawIndexedIndirectCountAMD": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "VkTextureLODGatherFormatPropertiesAMD": "struct VkTextureLODGatherFormatPropertiesAMD",
  "VkShaderInfoTypeAMD": "enum VkShaderInfoTypeAMD",
  "VkShaderResourceUsageAMD": "struct VkShaderResourceUsageAMD",
  "VkShaderStatisticsInfoAMD": "struct VkShaderStatisticsInfoAMD",
  "PFN_vkGetShaderInfoAMD": "VkResult (*)(VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, size_t *, void *)",
  "VkPhysicalDeviceCornerSampledImageFeaturesNV": "struct VkPhysicalDeviceCornerSampledImageFeaturesNV",
  "VkExternalMemoryHandleTypeFlagBitsNV": "enum VkExternalMemoryHandleTypeFlagBitsNV",
  "VkExternalMemoryHandleTypeFlagsNV": "VkFlags",
  "VkExternalMemoryFeatureFlagBitsNV": "enum VkExternalMemoryFeatureFlagBitsNV",
  "VkExternalMemoryFeatureFlagsNV": "VkFlags",
  "VkExternalImageFormatPropertiesNV": "struct VkExternalImageFormatPropertiesNV",
  "PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV": "VkResult (*)(VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV *)",
  "VkExternalMemoryImageCreateInfoNV": "struct VkExternalMemoryImageCreateInfoNV",
  "VkExportMemoryAllocateInfoNV": "struct VkExportMemoryAllocateInfoNV",
  "VkValidationCheckEXT": "enum VkValidationCheckEXT",
  "VkValidationFlagsEXT": "struct VkValidationFlagsEXT",
  "VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT": "VkPhysicalDeviceTextureCompressionASTCHDRFeatures",
  "VkImageViewASTCDecodeModeEXT": "struct VkImageViewASTCDecodeModeEXT",
  "VkPhysicalDeviceASTCDecodeFeaturesEXT": "struct VkPhysicalDeviceASTCDecodeFeaturesEXT",
  "VkConditionalRenderingFlagBitsEXT": "enum VkConditionalRenderingFlagBitsEXT",
  "VkConditionalRenderingFlagsEXT": "VkFlags",
  "VkConditionalRenderingBeginInfoEXT": "struct VkConditionalRenderingBeginInfoEXT",
  "VkPhysicalDeviceConditionalRenderingFeaturesEXT": "struct VkPhysicalDeviceConditionalRenderingFeaturesEXT",
  "VkCommandBufferInheritanceConditionalRenderingInfoEXT": "struct VkCommandBufferInheritanceConditionalRenderingInfoEXT",
  "PFN_vkCmdBeginConditionalRenderingEXT": "void (*)(VkCommandBuffer, const VkConditionalRenderingBeginInfoEXT *)",
  "PFN_vkCmdEndConditionalRenderingEXT": "void (*)(VkCommandBuffer)",
  "VkViewportWScalingNV": "struct VkViewportWScalingNV",
  "VkPipelineViewportWScalingStateCreateInfoNV": "struct VkPipelineViewportWScalingStateCreateInfoNV",
  "PFN_vkCmdSetViewportWScalingNV": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkViewportWScalingNV *)",
  "PFN_vkReleaseDisplayEXT": "VkResult (*)(VkPhysicalDevice, VkDisplayKHR)",
  "VkSurfaceCounterFlagBitsEXT": "enum VkSurfaceCounterFlagBitsEXT",
  "VkSurfaceCounterFlagsEXT": "VkFlags",
  "VkSurfaceCapabilities2EXT": "struct VkSurfaceCapabilities2EXT",
  "PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT": "VkResult (*)(VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT *)",
  "VkDisplayPowerStateEXT": "enum VkDisplayPowerStateEXT",
  "VkDeviceEventTypeEXT": "enum VkDeviceEventTypeEXT",
  "VkDisplayEventTypeEXT": "enum VkDisplayEventTypeEXT",
  "VkDisplayPowerInfoEXT": "struct VkDisplayPowerInfoEXT",
  "VkDeviceEventInfoEXT": "struct VkDeviceEventInfoEXT",
  "VkDisplayEventInfoEXT": "struct VkDisplayEventInfoEXT",
  "VkSwapchainCounterCreateInfoEXT": "struct VkSwapchainCounterCreateInfoEXT",
  "PFN_vkDisplayPowerControlEXT": "VkResult (*)(VkDevice, VkDisplayKHR, const VkDisplayPowerInfoEXT *)",
  "PFN_vkRegisterDeviceEventEXT": "VkResult (*)(VkDevice, const VkDeviceEventInfoEXT *, const VkAllocationCallbacks *, VkFence *)",
  "PFN_vkRegisterDisplayEventEXT": "VkResult (*)(VkDevice, VkDisplayKHR, const VkDisplayEventInfoEXT *, const VkAllocationCallbacks *, VkFence *)",
  "PFN_vkGetSwapchainCounterEXT": "VkResult (*)(VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, uint64_t *)",
  "VkRefreshCycleDurationGOOGLE": "struct VkRefreshCycleDurationGOOGLE",
  "VkPastPresentationTimingGOOGLE": "struct VkPastPresentationTimingGOOGLE",
  "VkPresentTimeGOOGLE": "struct VkPresentTimeGOOGLE",
  "VkPresentTimesInfoGOOGLE": "struct VkPresentTimesInfoGOOGLE",
  "PFN_vkGetRefreshCycleDurationGOOGLE": "VkResult (*)(VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE *)",
  "PFN_vkGetPastPresentationTimingGOOGLE": "VkResult (*)(VkDevice, VkSwapchainKHR, uint32_t *, VkPastPresentationTimingGOOGLE *)",
  "VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX": "struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX",
  "VkViewportCoordinateSwizzleNV": "enum VkViewportCoordinateSwizzleNV",
  "VkPipelineViewportSwizzleStateCreateFlagsNV": "VkFlags",
  "VkViewportSwizzleNV": "struct VkViewportSwizzleNV",
  "VkPipelineViewportSwizzleStateCreateInfoNV": "struct VkPipelineViewportSwizzleStateCreateInfoNV",
  "VkDiscardRectangleModeEXT": "enum VkDiscardRectangleModeEXT",
  "VkPipelineDiscardRectangleStateCreateFlagsEXT": "VkFlags",
  "VkPhysicalDeviceDiscardRectanglePropertiesEXT": "struct VkPhysicalDeviceDiscardRectanglePropertiesEXT",
  "VkPipelineDiscardRectangleStateCreateInfoEXT": "struct VkPipelineDiscardRectangleStateCreateInfoEXT",
  "PFN_vkCmdSetDiscardRectangleEXT": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *)",
  "VkConservativeRasterizationModeEXT": "enum VkConservativeRasterizationModeEXT",
  "VkPipelineRasterizationConservativeStateCreateFlagsEXT": "VkFlags",
  "VkPhysicalDeviceConservativeRasterizationPropertiesEXT": "struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT",
  "VkPipelineRasterizationConservativeStateCreateInfoEXT": "struct VkPipelineRasterizationConservativeStateCreateInfoEXT",
  "VkPipelineRasterizationDepthClipStateCreateFlagsEXT": "VkFlags",
  "VkPhysicalDeviceDepthClipEnableFeaturesEXT": "struct VkPhysicalDeviceDepthClipEnableFeaturesEXT",
  "VkPipelineRasterizationDepthClipStateCreateInfoEXT": "struct VkPipelineRasterizationDepthClipStateCreateInfoEXT",
  "VkXYColorEXT": "struct VkXYColorEXT",
  "VkHdrMetadataEXT": "struct VkHdrMetadataEXT",
  "PFN_vkSetHdrMetadataEXT": "void (*)(VkDevice, uint32_t, const VkSwapchainKHR *, const VkHdrMetadataEXT *)",
  "VkDebugUtilsMessengerEXT": "struct VkDebugUtilsMessengerEXT_T *",
  "VkDebugUtilsMessengerCallbackDataFlagsEXT": "VkFlags",
  "VkDebugUtilsMessageSeverityFlagBitsEXT": "enum VkDebugUtilsMessageSeverityFlagBitsEXT",
  "VkDebugUtilsMessageTypeFlagBitsEXT": "enum VkDebugUtilsMessageTypeFlagBitsEXT",
  "VkDebugUtilsMessageTypeFlagsEXT": "VkFlags",
  "VkDebugUtilsMessageSeverityFlagsEXT": "VkFlags",
  "VkDebugUtilsMessengerCreateFlagsEXT": "VkFlags",
  "VkDebugUtilsLabelEXT": "struct VkDebugUtilsLabelEXT",
  "VkDebugUtilsObjectNameInfoEXT": "struct VkDebugUtilsObjectNameInfoEXT",
  "VkDebugUtilsMessengerCallbackDataEXT": "struct VkDebugUtilsMessengerCallbackDataEXT",
  "PFN_vkDebugUtilsMessengerCallbackEXT": "VkBool32 (*)(VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, const VkDebugUtilsMessengerCallbackDataEXT *, void *)",
  "VkDebugUtilsMessengerCreateInfoEXT": "struct VkDebugUtilsMessengerCreateInfoEXT",
  "VkDebugUtilsObjectTagInfoEXT": "struct VkDebugUtilsObjectTagInfoEXT",
  "PFN_vkSetDebugUtilsObjectNameEXT": "VkResult (*)(VkDevice, const VkDebugUtilsObjectNameInfoEXT *)",
  "PFN_vkSetDebugUtilsObjectTagEXT": "VkResult (*)(VkDevice, const VkDebugUtilsObjectTagInfoEXT *)",
  "PFN_vkQueueBeginDebugUtilsLabelEXT": "void (*)(VkQueue, const VkDebugUtilsLabelEXT *)",
  "PFN_vkQueueEndDebugUtilsLabelEXT": "void (*)(VkQueue)",
  "PFN_vkQueueInsertDebugUtilsLabelEXT": "void (*)(VkQueue, const VkDebugUtilsLabelEXT *)",
  "PFN_vkCmdBeginDebugUtilsLabelEXT": "void (*)(VkCommandBuffer, const VkDebugUtilsLabelEXT *)",
  "PFN_vkCmdEndDebugUtilsLabelEXT": "void (*)(VkCommandBuffer)",
  "PFN_vkCmdInsertDebugUtilsLabelEXT": "void (*)(VkCommandBuffer, const VkDebugUtilsLabelEXT *)",
  "PFN_vkCreateDebugUtilsMessengerEXT": "VkResult (*)(VkInstance, const VkDebugUtilsMessengerCreateInfoEXT *, const VkAllocationCallbacks *, VkDebugUtilsMessengerEXT *)",
  "PFN_vkDestroyDebugUtilsMessengerEXT": "void (*)(VkInstance, VkDebugUtilsMessengerEXT, const VkAllocationCallbacks *)",
  "PFN_vkSubmitDebugUtilsMessageEXT": "void (*)(VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, const VkDebugUtilsMessengerCallbackDataEXT *)",
  "VkSamplerReductionModeEXT": "VkSamplerReductionMode",
  "VkSamplerReductionModeCreateInfoEXT": "VkSamplerReductionModeCreateInfo",
  "VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT": "VkPhysicalDeviceSamplerFilterMinmaxProperties",
  "VkPhysicalDeviceInlineUniformBlockFeaturesEXT": "VkPhysicalDeviceInlineUniformBlockFeatures",
  "VkPhysicalDeviceInlineUniformBlockPropertiesEXT": "VkPhysicalDeviceInlineUniformBlockProperties",
  "VkWriteDescriptorSetInlineUniformBlockEXT": "VkWriteDescriptorSetInlineUniformBlock",
  "VkDescriptorPoolInlineUniformBlockCreateInfoEXT": "VkDescriptorPoolInlineUniformBlockCreateInfo",
  "VkSampleLocationEXT": "struct VkSampleLocationEXT",
  "VkSampleLocationsInfoEXT": "struct VkSampleLocationsInfoEXT",
  "VkAttachmentSampleLocationsEXT": "struct VkAttachmentSampleLocationsEXT",
  "VkSubpassSampleLocationsEXT": "struct VkSubpassSampleLocationsEXT",
  "VkRenderPassSampleLocationsBeginInfoEXT": "struct VkRenderPassSampleLocationsBeginInfoEXT",
  "VkPipelineSampleLocationsStateCreateInfoEXT": "struct VkPipelineSampleLocationsStateCreateInfoEXT",
  "VkPhysicalDeviceSampleLocationsPropertiesEXT": "struct VkPhysicalDeviceSampleLocationsPropertiesEXT",
  "VkMultisamplePropertiesEXT": "struct VkMultisamplePropertiesEXT",
  "PFN_vkCmdSetSampleLocationsEXT": "void (*)(VkCommandBuffer, const VkSampleLocationsInfoEXT *)",
  "PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT": "void (*)(VkPhysicalDevice, VkSampleCountFlagBits, VkMultisamplePropertiesEXT *)",
  "VkBlendOverlapEXT": "enum VkBlendOverlapEXT",
  "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT": "struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT",
  "VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT": "struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT",
  "VkPipelineColorBlendAdvancedStateCreateInfoEXT": "struct VkPipelineColorBlendAdvancedStateCreateInfoEXT",
  "VkPipelineCoverageToColorStateCreateFlagsNV": "VkFlags",
  "VkPipelineCoverageToColorStateCreateInfoNV": "struct VkPipelineCoverageToColorStateCreateInfoNV",
  "VkCoverageModulationModeNV": "enum VkCoverageModulationModeNV",
  "VkPipelineCoverageModulationStateCreateFlagsNV": "VkFlags",
  "VkPipelineCoverageModulationStateCreateInfoNV": "struct VkPipelineCoverageModulationStateCreateInfoNV",
  "VkPhysicalDeviceShaderSMBuiltinsPropertiesNV": "struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV",
  "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV": "struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV",
  "VkDrmFormatModifierPropertiesEXT": "struct VkDrmFormatModifierPropertiesEXT",
  "VkDrmFormatModifierPropertiesListEXT": "struct VkDrmFormatModifierPropertiesListEXT",
  "VkPhysicalDeviceImageDrmFormatModifierInfoEXT": "struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT",
  "VkImageDrmFormatModifierListCreateInfoEXT": "struct VkImageDrmFormatModifierListCreateInfoEXT",
  "VkImageDrmFormatModifierExplicitCreateInfoEXT": "struct VkImageDrmFormatModifierExplicitCreateInfoEXT",
  "VkImageDrmFormatModifierPropertiesEXT": "struct VkImageDrmFormatModifierPropertiesEXT",
  "VkDrmFormatModifierProperties2EXT": "struct VkDrmFormatModifierProperties2EXT",
  "VkDrmFormatModifierPropertiesList2EXT": "struct VkDrmFormatModifierPropertiesList2EXT",
  "PFN_vkGetImageDrmFormatModifierPropertiesEXT": "VkResult (*)(VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT *)",
  "VkValidationCacheEXT": "struct VkValidationCacheEXT_T *",
  "VkValidationCacheHeaderVersionEXT": "enum VkValidationCacheHeaderVersionEXT",
  "VkValidationCacheCreateFlagsEXT": "VkFlags",
  "VkValidationCacheCreateInfoEXT": "struct VkValidationCacheCreateInfoEXT",
  "VkShaderModuleValidationCacheCreateInfoEXT": "struct VkShaderModuleValidationCacheCreateInfoEXT",
  "PFN_vkCreateValidationCacheEXT": "VkResult (*)(VkDevice, const VkValidationCacheCreateInfoEXT *, const VkAllocationCallbacks *, VkValidationCacheEXT *)",
  "PFN_vkDestroyValidationCacheEXT": "void (*)(VkDevice, VkValidationCacheEXT, const VkAllocationCallbacks *)",
  "PFN_vkMergeValidationCachesEXT": "VkResult (*)(VkDevice, VkValidationCacheEXT, uint32_t, const VkValidationCacheEXT *)",
  "PFN_vkGetValidationCacheDataEXT": "VkResult (*)(VkDevice, VkValidationCacheEXT, size_t *, void *)",
  "VkDescriptorBindingFlagBitsEXT": "VkDescriptorBindingFlagBits",
  "VkDescriptorBindingFlagsEXT": "VkDescriptorBindingFlags",
  "VkDescriptorSetLayoutBindingFlagsCreateInfoEXT": "VkDescriptorSetLayoutBindingFlagsCreateInfo",
  "VkPhysicalDeviceDescriptorIndexingFeaturesEXT": "VkPhysicalDeviceDescriptorIndexingFeatures",
  "VkPhysicalDeviceDescriptorIndexingPropertiesEXT": "VkPhysicalDeviceDescriptorIndexingProperties",
  "VkDescriptorSetVariableDescriptorCountAllocateInfoEXT": "VkDescriptorSetVariableDescriptorCountAllocateInfo",
  "VkDescriptorSetVariableDescriptorCountLayoutSupportEXT": "VkDescriptorSetVariableDescriptorCountLayoutSupport",
  "VkShadingRatePaletteEntryNV": "enum VkShadingRatePaletteEntryNV",
  "VkCoarseSampleOrderTypeNV": "enum VkCoarseSampleOrderTypeNV",
  "VkShadingRatePaletteNV": "struct VkShadingRatePaletteNV",
  "VkPipelineViewportShadingRateImageStateCreateInfoNV": "struct VkPipelineViewportShadingRateImageStateCreateInfoNV",
  "VkPhysicalDeviceShadingRateImageFeaturesNV": "struct VkPhysicalDeviceShadingRateImageFeaturesNV",
  "VkPhysicalDeviceShadingRateImagePropertiesNV": "struct VkPhysicalDeviceShadingRateImagePropertiesNV",
  "VkCoarseSampleLocationNV": "struct VkCoarseSampleLocationNV",
  "VkCoarseSampleOrderCustomNV": "struct VkCoarseSampleOrderCustomNV",
  "VkPipelineViewportCoarseSampleOrderStateCreateInfoNV": "struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV",
  "PFN_vkCmdBindShadingRateImageNV": "void (*)(VkCommandBuffer, VkImageView, VkImageLayout)",
  "PFN_vkCmdSetViewportShadingRatePaletteNV": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkShadingRatePaletteNV *)",
  "PFN_vkCmdSetCoarseSampleOrderNV": "void (*)(VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint32_t, const VkCoarseSampleOrderCustomNV *)",
  "VkAccelerationStructureNV": "struct VkAccelerationStructureNV_T *",
  "VkRayTracingShaderGroupTypeKHR": "enum VkRayTracingShaderGroupTypeKHR",
  "VkRayTracingShaderGroupTypeNV": "VkRayTracingShaderGroupTypeKHR",
  "VkGeometryTypeKHR": "enum VkGeometryTypeKHR",
  "VkGeometryTypeNV": "VkGeometryTypeKHR",
  "VkAccelerationStructureTypeKHR": "enum VkAccelerationStructureTypeKHR",
  "VkAccelerationStructureTypeNV": "VkAccelerationStructureTypeKHR",
  "VkCopyAccelerationStructureModeKHR": "enum VkCopyAccelerationStructureModeKHR",
  "VkCopyAccelerationStructureModeNV": "VkCopyAccelerationStructureModeKHR",
  "VkAccelerationStructureMemoryRequirementsTypeNV": "enum VkAccelerationStructureMemoryRequirementsTypeNV",
  "VkGeometryFlagBitsKHR": "enum VkGeometryFlagBitsKHR",
  "VkGeometryFlagsKHR": "VkFlags",
  "VkGeometryFlagsNV": "VkGeometryFlagsKHR",
  "VkGeometryFlagBitsNV": "VkGeometryFlagBitsKHR",
  "VkGeometryInstanceFlagBitsKHR": "enum VkGeometryInstanceFlagBitsKHR",
  "VkGeometryInstanceFlagsKHR": "VkFlags",
  "VkGeometryInstanceFlagsNV": "VkGeometryInstanceFlagsKHR",
  "VkGeometryInstanceFlagBitsNV": "VkGeometryInstanceFlagBitsKHR",
  "VkBuildAccelerationStructureFlagBitsKHR": "enum VkBuildAccelerationStructureFlagBitsKHR",
  "VkBuildAccelerationStructureFlagsKHR": "VkFlags",
  "VkBuildAccelerationStructureFlagsNV": "VkBuildAccelerationStructureFlagsKHR",
  "VkBuildAccelerationStructureFlagBitsNV": "VkBuildAccelerationStructureFlagBitsKHR",
  "VkRayTracingShaderGroupCreateInfoNV": "struct VkRayTracingShaderGroupCreateInfoNV",
  "VkRayTracingPipelineCreateInfoNV": "struct VkRayTracingPipelineCreateInfoNV",
  "VkGeometryTrianglesNV": "struct VkGeometryTrianglesNV",
  "VkGeometryAABBNV": "struct VkGeometryAABBNV",
  "VkGeometryDataNV": "struct VkGeometryDataNV",
  "VkGeometryNV": "struct VkGeometryNV",
  "VkAccelerationStructureInfoNV": "struct VkAccelerationStructureInfoNV",
  "VkAccelerationStructureCreateInfoNV": "struct VkAccelerationStructureCreateInfoNV",
  "VkBindAccelerationStructureMemoryInfoNV": "struct VkBindAccelerationStructureMemoryInfoNV",
  "VkWriteDescriptorSetAccelerationStructureNV": "struct VkWriteDescriptorSetAccelerationStructureNV",
  "VkAccelerationStructureMemoryRequirementsInfoNV": "struct VkAccelerationStructureMemoryRequirementsInfoNV",
  "VkPhysicalDeviceRayTracingPropertiesNV": "struct VkPhysicalDeviceRayTracingPropertiesNV",
  "VkTransformMatrixKHR": "struct VkTransformMatrixKHR",
  "VkTransformMatrixNV": "VkTransformMatrixKHR",
  "VkAabbPositionsKHR": "struct VkAabbPositionsKHR",
  "VkAabbPositionsNV": "VkAabbPositionsKHR",
  "VkAccelerationStructureInstanceKHR": "struct VkAccelerationStructureInstanceKHR",
  "VkAccelerationStructureInstanceNV": "VkAccelerationStructureInstanceKHR",
  "PFN_vkCreateAccelerationStructureNV": "VkResult (*)(VkDevice, const VkAccelerationStructureCreateInfoNV *, const VkAllocationCallbacks *, VkAccelerationStructureNV *)",
  "PFN_vkDestroyAccelerationStructureNV": "void (*)(VkDevice, VkAccelerationStructureNV, const VkAllocationCallbacks *)",
  "PFN_vkGetAccelerationStructureMemoryRequirementsNV": "void (*)(VkDevice, const VkAccelerationStructureMemoryRequirementsInfoNV *, VkMemoryRequirements2KHR *)",
  "PFN_vkBindAccelerationStructureMemoryNV": "VkResult (*)(VkDevice, uint32_t, const VkBindAccelerationStructureMemoryInfoNV *)",
  "PFN_vkCmdBuildAccelerationStructureNV": "void (*)(VkCommandBuffer, const VkAccelerationStructureInfoNV *, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize)",
  "PFN_vkCmdCopyAccelerationStructureNV": "void (*)(VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR)",
  "PFN_vkCmdTraceRaysNV": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint32_t, uint32_t, uint32_t)",
  "PFN_vkCreateRayTracingPipelinesNV": "VkResult (*)(VkDevice, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoNV *, const VkAllocationCallbacks *, VkPipeline *)",
  "PFN_vkGetRayTracingShaderGroupHandlesKHR": "VkResult (*)(VkDevice, VkPipeline, uint32_t, uint32_t, size_t, void *)",
  "PFN_vkGetRayTracingShaderGroupHandlesNV": "VkResult (*)(VkDevice, VkPipeline, uint32_t, uint32_t, size_t, void *)",
  "PFN_vkGetAccelerationStructureHandleNV": "VkResult (*)(VkDevice, VkAccelerationStructureNV, size_t, void *)",
  "PFN_vkCmdWriteAccelerationStructuresPropertiesNV": "void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureNV *, VkQueryType, VkQueryPool, uint32_t)",
  "PFN_vkCompileDeferredNV": "VkResult (*)(VkDevice, VkPipeline, uint32_t)",
  "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV": "struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV",
  "VkPipelineRepresentativeFragmentTestStateCreateInfoNV": "struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV",
  "VkPhysicalDeviceImageViewImageFormatInfoEXT": "struct VkPhysicalDeviceImageViewImageFormatInfoEXT",
  "VkFilterCubicImageViewImageFormatPropertiesEXT": "struct VkFilterCubicImageViewImageFormatPropertiesEXT",
  "VkQueueGlobalPriorityEXT": "VkQueueGlobalPriorityKHR",
  "VkDeviceQueueGlobalPriorityCreateInfoEXT": "VkDeviceQueueGlobalPriorityCreateInfoKHR",
  "VkImportMemoryHostPointerInfoEXT": "struct VkImportMemoryHostPointerInfoEXT",
  "VkMemoryHostPointerPropertiesEXT": "struct VkMemoryHostPointerPropertiesEXT",
  "VkPhysicalDeviceExternalMemoryHostPropertiesEXT": "struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT",
  "PFN_vkGetMemoryHostPointerPropertiesEXT": "VkResult (*)(VkDevice, VkExternalMemoryHandleTypeFlagBits, const void *, VkMemoryHostPointerPropertiesEXT *)",
  "PFN_vkCmdWriteBufferMarkerAMD": "void (*)(VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint32_t)",
  "VkPipelineCompilerControlFlagBitsAMD": "enum VkPipelineCompilerControlFlagBitsAMD",
  "VkPipelineCompilerControlFlagsAMD": "VkFlags",
  "VkPipelineCompilerControlCreateInfoAMD": "struct VkPipelineCompilerControlCreateInfoAMD",
  "VkTimeDomainEXT": "enum VkTimeDomainEXT",
  "VkCalibratedTimestampInfoEXT": "struct VkCalibratedTimestampInfoEXT",
  "PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkTimeDomainEXT *)",
  "PFN_vkGetCalibratedTimestampsEXT": "VkResult (*)(VkDevice, uint32_t, const VkCalibratedTimestampInfoEXT *, uint64_t *, uint64_t *)",
  "VkPhysicalDeviceShaderCorePropertiesAMD": "struct VkPhysicalDeviceShaderCorePropertiesAMD",
  "VkMemoryOverallocationBehaviorAMD": "enum VkMemoryOverallocationBehaviorAMD",
  "VkDeviceMemoryOverallocationCreateInfoAMD": "struct VkDeviceMemoryOverallocationCreateInfoAMD",
  "VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT": "struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT",
  "VkVertexInputBindingDivisorDescriptionEXT": "struct VkVertexInputBindingDivisorDescriptionEXT",
  "VkPipelineVertexInputDivisorStateCreateInfoEXT": "struct VkPipelineVertexInputDivisorStateCreateInfoEXT",
  "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT": "struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT",
  "VkPipelineCreationFeedbackFlagBitsEXT": "VkPipelineCreationFeedbackFlagBits",
  "VkPipelineCreationFeedbackFlagsEXT": "VkPipelineCreationFeedbackFlags",
  "VkPipelineCreationFeedbackCreateInfoEXT": "VkPipelineCreationFeedbackCreateInfo",
  "VkPipelineCreationFeedbackEXT": "VkPipelineCreationFeedback",
  "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV": "struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV",
  "VkPhysicalDeviceMeshShaderFeaturesNV": "struct VkPhysicalDeviceMeshShaderFeaturesNV",
  "VkPhysicalDeviceMeshShaderPropertiesNV": "struct VkPhysicalDeviceMeshShaderPropertiesNV",
  "VkDrawMeshTasksIndirectCommandNV": "struct VkDrawMeshTasksIndirectCommandNV",
  "PFN_vkCmdDrawMeshTasksNV": "void (*)(VkCommandBuffer, uint32_t, uint32_t)",
  "PFN_vkCmdDrawMeshTasksIndirectNV": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "PFN_vkCmdDrawMeshTasksIndirectCountNV": "void (*)(VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint32_t, uint32_t)",
  "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV": "struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV",
  "VkPhysicalDeviceShaderImageFootprintFeaturesNV": "struct VkPhysicalDeviceShaderImageFootprintFeaturesNV",
  "VkPipelineViewportExclusiveScissorStateCreateInfoNV": "struct VkPipelineViewportExclusiveScissorStateCreateInfoNV",
  "VkPhysicalDeviceExclusiveScissorFeaturesNV": "struct VkPhysicalDeviceExclusiveScissorFeaturesNV",
  "PFN_vkCmdSetExclusiveScissorNV": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkRect2D *)",
  "VkQueueFamilyCheckpointPropertiesNV": "struct VkQueueFamilyCheckpointPropertiesNV",
  "VkCheckpointDataNV": "struct VkCheckpointDataNV",
  "PFN_vkCmdSetCheckpointNV": "void (*)(VkCommandBuffer, const void *)",
  "PFN_vkGetQueueCheckpointDataNV": "void (*)(VkQueue, uint32_t *, VkCheckpointDataNV *)",
  "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL": "struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL",
  "VkPerformanceConfigurationINTEL": "struct VkPerformanceConfigurationINTEL_T *",
  "VkPerformanceConfigurationTypeINTEL": "enum VkPerformanceConfigurationTypeINTEL",
  "VkQueryPoolSamplingModeINTEL": "enum VkQueryPoolSamplingModeINTEL",
  "VkPerformanceOverrideTypeINTEL": "enum VkPerformanceOverrideTypeINTEL",
  "VkPerformanceParameterTypeINTEL": "enum VkPerformanceParameterTypeINTEL",
  "VkPerformanceValueTypeINTEL": "enum VkPerformanceValueTypeINTEL",
  "VkPerformanceValueDataINTEL": "union VkPerformanceValueDataINTEL",
  "VkPerformanceValueINTEL": "struct VkPerformanceValueINTEL",
  "VkInitializePerformanceApiInfoINTEL": "struct VkInitializePerformanceApiInfoINTEL",
  "VkQueryPoolPerformanceQueryCreateInfoINTEL": "struct VkQueryPoolPerformanceQueryCreateInfoINTEL",
  "VkQueryPoolCreateInfoINTEL": "VkQueryPoolPerformanceQueryCreateInfoINTEL",
  "VkPerformanceMarkerInfoINTEL": "struct VkPerformanceMarkerInfoINTEL",
  "VkPerformanceStreamMarkerInfoINTEL": "struct VkPerformanceStreamMarkerInfoINTEL",
  "VkPerformanceOverrideInfoINTEL": "struct VkPerformanceOverrideInfoINTEL",
  "VkPerformanceConfigurationAcquireInfoINTEL": "struct VkPerformanceConfigurationAcquireInfoINTEL",
  "PFN_vkInitializePerformanceApiINTEL": "VkResult (*)(VkDevice, const VkInitializePerformanceApiInfoINTEL *)",
  "PFN_vkUninitializePerformanceApiINTEL": "void (*)(VkDevice)",
  "PFN_vkCmdSetPerformanceMarkerINTEL": "VkResult (*)(VkCommandBuffer, const VkPerformanceMarkerInfoINTEL *)",
  "PFN_vkCmdSetPerformanceStreamMarkerINTEL": "VkResult (*)(VkCommandBuffer, const VkPerformanceStreamMarkerInfoINTEL *)",
  "PFN_vkCmdSetPerformanceOverrideINTEL": "VkResult (*)(VkCommandBuffer, const VkPerformanceOverrideInfoINTEL *)",
  "PFN_vkAcquirePerformanceConfigurationINTEL": "VkResult (*)(VkDevice, const VkPerformanceConfigurationAcquireInfoINTEL *, VkPerformanceConfigurationINTEL *)",
  "PFN_vkReleasePerformanceConfigurationINTEL": "VkResult (*)(VkDevice, VkPerformanceConfigurationINTEL)",
  "PFN_vkQueueSetPerformanceConfigurationINTEL": "VkResult (*)(VkQueue, VkPerformanceConfigurationINTEL)",
  "PFN_vkGetPerformanceParameterINTEL": "VkResult (*)(VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL *)",
  "VkPhysicalDevicePCIBusInfoPropertiesEXT": "struct VkPhysicalDevicePCIBusInfoPropertiesEXT",
  "VkDisplayNativeHdrSurfaceCapabilitiesAMD": "struct VkDisplayNativeHdrSurfaceCapabilitiesAMD",
  "VkSwapchainDisplayNativeHdrCreateInfoAMD": "struct VkSwapchainDisplayNativeHdrCreateInfoAMD",
  "PFN_vkSetLocalDimmingAMD": "void (*)(VkDevice, VkSwapchainKHR, VkBool32)",
  "VkPhysicalDeviceFragmentDensityMapFeaturesEXT": "struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT",
  "VkPhysicalDeviceFragmentDensityMapPropertiesEXT": "struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT",
  "VkRenderPassFragmentDensityMapCreateInfoEXT": "struct VkRenderPassFragmentDensityMapCreateInfoEXT",
  "VkPhysicalDeviceScalarBlockLayoutFeaturesEXT": "VkPhysicalDeviceScalarBlockLayoutFeatures",
  "VkPhysicalDeviceSubgroupSizeControlFeaturesEXT": "VkPhysicalDeviceSubgroupSizeControlFeatures",
  "VkPhysicalDeviceSubgroupSizeControlPropertiesEXT": "VkPhysicalDeviceSubgroupSizeControlProperties",
  "VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT": "VkPipelineShaderStageRequiredSubgroupSizeCreateInfo",
  "VkShaderCorePropertiesFlagBitsAMD": "enum VkShaderCorePropertiesFlagBitsAMD",
  "VkShaderCorePropertiesFlagsAMD": "VkFlags",
  "VkPhysicalDeviceShaderCoreProperties2AMD": "struct VkPhysicalDeviceShaderCoreProperties2AMD",
  "VkPhysicalDeviceCoherentMemoryFeaturesAMD": "struct VkPhysicalDeviceCoherentMemoryFeaturesAMD",
  "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT": "struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT",
  "VkPhysicalDeviceMemoryBudgetPropertiesEXT": "struct VkPhysicalDeviceMemoryBudgetPropertiesEXT",
  "VkPhysicalDeviceMemoryPriorityFeaturesEXT": "struct VkPhysicalDeviceMemoryPriorityFeaturesEXT",
  "VkMemoryPriorityAllocateInfoEXT": "struct VkMemoryPriorityAllocateInfoEXT",
  "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV": "struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV",
  "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT": "struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT",
  "VkPhysicalDeviceBufferAddressFeaturesEXT": "VkPhysicalDeviceBufferDeviceAddressFeaturesEXT",
  "VkBufferDeviceAddressInfoEXT": "VkBufferDeviceAddressInfo",
  "VkBufferDeviceAddressCreateInfoEXT": "struct VkBufferDeviceAddressCreateInfoEXT",
  "PFN_vkGetBufferDeviceAddressEXT": "VkDeviceAddress (*)(VkDevice, const VkBufferDeviceAddressInfo *)",
  "VkToolPurposeFlagBitsEXT": "VkToolPurposeFlagBits",
  "VkToolPurposeFlagsEXT": "VkToolPurposeFlags",
  "VkPhysicalDeviceToolPropertiesEXT": "VkPhysicalDeviceToolProperties",
  "PFN_vkGetPhysicalDeviceToolPropertiesEXT": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkPhysicalDeviceToolProperties *)",
  "VkImageStencilUsageCreateInfoEXT": "VkImageStencilUsageCreateInfo",
  "VkValidationFeatureEnableEXT": "enum VkValidationFeatureEnableEXT",
  "VkValidationFeatureDisableEXT": "enum VkValidationFeatureDisableEXT",
  "VkValidationFeaturesEXT": "struct VkValidationFeaturesEXT",
  "VkComponentTypeNV": "enum VkComponentTypeNV",
  "VkScopeNV": "enum VkScopeNV",
  "VkCooperativeMatrixPropertiesNV": "struct VkCooperativeMatrixPropertiesNV",
  "VkPhysicalDeviceCooperativeMatrixFeaturesNV": "struct VkPhysicalDeviceCooperativeMatrixFeaturesNV",
  "VkPhysicalDeviceCooperativeMatrixPropertiesNV": "struct VkPhysicalDeviceCooperativeMatrixPropertiesNV",
  "PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkCooperativeMatrixPropertiesNV *)",
  "VkCoverageReductionModeNV": "enum VkCoverageReductionModeNV",
  "VkPipelineCoverageReductionStateCreateFlagsNV": "VkFlags",
  "VkPhysicalDeviceCoverageReductionModeFeaturesNV": "struct VkPhysicalDeviceCoverageReductionModeFeaturesNV",
  "VkPipelineCoverageReductionStateCreateInfoNV": "struct VkPipelineCoverageReductionStateCreateInfoNV",
  "VkFramebufferMixedSamplesCombinationNV": "struct VkFramebufferMixedSamplesCombinationNV",
  "PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV": "VkResult (*)(VkPhysicalDevice, uint32_t *, VkFramebufferMixedSamplesCombinationNV *)",
  "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT": "struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT",
  "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT": "struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT",
  "VkProvokingVertexModeEXT": "enum VkProvokingVertexModeEXT",
  "VkPhysicalDeviceProvokingVertexFeaturesEXT": "struct VkPhysicalDeviceProvokingVertexFeaturesEXT",
  "VkPhysicalDeviceProvokingVertexPropertiesEXT": "struct VkPhysicalDeviceProvokingVertexPropertiesEXT",
  "VkPipelineRasterizationProvokingVertexStateCreateInfoEXT": "struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT",
  "VkHeadlessSurfaceCreateFlagsEXT": "VkFlags",
  "VkHeadlessSurfaceCreateInfoEXT": "struct VkHeadlessSurfaceCreateInfoEXT",
  "PFN_vkCreateHeadlessSurfaceEXT": "VkResult (*)(VkInstance, const VkHeadlessSurfaceCreateInfoEXT *, const VkAllocationCallbacks *, VkSurfaceKHR *)",
  "VkLineRasterizationModeEXT": "enum VkLineRasterizationModeEXT",
  "VkPhysicalDeviceLineRasterizationFeaturesEXT": "struct VkPhysicalDeviceLineRasterizationFeaturesEXT",
  "VkPhysicalDeviceLineRasterizationPropertiesEXT": "struct VkPhysicalDeviceLineRasterizationPropertiesEXT",
  "VkPipelineRasterizationLineStateCreateInfoEXT": "struct VkPipelineRasterizationLineStateCreateInfoEXT",
  "PFN_vkCmdSetLineStippleEXT": "void (*)(VkCommandBuffer, uint32_t, uint16_t)",
  "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT": "struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT",
  "VkPhysicalDeviceHostQueryResetFeaturesEXT": "VkPhysicalDeviceHostQueryResetFeatures",
  "PFN_vkResetQueryPoolEXT": "void (*)(VkDevice, VkQueryPool, uint32_t, uint32_t)",
  "VkPhysicalDeviceIndexTypeUint8FeaturesEXT": "struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT",
  "VkPhysicalDeviceExtendedDynamicStateFeaturesEXT": "struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT",
  "PFN_vkCmdSetCullModeEXT": "void (*)(VkCommandBuffer, VkCullModeFlags)",
  "PFN_vkCmdSetFrontFaceEXT": "void (*)(VkCommandBuffer, VkFrontFace)",
  "PFN_vkCmdSetPrimitiveTopologyEXT": "void (*)(VkCommandBuffer, VkPrimitiveTopology)",
  "PFN_vkCmdSetViewportWithCountEXT": "void (*)(VkCommandBuffer, uint32_t, const VkViewport *)",
  "PFN_vkCmdSetScissorWithCountEXT": "void (*)(VkCommandBuffer, uint32_t, const VkRect2D *)",
  "PFN_vkCmdBindVertexBuffers2EXT": "void (*)(VkCommandBuffer, uint32_t, uint32_t, const VkBuffer *, const VkDeviceSize *, const VkDeviceSize *, const VkDeviceSize *)",
  "PFN_vkCmdSetDepthTestEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetDepthWriteEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetDepthCompareOpEXT": "void (*)(VkCommandBuffer, VkCompareOp)",
  "PFN_vkCmdSetDepthBoundsTestEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetStencilTestEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetStencilOpEXT": "void (*)(VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp)",
  "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT": "struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT",
  "VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT": "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures",
  "VkIndirectCommandsLayoutNV": "struct VkIndirectCommandsLayoutNV_T *",
  "VkIndirectCommandsTokenTypeNV": "enum VkIndirectCommandsTokenTypeNV",
  "VkIndirectStateFlagBitsNV": "enum VkIndirectStateFlagBitsNV",
  "VkIndirectStateFlagsNV": "VkFlags",
  "VkIndirectCommandsLayoutUsageFlagBitsNV": "enum VkIndirectCommandsLayoutUsageFlagBitsNV",
  "VkIndirectCommandsLayoutUsageFlagsNV": "VkFlags",
  "VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV": "struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV",
  "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV": "struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV",
  "VkGraphicsShaderGroupCreateInfoNV": "struct VkGraphicsShaderGroupCreateInfoNV",
  "VkGraphicsPipelineShaderGroupsCreateInfoNV": "struct VkGraphicsPipelineShaderGroupsCreateInfoNV",
  "VkBindShaderGroupIndirectCommandNV": "struct VkBindShaderGroupIndirectCommandNV",
  "VkBindIndexBufferIndirectCommandNV": "struct VkBindIndexBufferIndirectCommandNV",
  "VkBindVertexBufferIndirectCommandNV": "struct VkBindVertexBufferIndirectCommandNV",
  "VkSetStateFlagsIndirectCommandNV": "struct VkSetStateFlagsIndirectCommandNV",
  "VkIndirectCommandsStreamNV": "struct VkIndirectCommandsStreamNV",
  "VkIndirectCommandsLayoutTokenNV": "struct VkIndirectCommandsLayoutTokenNV",
  "VkIndirectCommandsLayoutCreateInfoNV": "struct VkIndirectCommandsLayoutCreateInfoNV",
  "VkGeneratedCommandsInfoNV": "struct VkGeneratedCommandsInfoNV",
  "VkGeneratedCommandsMemoryRequirementsInfoNV": "struct VkGeneratedCommandsMemoryRequirementsInfoNV",
  "PFN_vkGetGeneratedCommandsMemoryRequirementsNV": "void (*)(VkDevice, const VkGeneratedCommandsMemoryRequirementsInfoNV *, VkMemoryRequirements2 *)",
  "PFN_vkCmdPreprocessGeneratedCommandsNV": "void (*)(VkCommandBuffer, const VkGeneratedCommandsInfoNV *)",
  "PFN_vkCmdExecuteGeneratedCommandsNV": "void (*)(VkCommandBuffer, VkBool32, const VkGeneratedCommandsInfoNV *)",
  "PFN_vkCmdBindPipelineShaderGroupNV": "void (*)(VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint32_t)",
  "PFN_vkCreateIndirectCommandsLayoutNV": "VkResult (*)(VkDevice, const VkIndirectCommandsLayoutCreateInfoNV *, const VkAllocationCallbacks *, VkIndirectCommandsLayoutNV *)",
  "PFN_vkDestroyIndirectCommandsLayoutNV": "void (*)(VkDevice, VkIndirectCommandsLayoutNV, const VkAllocationCallbacks *)",
  "VkPhysicalDeviceInheritedViewportScissorFeaturesNV": "struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV",
  "VkCommandBufferInheritanceViewportScissorInfoNV": "struct VkCommandBufferInheritanceViewportScissorInfoNV",
  "VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT": "struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT",
  "VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT": "VkPhysicalDeviceTexelBufferAlignmentProperties",
  "VkRenderPassTransformBeginInfoQCOM": "struct VkRenderPassTransformBeginInfoQCOM",
  "VkCommandBufferInheritanceRenderPassTransformInfoQCOM": "struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM",
  "VkDeviceMemoryReportEventTypeEXT": "enum VkDeviceMemoryReportEventTypeEXT",
  "VkDeviceMemoryReportFlagsEXT": "VkFlags",
  "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT": "struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT",
  "VkDeviceMemoryReportCallbackDataEXT": "struct VkDeviceMemoryReportCallbackDataEXT",
  "PFN_vkDeviceMemoryReportCallbackEXT": "void (*)(const VkDeviceMemoryReportCallbackDataEXT *, void *)",
  "VkDeviceDeviceMemoryReportCreateInfoEXT": "struct VkDeviceDeviceMemoryReportCreateInfoEXT",
  "PFN_vkAcquireDrmDisplayEXT": "VkResult (*)(VkPhysicalDevice, int32_t, VkDisplayKHR)",
  "PFN_vkGetDrmDisplayEXT": "VkResult (*)(VkPhysicalDevice, int32_t, uint32_t, VkDisplayKHR *)",
  "VkPhysicalDeviceRobustness2FeaturesEXT": "struct VkPhysicalDeviceRobustness2FeaturesEXT",
  "VkPhysicalDeviceRobustness2PropertiesEXT": "struct VkPhysicalDeviceRobustness2PropertiesEXT",
  "VkSamplerCustomBorderColorCreateInfoEXT": "struct VkSamplerCustomBorderColorCreateInfoEXT",
  "VkPhysicalDeviceCustomBorderColorPropertiesEXT": "struct VkPhysicalDeviceCustomBorderColorPropertiesEXT",
  "VkPhysicalDeviceCustomBorderColorFeaturesEXT": "struct VkPhysicalDeviceCustomBorderColorFeaturesEXT",
  "VkPrivateDataSlotEXT": "VkPrivateDataSlot",
  "VkPrivateDataSlotCreateFlagsEXT": "VkPrivateDataSlotCreateFlags",
  "VkPhysicalDevicePrivateDataFeaturesEXT": "VkPhysicalDevicePrivateDataFeatures",
  "VkDevicePrivateDataCreateInfoEXT": "VkDevicePrivateDataCreateInfo",
  "VkPrivateDataSlotCreateInfoEXT": "VkPrivateDataSlotCreateInfo",
  "PFN_vkCreatePrivateDataSlotEXT": "VkResult (*)(VkDevice, const VkPrivateDataSlotCreateInfo *, const VkAllocationCallbacks *, VkPrivateDataSlot *)",
  "PFN_vkDestroyPrivateDataSlotEXT": "void (*)(VkDevice, VkPrivateDataSlot, const VkAllocationCallbacks *)",
  "PFN_vkSetPrivateDataEXT": "VkResult (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t)",
  "PFN_vkGetPrivateDataEXT": "void (*)(VkDevice, VkObjectType, uint64_t, VkPrivateDataSlot, uint64_t *)",
  "VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT": "VkPhysicalDevicePipelineCreationCacheControlFeatures",
  "VkDeviceDiagnosticsConfigFlagBitsNV": "enum VkDeviceDiagnosticsConfigFlagBitsNV",
  "VkDeviceDiagnosticsConfigFlagsNV": "VkFlags",
  "VkPhysicalDeviceDiagnosticsConfigFeaturesNV": "struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV",
  "VkDeviceDiagnosticsConfigCreateInfoNV": "struct VkDeviceDiagnosticsConfigCreateInfoNV",
  "VkGraphicsPipelineLibraryFlagBitsEXT": "enum VkGraphicsPipelineLibraryFlagBitsEXT",
  "VkGraphicsPipelineLibraryFlagsEXT": "VkFlags",
  "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT": "struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT",
  "VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT": "struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT",
  "VkGraphicsPipelineLibraryCreateInfoEXT": "struct VkGraphicsPipelineLibraryCreateInfoEXT",
  "VkFragmentShadingRateTypeNV": "enum VkFragmentShadingRateTypeNV",
  "VkFragmentShadingRateNV": "enum VkFragmentShadingRateNV",
  "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV": "struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV",
  "VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV": "struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV",
  "VkPipelineFragmentShadingRateEnumStateCreateInfoNV": "struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV",
  "PFN_vkCmdSetFragmentShadingRateEnumNV": "void (*)(VkCommandBuffer, VkFragmentShadingRateNV, const VkFragmentShadingRateCombinerOpKHR *)",
  "VkAccelerationStructureMotionInstanceTypeNV": "enum VkAccelerationStructureMotionInstanceTypeNV",
  "VkAccelerationStructureMotionInfoFlagsNV": "VkFlags",
  "VkAccelerationStructureMotionInstanceFlagsNV": "VkFlags",
  "VkDeviceOrHostAddressConstKHR": "union VkDeviceOrHostAddressConstKHR",
  "VkAccelerationStructureGeometryMotionTrianglesDataNV": "struct VkAccelerationStructureGeometryMotionTrianglesDataNV",
  "VkAccelerationStructureMotionInfoNV": "struct VkAccelerationStructureMotionInfoNV",
  "VkAccelerationStructureMatrixMotionInstanceNV": "struct VkAccelerationStructureMatrixMotionInstanceNV",
  "VkSRTDataNV": "struct VkSRTDataNV",
  "VkAccelerationStructureSRTMotionInstanceNV": "struct VkAccelerationStructureSRTMotionInstanceNV",
  "VkAccelerationStructureMotionInstanceDataNV": "union VkAccelerationStructureMotionInstanceDataNV",
  "VkAccelerationStructureMotionInstanceNV": "struct VkAccelerationStructureMotionInstanceNV",
  "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV": "struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV",
  "VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT": "struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT",
  "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT": "struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT",
  "VkPhysicalDeviceFragmentDensityMap2PropertiesEXT": "struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT",
  "VkCopyCommandTransformInfoQCOM": "struct VkCopyCommandTransformInfoQCOM",
  "VkPhysicalDeviceImageRobustnessFeaturesEXT": "VkPhysicalDeviceImageRobustnessFeatures",
  "VkPhysicalDevice4444FormatsFeaturesEXT": "struct VkPhysicalDevice4444FormatsFeaturesEXT",
  "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM": "struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM",
  "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT": "struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT",
  "PFN_vkAcquireWinrtDisplayNV": "VkResult (*)(VkPhysicalDevice, VkDisplayKHR)",
  "PFN_vkGetWinrtDisplayNV": "VkResult (*)(VkPhysicalDevice, uint32_t, VkDisplayKHR *)",
  "VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE": "struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE",
  "VkMutableDescriptorTypeListVALVE": "struct VkMutableDescriptorTypeListVALVE",
  "VkMutableDescriptorTypeCreateInfoVALVE": "struct VkMutableDescriptorTypeCreateInfoVALVE",
  "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT": "struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT",
  "VkVertexInputBindingDescription2EXT": "struct VkVertexInputBindingDescription2EXT",
  "VkVertexInputAttributeDescription2EXT": "struct VkVertexInputAttributeDescription2EXT",
  "PFN_vkCmdSetVertexInputEXT": "void (*)(VkCommandBuffer, uint32_t, const VkVertexInputBindingDescription2EXT *, uint32_t, const VkVertexInputAttributeDescription2EXT *)",
  "VkPhysicalDeviceDrmPropertiesEXT": "struct VkPhysicalDeviceDrmPropertiesEXT",
  "VkPhysicalDeviceDepthClipControlFeaturesEXT": "struct VkPhysicalDeviceDepthClipControlFeaturesEXT",
  "VkPipelineViewportDepthClipControlCreateInfoEXT": "struct VkPipelineViewportDepthClipControlCreateInfoEXT",
  "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT": "struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT",
  "VkSubpassShadingPipelineCreateInfoHUAWEI": "struct VkSubpassShadingPipelineCreateInfoHUAWEI",
  "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI": "struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI",
  "VkPhysicalDeviceSubpassShadingPropertiesHUAWEI": "struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI",
  "PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI": "VkResult (*)(VkDevice, VkRenderPass, VkExtent2D *)",
  "PFN_vkCmdSubpassShadingHUAWEI": "void (*)(VkCommandBuffer)",
  "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI": "struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI",
  "PFN_vkCmdBindInvocationMaskHUAWEI": "void (*)(VkCommandBuffer, VkImageView, VkImageLayout)",
  "VkRemoteAddressNV": "void *",
  "VkMemoryGetRemoteAddressInfoNV": "struct VkMemoryGetRemoteAddressInfoNV",
  "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV": "struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV",
  "PFN_vkGetMemoryRemoteAddressNV": "VkResult (*)(VkDevice, const VkMemoryGetRemoteAddressInfoNV *, VkRemoteAddressNV *)",
  "VkPhysicalDeviceExtendedDynamicState2FeaturesEXT": "struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT",
  "PFN_vkCmdSetPatchControlPointsEXT": "void (*)(VkCommandBuffer, uint32_t)",
  "PFN_vkCmdSetRasterizerDiscardEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetDepthBiasEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "PFN_vkCmdSetLogicOpEXT": "void (*)(VkCommandBuffer, VkLogicOp)",
  "PFN_vkCmdSetPrimitiveRestartEnableEXT": "void (*)(VkCommandBuffer, VkBool32)",
  "VkPhysicalDeviceColorWriteEnableFeaturesEXT": "struct VkPhysicalDeviceColorWriteEnableFeaturesEXT",
  "VkPipelineColorWriteCreateInfoEXT": "struct VkPipelineColorWriteCreateInfoEXT",
  "PFN_vkCmdSetColorWriteEnableEXT": "void (*)(VkCommandBuffer, uint32_t, const VkBool32 *)",
  "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT": "struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT",
  "VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT": "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR",
  "VkQueueFamilyGlobalPriorityPropertiesEXT": "VkQueueFamilyGlobalPriorityPropertiesKHR",
  "VkPhysicalDeviceImageViewMinLodFeaturesEXT": "struct VkPhysicalDeviceImageViewMinLodFeaturesEXT",
  "VkImageViewMinLodCreateInfoEXT": "struct VkImageViewMinLodCreateInfoEXT",
  "VkPhysicalDeviceMultiDrawFeaturesEXT": "struct VkPhysicalDeviceMultiDrawFeaturesEXT",
  "VkPhysicalDeviceMultiDrawPropertiesEXT": "struct VkPhysicalDeviceMultiDrawPropertiesEXT",
  "VkMultiDrawInfoEXT": "struct VkMultiDrawInfoEXT",
  "VkMultiDrawIndexedInfoEXT": "struct VkMultiDrawIndexedInfoEXT",
  "PFN_vkCmdDrawMultiEXT": "void (*)(VkCommandBuffer, uint32_t, const VkMultiDrawInfoEXT *, uint32_t, uint32_t, uint32_t)",
  "PFN_vkCmdDrawMultiIndexedEXT": "void (*)(VkCommandBuffer, uint32_t, const VkMultiDrawIndexedInfoEXT *, uint32_t, uint32_t, uint32_t, const int32_t *)",
  "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT": "struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT",
  "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT": "struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT",
  "VkSamplerBorderColorComponentMappingCreateInfoEXT": "struct VkSamplerBorderColorComponentMappingCreateInfoEXT",
  "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT": "struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT",
  "PFN_vkSetDeviceMemoryPriorityEXT": "void (*)(VkDevice, VkDeviceMemory, float)",
  "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE": "struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE",
  "VkDescriptorSetBindingReferenceVALVE": "struct VkDescriptorSetBindingReferenceVALVE",
  "VkDescriptorSetLayoutHostMappingInfoVALVE": "struct VkDescriptorSetLayoutHostMappingInfoVALVE",
  "PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE": "void (*)(VkDevice, const VkDescriptorSetBindingReferenceVALVE *, VkDescriptorSetLayoutHostMappingInfoVALVE *)",
  "PFN_vkGetDescriptorSetHostMappingVALVE": "void (*)(VkDevice, VkDescriptorSet, void **)",
  "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM": "struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM",
  "VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM": "struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM",
  "VkSubpassFragmentDensityMapOffsetEndInfoQCOM": "struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM",
  "VkPhysicalDeviceLinearColorAttachmentFeaturesNV": "struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV",
  "VkAccelerationStructureKHR": "struct VkAccelerationStructureKHR_T *",
  "VkBuildAccelerationStructureModeKHR": "enum VkBuildAccelerationStructureModeKHR",
  "VkAccelerationStructureBuildTypeKHR": "enum VkAccelerationStructureBuildTypeKHR",
  "VkAccelerationStructureCompatibilityKHR": "enum VkAccelerationStructureCompatibilityKHR",
  "VkAccelerationStructureCreateFlagBitsKHR": "enum VkAccelerationStructureCreateFlagBitsKHR",
  "VkAccelerationStructureCreateFlagsKHR": "VkFlags",
  "VkDeviceOrHostAddressKHR": "union VkDeviceOrHostAddressKHR",
  "VkAccelerationStructureBuildRangeInfoKHR": "struct VkAccelerationStructureBuildRangeInfoKHR",
  "VkAccelerationStructureGeometryTrianglesDataKHR": "struct VkAccelerationStructureGeometryTrianglesDataKHR",
  "VkAccelerationStructureGeometryAabbsDataKHR": "struct VkAccelerationStructureGeometryAabbsDataKHR",
  "VkAccelerationStructureGeometryInstancesDataKHR": "struct VkAccelerationStructureGeometryInstancesDataKHR",
  "VkAccelerationStructureGeometryDataKHR": "union VkAccelerationStructureGeometryDataKHR",
  "VkAccelerationStructureGeometryKHR": "struct VkAccelerationStructureGeometryKHR",
  "VkAccelerationStructureBuildGeometryInfoKHR": "struct VkAccelerationStructureBuildGeometryInfoKHR",
  "VkAccelerationStructureCreateInfoKHR": "struct VkAccelerationStructureCreateInfoKHR",
  "VkWriteDescriptorSetAccelerationStructureKHR": "struct VkWriteDescriptorSetAccelerationStructureKHR",
  "VkPhysicalDeviceAccelerationStructureFeaturesKHR": "struct VkPhysicalDeviceAccelerationStructureFeaturesKHR",
  "VkPhysicalDeviceAccelerationStructurePropertiesKHR": "struct VkPhysicalDeviceAccelerationStructurePropertiesKHR",
  "VkAccelerationStructureDeviceAddressInfoKHR": "struct VkAccelerationStructureDeviceAddressInfoKHR",
  "VkAccelerationStructureVersionInfoKHR": "struct VkAccelerationStructureVersionInfoKHR",
  "VkCopyAccelerationStructureToMemoryInfoKHR": "struct VkCopyAccelerationStructureToMemoryInfoKHR",
  "VkCopyMemoryToAccelerationStructureInfoKHR": "struct VkCopyMemoryToAccelerationStructureInfoKHR",
  "VkCopyAccelerationStructureInfoKHR": "struct VkCopyAccelerationStructureInfoKHR",
  "VkAccelerationStructureBuildSizesInfoKHR": "struct VkAccelerationStructureBuildSizesInfoKHR",
  "PFN_vkCreateAccelerationStructureKHR": "VkResult (*)(VkDevice, const VkAccelerationStructureCreateInfoKHR *, const VkAllocationCallbacks *, VkAccelerationStructureKHR *)",
  "PFN_vkDestroyAccelerationStructureKHR": "void (*)(VkDevice, VkAccelerationStructureKHR, const VkAllocationCallbacks *)",
  "PFN_vkCmdBuildAccelerationStructuresKHR": "void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkAccelerationStructureBuildRangeInfoKHR *const *)",
  "PFN_vkCmdBuildAccelerationStructuresIndirectKHR": "void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkDeviceAddress *, const uint32_t *, const uint32_t *const *)",
  "PFN_vkBuildAccelerationStructuresKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR, uint32_t, const VkAccelerationStructureBuildGeometryInfoKHR *, const VkAccelerationStructureBuildRangeInfoKHR *const *)",
  "PFN_vkCopyAccelerationStructureKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyAccelerationStructureInfoKHR *)",
  "PFN_vkCopyAccelerationStructureToMemoryKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyAccelerationStructureToMemoryInfoKHR *)",
  "PFN_vkCopyMemoryToAccelerationStructureKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR, const VkCopyMemoryToAccelerationStructureInfoKHR *)",
  "PFN_vkWriteAccelerationStructuresPropertiesKHR": "VkResult (*)(VkDevice, uint32_t, const VkAccelerationStructureKHR *, VkQueryType, size_t, void *, size_t)",
  "PFN_vkCmdCopyAccelerationStructureKHR": "void (*)(VkCommandBuffer, const VkCopyAccelerationStructureInfoKHR *)",
  "PFN_vkCmdCopyAccelerationStructureToMemoryKHR": "void (*)(VkCommandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR *)",
  "PFN_vkCmdCopyMemoryToAccelerationStructureKHR": "void (*)(VkCommandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR *)",
  "PFN_vkGetAccelerationStructureDeviceAddressKHR": "VkDeviceAddress (*)(VkDevice, const VkAccelerationStructureDeviceAddressInfoKHR *)",
  "PFN_vkCmdWriteAccelerationStructuresPropertiesKHR": "void (*)(VkCommandBuffer, uint32_t, const VkAccelerationStructureKHR *, VkQueryType, VkQueryPool, uint32_t)",
  "PFN_vkGetDeviceAccelerationStructureCompatibilityKHR": "void (*)(VkDevice, const VkAccelerationStructureVersionInfoKHR *, VkAccelerationStructureCompatibilityKHR *)",
  "PFN_vkGetAccelerationStructureBuildSizesKHR": "void (*)(VkDevice, VkAccelerationStructureBuildTypeKHR, const VkAccelerationStructureBuildGeometryInfoKHR *, const uint32_t *, VkAccelerationStructureBuildSizesInfoKHR *)",
  "VkShaderGroupShaderKHR": "enum VkShaderGroupShaderKHR",
  "VkRayTracingShaderGroupCreateInfoKHR": "struct VkRayTracingShaderGroupCreateInfoKHR",
  "VkRayTracingPipelineInterfaceCreateInfoKHR": "struct VkRayTracingPipelineInterfaceCreateInfoKHR",
  "VkRayTracingPipelineCreateInfoKHR": "struct VkRayTracingPipelineCreateInfoKHR",
  "VkPhysicalDeviceRayTracingPipelineFeaturesKHR": "struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR",
  "VkPhysicalDeviceRayTracingPipelinePropertiesKHR": "struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR",
  "VkStridedDeviceAddressRegionKHR": "struct VkStridedDeviceAddressRegionKHR",
  "VkTraceRaysIndirectCommandKHR": "struct VkTraceRaysIndirectCommandKHR",
  "PFN_vkCmdTraceRaysKHR": "void (*)(VkCommandBuffer, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, uint32_t, uint32_t, uint32_t)",
  "PFN_vkCreateRayTracingPipelinesKHR": "VkResult (*)(VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint32_t, const VkRayTracingPipelineCreateInfoKHR *, const VkAllocationCallbacks *, VkPipeline *)",
  "PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR": "VkResult (*)(VkDevice, VkPipeline, uint32_t, uint32_t, size_t, void *)",
  "PFN_vkCmdTraceRaysIndirectKHR": "void (*)(VkCommandBuffer, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, const VkStridedDeviceAddressRegionKHR *, VkDeviceAddress)",
  "PFN_vkGetRayTracingShaderGroupStackSizeKHR": "VkDeviceSize (*)(VkDevice, VkPipeline, uint32_t, VkShaderGroupShaderKHR)",
  "PFN_vkCmdSetRayTracingPipelineStackSizeKHR": "void (*)(VkCommandBuffer, uint32_t)",
  "VkPhysicalDeviceRayQueryFeaturesKHR": "struct VkPhysicalDeviceRayQueryFeaturesKHR"
}
VK_SUCCESS = 0
VK_NOT_READY = 1
VK_TIMEOUT = 2
VK_EVENT_SET = 3
VK_EVENT_RESET = 4
VK_INCOMPLETE = 5
VK_ERROR_OUT_OF_HOST_MEMORY = 1
VK_ERROR_OUT_OF_DEVICE_MEMORY = 2
VK_ERROR_INITIALIZATION_FAILED = 3
VK_ERROR_DEVICE_LOST = 4
VK_ERROR_MEMORY_MAP_FAILED = 5
VK_ERROR_LAYER_NOT_PRESENT = 6
VK_ERROR_EXTENSION_NOT_PRESENT = 7
VK_ERROR_FEATURE_NOT_PRESENT = 8
VK_ERROR_INCOMPATIBLE_DRIVER = 9
VK_ERROR_TOO_MANY_OBJECTS = 10
VK_ERROR_FORMAT_NOT_SUPPORTED = 11
VK_ERROR_FRAGMENTED_POOL = 12
VK_ERROR_UNKNOWN = 13
VK_ERROR_OUT_OF_POOL_MEMORY = 1000069000
VK_ERROR_INVALID_EXTERNAL_HANDLE = 1000072003
VK_ERROR_FRAGMENTATION = 1000161000
VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = 1000257000
VK_PIPELINE_COMPILE_REQUIRED = 1000297000
VK_ERROR_SURFACE_LOST_KHR = 1000000000
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = 1000000001
VK_SUBOPTIMAL_KHR = 1000001003
VK_ERROR_OUT_OF_DATE_KHR = 1000001004
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = 1000003001
VK_ERROR_VALIDATION_FAILED_EXT = 1000011001
VK_ERROR_INVALID_SHADER_NV = 1000012000
VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = 1000158000
VK_ERROR_NOT_PERMITTED_KHR = 1000174001
VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = 1000255000
VK_THREAD_IDLE_KHR = 1000268000
VK_THREAD_DONE_KHR = 1000268001
VK_OPERATION_DEFERRED_KHR = 1000268002
VK_OPERATION_NOT_DEFERRED_KHR = 1000268003
VK_RESULT_MAX_ENUM = 2147483647
VK_STRUCTURE_TYPE_APPLICATION_INFO = 0
VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1
VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2
VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3
VK_STRUCTURE_TYPE_SUBMIT_INFO = 4
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5
VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6
VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7
VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8
VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9
VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10
VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11
VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12
VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13
VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14
VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15
VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16
VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19
VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23
VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24
VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26
VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28
VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29
VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30
VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35
VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36
VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38
VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39
VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41
VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42
VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45
VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46
VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47
VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000
VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001
VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000
VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003
VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004
VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005
VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006
VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000
VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001
VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000
VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001
VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002
VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003
VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002
VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004
VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006
VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000
VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001
VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002
VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003
VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000
VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002
VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001
VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002
VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004
VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005
VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000
VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002
VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000
VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001
VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000
VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52
VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002
VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003
VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004
VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005
VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000
VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000
VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000
VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001
VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002
VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000
VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001
VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001
VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002
VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003
VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004
VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001
VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002
VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54
VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000
VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001
VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000
VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000
VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001
VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002
VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003
VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004
VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005
VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000
VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000
VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001
VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002
VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003
VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004
VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005
VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006
VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007
VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008
VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009
VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000
VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002
VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000
VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000
VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001
VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001
VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001
VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002
VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003
VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000
VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007
VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008
VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009
VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010
VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011
VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012
VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000
VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001
VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000
VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000
VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000
VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000
VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000
VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000
VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000
VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001
VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001
VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002
VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000
VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001
VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002
VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000
VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001
VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000
VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006
VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007
VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008
VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009
VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000
VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000
VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000
VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000
VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000
VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001
VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000
VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001
VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002
VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003
VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000
VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001
VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002
VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000
VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001
VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002
VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000
VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001
VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002
VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000
VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000
VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001
VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002
VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003
VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000
VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001
VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000
VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000
VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000
VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001
VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002
VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000
VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001
VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002
VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003
VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004
VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005
VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001
VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002
VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000
VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001
VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002
VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003
VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004
VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000
VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000
VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000
VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001
VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002
VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003
VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002
VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003
VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004
VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005
VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006
VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000
VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001
VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003
VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001
VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009
VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010
VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011
VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015
VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001
VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004
VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005
VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006
VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000
VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005
VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001
VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003
VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004
VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005
VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006
VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009
VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000
VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000
VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001
VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000
VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000
VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000
VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000
VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000
VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001
VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000
VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002
VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002
VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000
VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000
VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000
VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001
VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002
VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003
VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004
VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000
VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000
VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001
VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000
VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001
VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002
VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000
VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000
VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001
VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000
VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002
VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000
VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000
VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001
VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002
VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000
VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002
VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001
VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000
VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000
VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004
VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000
VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003
VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004
VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005
VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000
VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000
VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000
VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001
VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001
VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002
VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000
VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000
VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001
VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008
VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT = 1000320000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT = 1000320001
VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT = 1000320002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001
VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001
VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001
VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000
VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000
VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000
VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001
VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000
VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000
VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000
VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001
VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002
VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000
VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000
VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003
VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005
VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006
VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007
VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008
VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009
VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000
VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000
VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000
VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT = 1000382000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000
VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT = 1000393000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000
VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE = 1000420000
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE = 1000420001
VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = 1000420002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001
VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002
VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000
VK_STRUCTURE_TYPE_MAX_ENUM = 2147483647
VK_IMAGE_LAYOUT_UNDEFINED = 0
VK_IMAGE_LAYOUT_GENERAL = 1
VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2
VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3
VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4
VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5
VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6
VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7
VK_IMAGE_LAYOUT_PREINITIALIZED = 8
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001
VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000
VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001
VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002
VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003
VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000
VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001
VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002
VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000
VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000
VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003
VK_IMAGE_LAYOUT_MAX_ENUM = 2147483647
VK_OBJECT_TYPE_UNKNOWN = 0
VK_OBJECT_TYPE_INSTANCE = 1
VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2
VK_OBJECT_TYPE_DEVICE = 3
VK_OBJECT_TYPE_QUEUE = 4
VK_OBJECT_TYPE_SEMAPHORE = 5
VK_OBJECT_TYPE_COMMAND_BUFFER = 6
VK_OBJECT_TYPE_FENCE = 7
VK_OBJECT_TYPE_DEVICE_MEMORY = 8
VK_OBJECT_TYPE_BUFFER = 9
VK_OBJECT_TYPE_IMAGE = 10
VK_OBJECT_TYPE_EVENT = 11
VK_OBJECT_TYPE_QUERY_POOL = 12
VK_OBJECT_TYPE_BUFFER_VIEW = 13
VK_OBJECT_TYPE_IMAGE_VIEW = 14
VK_OBJECT_TYPE_SHADER_MODULE = 15
VK_OBJECT_TYPE_PIPELINE_CACHE = 16
VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17
VK_OBJECT_TYPE_RENDER_PASS = 18
VK_OBJECT_TYPE_PIPELINE = 19
VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20
VK_OBJECT_TYPE_SAMPLER = 21
VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22
VK_OBJECT_TYPE_DESCRIPTOR_SET = 23
VK_OBJECT_TYPE_FRAMEBUFFER = 24
VK_OBJECT_TYPE_COMMAND_POOL = 25
VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000
VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000
VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000
VK_OBJECT_TYPE_SURFACE_KHR = 1000000000
VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000
VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000
VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001
VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000
VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000
VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001
VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000
VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000
VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000
VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000
VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000
VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000
VK_OBJECT_TYPE_MAX_ENUM = 2147483647
VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 2147483647
VK_VENDOR_ID_VIV = 65537
VK_VENDOR_ID_VSI = 65538
VK_VENDOR_ID_KAZAN = 65539
VK_VENDOR_ID_CODEPLAY = 65540
VK_VENDOR_ID_MESA = 65541
VK_VENDOR_ID_POCL = 65542
VK_VENDOR_ID_MAX_ENUM = 2147483647
VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0
VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1
VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2
VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3
VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 2147483647
VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 2147483647
VK_FORMAT_UNDEFINED = 0
VK_FORMAT_R4G4_UNORM_PACK8 = 1
VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2
VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3
VK_FORMAT_R5G6B5_UNORM_PACK16 = 4
VK_FORMAT_B5G6R5_UNORM_PACK16 = 5
VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6
VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7
VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8
VK_FORMAT_R8_UNORM = 9
VK_FORMAT_R8_SNORM = 10
VK_FORMAT_R8_USCALED = 11
VK_FORMAT_R8_SSCALED = 12
VK_FORMAT_R8_UINT = 13
VK_FORMAT_R8_SINT = 14
VK_FORMAT_R8_SRGB = 15
VK_FORMAT_R8G8_UNORM = 16
VK_FORMAT_R8G8_SNORM = 17
VK_FORMAT_R8G8_USCALED = 18
VK_FORMAT_R8G8_SSCALED = 19
VK_FORMAT_R8G8_UINT = 20
VK_FORMAT_R8G8_SINT = 21
VK_FORMAT_R8G8_SRGB = 22
VK_FORMAT_R8G8B8_UNORM = 23
VK_FORMAT_R8G8B8_SNORM = 24
VK_FORMAT_R8G8B8_USCALED = 25
VK_FORMAT_R8G8B8_SSCALED = 26
VK_FORMAT_R8G8B8_UINT = 27
VK_FORMAT_R8G8B8_SINT = 28
VK_FORMAT_R8G8B8_SRGB = 29
VK_FORMAT_B8G8R8_UNORM = 30
VK_FORMAT_B8G8R8_SNORM = 31
VK_FORMAT_B8G8R8_USCALED = 32
VK_FORMAT_B8G8R8_SSCALED = 33
VK_FORMAT_B8G8R8_UINT = 34
VK_FORMAT_B8G8R8_SINT = 35
VK_FORMAT_B8G8R8_SRGB = 36
VK_FORMAT_R8G8B8A8_UNORM = 37
VK_FORMAT_R8G8B8A8_SNORM = 38
VK_FORMAT_R8G8B8A8_USCALED = 39
VK_FORMAT_R8G8B8A8_SSCALED = 40
VK_FORMAT_R8G8B8A8_UINT = 41
VK_FORMAT_R8G8B8A8_SINT = 42
VK_FORMAT_R8G8B8A8_SRGB = 43
VK_FORMAT_B8G8R8A8_UNORM = 44
VK_FORMAT_B8G8R8A8_SNORM = 45
VK_FORMAT_B8G8R8A8_USCALED = 46
VK_FORMAT_B8G8R8A8_SSCALED = 47
VK_FORMAT_B8G8R8A8_UINT = 48
VK_FORMAT_B8G8R8A8_SINT = 49
VK_FORMAT_B8G8R8A8_SRGB = 50
VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51
VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52
VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53
VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54
VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55
VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56
VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57
VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58
VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59
VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60
VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61
VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62
VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63
VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64
VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65
VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66
VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67
VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68
VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69
VK_FORMAT_R16_UNORM = 70
VK_FORMAT_R16_SNORM = 71
VK_FORMAT_R16_USCALED = 72
VK_FORMAT_R16_SSCALED = 73
VK_FORMAT_R16_UINT = 74
VK_FORMAT_R16_SINT = 75
VK_FORMAT_R16_SFLOAT = 76
VK_FORMAT_R16G16_UNORM = 77
VK_FORMAT_R16G16_SNORM = 78
VK_FORMAT_R16G16_USCALED = 79
VK_FORMAT_R16G16_SSCALED = 80
VK_FORMAT_R16G16_UINT = 81
VK_FORMAT_R16G16_SINT = 82
VK_FORMAT_R16G16_SFLOAT = 83
VK_FORMAT_R16G16B16_UNORM = 84
VK_FORMAT_R16G16B16_SNORM = 85
VK_FORMAT_R16G16B16_USCALED = 86
VK_FORMAT_R16G16B16_SSCALED = 87
VK_FORMAT_R16G16B16_UINT = 88
VK_FORMAT_R16G16B16_SINT = 89
VK_FORMAT_R16G16B16_SFLOAT = 90
VK_FORMAT_R16G16B16A16_UNORM = 91
VK_FORMAT_R16G16B16A16_SNORM = 92
VK_FORMAT_R16G16B16A16_USCALED = 93
VK_FORMAT_R16G16B16A16_SSCALED = 94
VK_FORMAT_R16G16B16A16_UINT = 95
VK_FORMAT_R16G16B16A16_SINT = 96
VK_FORMAT_R16G16B16A16_SFLOAT = 97
VK_FORMAT_R32_UINT = 98
VK_FORMAT_R32_SINT = 99
VK_FORMAT_R32_SFLOAT = 100
VK_FORMAT_R32G32_UINT = 101
VK_FORMAT_R32G32_SINT = 102
VK_FORMAT_R32G32_SFLOAT = 103
VK_FORMAT_R32G32B32_UINT = 104
VK_FORMAT_R32G32B32_SINT = 105
VK_FORMAT_R32G32B32_SFLOAT = 106
VK_FORMAT_R32G32B32A32_UINT = 107
VK_FORMAT_R32G32B32A32_SINT = 108
VK_FORMAT_R32G32B32A32_SFLOAT = 109
VK_FORMAT_R64_UINT = 110
VK_FORMAT_R64_SINT = 111
VK_FORMAT_R64_SFLOAT = 112
VK_FORMAT_R64G64_UINT = 113
VK_FORMAT_R64G64_SINT = 114
VK_FORMAT_R64G64_SFLOAT = 115
VK_FORMAT_R64G64B64_UINT = 116
VK_FORMAT_R64G64B64_SINT = 117
VK_FORMAT_R64G64B64_SFLOAT = 118
VK_FORMAT_R64G64B64A64_UINT = 119
VK_FORMAT_R64G64B64A64_SINT = 120
VK_FORMAT_R64G64B64A64_SFLOAT = 121
VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122
VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123
VK_FORMAT_D16_UNORM = 124
VK_FORMAT_X8_D24_UNORM_PACK32 = 125
VK_FORMAT_D32_SFLOAT = 126
VK_FORMAT_S8_UINT = 127
VK_FORMAT_D16_UNORM_S8_UINT = 128
VK_FORMAT_D24_UNORM_S8_UINT = 129
VK_FORMAT_D32_SFLOAT_S8_UINT = 130
VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131
VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132
VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133
VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134
VK_FORMAT_BC2_UNORM_BLOCK = 135
VK_FORMAT_BC2_SRGB_BLOCK = 136
VK_FORMAT_BC3_UNORM_BLOCK = 137
VK_FORMAT_BC3_SRGB_BLOCK = 138
VK_FORMAT_BC4_UNORM_BLOCK = 139
VK_FORMAT_BC4_SNORM_BLOCK = 140
VK_FORMAT_BC5_UNORM_BLOCK = 141
VK_FORMAT_BC5_SNORM_BLOCK = 142
VK_FORMAT_BC6H_UFLOAT_BLOCK = 143
VK_FORMAT_BC6H_SFLOAT_BLOCK = 144
VK_FORMAT_BC7_UNORM_BLOCK = 145
VK_FORMAT_BC7_SRGB_BLOCK = 146
VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147
VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148
VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149
VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150
VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151
VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152
VK_FORMAT_EAC_R11_UNORM_BLOCK = 153
VK_FORMAT_EAC_R11_SNORM_BLOCK = 154
VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155
VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156
VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157
VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158
VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159
VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160
VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161
VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162
VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163
VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164
VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165
VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166
VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167
VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168
VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169
VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170
VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171
VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172
VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173
VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174
VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175
VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176
VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177
VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178
VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179
VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180
VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181
VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182
VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183
VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000
VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001
VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002
VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003
VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004
VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005
VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006
VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007
VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008
VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009
VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010
VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015
VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016
VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017
VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018
VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019
VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020
VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025
VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026
VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027
VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028
VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029
VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030
VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031
VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032
VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033
VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000
VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001
VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002
VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003
VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000
VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001
VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000
VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001
VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002
VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003
VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004
VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005
VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006
VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007
VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008
VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009
VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010
VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011
VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012
VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013
VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000
VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001
VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002
VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003
VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004
VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005
VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006
VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007
VK_FORMAT_MAX_ENUM = 2147483647
VK_IMAGE_TILING_OPTIMAL = 0
VK_IMAGE_TILING_LINEAR = 1
VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000
VK_IMAGE_TILING_MAX_ENUM = 2147483647
VK_IMAGE_TYPE_1D = 0
VK_IMAGE_TYPE_2D = 1
VK_IMAGE_TYPE_3D = 2
VK_IMAGE_TYPE_MAX_ENUM = 2147483647
VK_PHYSICAL_DEVICE_TYPE_OTHER = 0
VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1
VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2
VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3
VK_PHYSICAL_DEVICE_TYPE_CPU = 4
VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 2147483647
VK_QUERY_TYPE_OCCLUSION = 0
VK_QUERY_TYPE_PIPELINE_STATISTICS = 1
VK_QUERY_TYPE_TIMESTAMP = 2
VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004
VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001
VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000
VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000
VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT = 1000382000
VK_QUERY_TYPE_MAX_ENUM = 2147483647
VK_SHARING_MODE_EXCLUSIVE = 0
VK_SHARING_MODE_CONCURRENT = 1
VK_SHARING_MODE_MAX_ENUM = 2147483647
VK_COMPONENT_SWIZZLE_IDENTITY = 0
VK_COMPONENT_SWIZZLE_ZERO = 1
VK_COMPONENT_SWIZZLE_ONE = 2
VK_COMPONENT_SWIZZLE_R = 3
VK_COMPONENT_SWIZZLE_G = 4
VK_COMPONENT_SWIZZLE_B = 5
VK_COMPONENT_SWIZZLE_A = 6
VK_COMPONENT_SWIZZLE_MAX_ENUM = 2147483647
VK_IMAGE_VIEW_TYPE_1D = 0
VK_IMAGE_VIEW_TYPE_2D = 1
VK_IMAGE_VIEW_TYPE_3D = 2
VK_IMAGE_VIEW_TYPE_CUBE = 3
VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4
VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5
VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
VK_IMAGE_VIEW_TYPE_MAX_ENUM = 2147483647
VK_BLEND_FACTOR_ZERO = 0
VK_BLEND_FACTOR_ONE = 1
VK_BLEND_FACTOR_SRC_COLOR = 2
VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3
VK_BLEND_FACTOR_DST_COLOR = 4
VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5
VK_BLEND_FACTOR_SRC_ALPHA = 6
VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7
VK_BLEND_FACTOR_DST_ALPHA = 8
VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9
VK_BLEND_FACTOR_CONSTANT_COLOR = 10
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11
VK_BLEND_FACTOR_CONSTANT_ALPHA = 12
VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13
VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14
VK_BLEND_FACTOR_SRC1_COLOR = 15
VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16
VK_BLEND_FACTOR_SRC1_ALPHA = 17
VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
VK_BLEND_FACTOR_MAX_ENUM = 2147483647
VK_BLEND_OP_ADD = 0
VK_BLEND_OP_SUBTRACT = 1
VK_BLEND_OP_REVERSE_SUBTRACT = 2
VK_BLEND_OP_MIN = 3
VK_BLEND_OP_MAX = 4
VK_BLEND_OP_ZERO_EXT = 1000148000
VK_BLEND_OP_SRC_EXT = 1000148001
VK_BLEND_OP_DST_EXT = 1000148002
VK_BLEND_OP_SRC_OVER_EXT = 1000148003
VK_BLEND_OP_DST_OVER_EXT = 1000148004
VK_BLEND_OP_SRC_IN_EXT = 1000148005
VK_BLEND_OP_DST_IN_EXT = 1000148006
VK_BLEND_OP_SRC_OUT_EXT = 1000148007
VK_BLEND_OP_DST_OUT_EXT = 1000148008
VK_BLEND_OP_SRC_ATOP_EXT = 1000148009
VK_BLEND_OP_DST_ATOP_EXT = 1000148010
VK_BLEND_OP_XOR_EXT = 1000148011
VK_BLEND_OP_MULTIPLY_EXT = 1000148012
VK_BLEND_OP_SCREEN_EXT = 1000148013
VK_BLEND_OP_OVERLAY_EXT = 1000148014
VK_BLEND_OP_DARKEN_EXT = 1000148015
VK_BLEND_OP_LIGHTEN_EXT = 1000148016
VK_BLEND_OP_COLORDODGE_EXT = 1000148017
VK_BLEND_OP_COLORBURN_EXT = 1000148018
VK_BLEND_OP_HARDLIGHT_EXT = 1000148019
VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020
VK_BLEND_OP_DIFFERENCE_EXT = 1000148021
VK_BLEND_OP_EXCLUSION_EXT = 1000148022
VK_BLEND_OP_INVERT_EXT = 1000148023
VK_BLEND_OP_INVERT_RGB_EXT = 1000148024
VK_BLEND_OP_LINEARDODGE_EXT = 1000148025
VK_BLEND_OP_LINEARBURN_EXT = 1000148026
VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027
VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028
VK_BLEND_OP_PINLIGHT_EXT = 1000148029
VK_BLEND_OP_HARDMIX_EXT = 1000148030
VK_BLEND_OP_HSL_HUE_EXT = 1000148031
VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032
VK_BLEND_OP_HSL_COLOR_EXT = 1000148033
VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034
VK_BLEND_OP_PLUS_EXT = 1000148035
VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036
VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037
VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038
VK_BLEND_OP_MINUS_EXT = 1000148039
VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040
VK_BLEND_OP_CONTRAST_EXT = 1000148041
VK_BLEND_OP_INVERT_OVG_EXT = 1000148042
VK_BLEND_OP_RED_EXT = 1000148043
VK_BLEND_OP_GREEN_EXT = 1000148044
VK_BLEND_OP_BLUE_EXT = 1000148045
VK_BLEND_OP_MAX_ENUM = 2147483647
VK_COMPARE_OP_NEVER = 0
VK_COMPARE_OP_LESS = 1
VK_COMPARE_OP_EQUAL = 2
VK_COMPARE_OP_LESS_OR_EQUAL = 3
VK_COMPARE_OP_GREATER = 4
VK_COMPARE_OP_NOT_EQUAL = 5
VK_COMPARE_OP_GREATER_OR_EQUAL = 6
VK_COMPARE_OP_ALWAYS = 7
VK_COMPARE_OP_MAX_ENUM = 2147483647
VK_DYNAMIC_STATE_VIEWPORT = 0
VK_DYNAMIC_STATE_SCISSOR = 1
VK_DYNAMIC_STATE_LINE_WIDTH = 2
VK_DYNAMIC_STATE_DEPTH_BIAS = 3
VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4
VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5
VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6
VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7
VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
VK_DYNAMIC_STATE_CULL_MODE = 1000267000
VK_DYNAMIC_STATE_FRONT_FACE = 1000267001
VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002
VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003
VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004
VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005
VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006
VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007
VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008
VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009
VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010
VK_DYNAMIC_STATE_STENCIL_OP = 1000267011
VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001
VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002
VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004
VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000
VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000
VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000
VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000
VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004
VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006
VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001
VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000
VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000
VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000
VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000
VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003
VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000
VK_DYNAMIC_STATE_MAX_ENUM = 2147483647
VK_FRONT_FACE_COUNTER_CLOCKWISE = 0
VK_FRONT_FACE_CLOCKWISE = 1
VK_FRONT_FACE_MAX_ENUM = 2147483647
VK_VERTEX_INPUT_RATE_VERTEX = 0
VK_VERTEX_INPUT_RATE_INSTANCE = 1
VK_VERTEX_INPUT_RATE_MAX_ENUM = 2147483647
VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0
VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5
VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6
VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8
VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9
VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 2147483647
VK_POLYGON_MODE_FILL = 0
VK_POLYGON_MODE_LINE = 1
VK_POLYGON_MODE_POINT = 2
VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000
VK_POLYGON_MODE_MAX_ENUM = 2147483647
VK_STENCIL_OP_KEEP = 0
VK_STENCIL_OP_ZERO = 1
VK_STENCIL_OP_REPLACE = 2
VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3
VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4
VK_STENCIL_OP_INVERT = 5
VK_STENCIL_OP_INCREMENT_AND_WRAP = 6
VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
VK_STENCIL_OP_MAX_ENUM = 2147483647
VK_LOGIC_OP_CLEAR = 0
VK_LOGIC_OP_AND = 1
VK_LOGIC_OP_AND_REVERSE = 2
VK_LOGIC_OP_COPY = 3
VK_LOGIC_OP_AND_INVERTED = 4
VK_LOGIC_OP_NO_OP = 5
VK_LOGIC_OP_XOR = 6
VK_LOGIC_OP_OR = 7
VK_LOGIC_OP_NOR = 8
VK_LOGIC_OP_EQUIVALENT = 9
VK_LOGIC_OP_INVERT = 10
VK_LOGIC_OP_OR_REVERSE = 11
VK_LOGIC_OP_COPY_INVERTED = 12
VK_LOGIC_OP_OR_INVERTED = 13
VK_LOGIC_OP_NAND = 14
VK_LOGIC_OP_SET = 15
VK_LOGIC_OP_MAX_ENUM = 2147483647
VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0
VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1
VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2
VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3
VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4
VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003
VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004
VK_BORDER_COLOR_MAX_ENUM = 2147483647
VK_FILTER_NEAREST = 0
VK_FILTER_LINEAR = 1
VK_FILTER_CUBIC_IMG = 1000015000
VK_FILTER_MAX_ENUM = 2147483647
VK_SAMPLER_ADDRESS_MODE_REPEAT = 0
VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2
VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4
VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 2147483647
VK_SAMPLER_MIPMAP_MODE_NEAREST = 0
VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 2147483647
VK_DESCRIPTOR_TYPE_SAMPLER = 0
VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1
VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2
VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3
VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4
VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7
VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8
VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9
VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000
VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000
VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000
VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000
VK_DESCRIPTOR_TYPE_MAX_ENUM = 2147483647
VK_ATTACHMENT_LOAD_OP_LOAD = 0
VK_ATTACHMENT_LOAD_OP_CLEAR = 1
VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000
VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 2147483647
VK_ATTACHMENT_STORE_OP_STORE = 0
VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
VK_ATTACHMENT_STORE_OP_NONE = 1000301000
VK_ATTACHMENT_STORE_OP_MAX_ENUM = 2147483647
VK_PIPELINE_BIND_POINT_GRAPHICS = 0
VK_PIPELINE_BIND_POINT_COMPUTE = 1
VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000
VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003
VK_PIPELINE_BIND_POINT_MAX_ENUM = 2147483647
VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0
VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 2147483647
VK_INDEX_TYPE_UINT16 = 0
VK_INDEX_TYPE_UINT32 = 1
VK_INDEX_TYPE_NONE_KHR = 1000165000
VK_INDEX_TYPE_UINT8_EXT = 1000265000
VK_INDEX_TYPE_MAX_ENUM = 2147483647
VK_SUBPASS_CONTENTS_INLINE = 0
VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
VK_SUBPASS_CONTENTS_MAX_ENUM = 2147483647
VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 1
VK_ACCESS_INDEX_READ_BIT = 2
VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 4
VK_ACCESS_UNIFORM_READ_BIT = 8
VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 16
VK_ACCESS_SHADER_READ_BIT = 32
VK_ACCESS_SHADER_WRITE_BIT = 64
VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 128
VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 256
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 512
VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 1024
VK_ACCESS_TRANSFER_READ_BIT = 2048
VK_ACCESS_TRANSFER_WRITE_BIT = 4096
VK_ACCESS_HOST_READ_BIT = 8192
VK_ACCESS_HOST_WRITE_BIT = 16384
VK_ACCESS_MEMORY_READ_BIT = 32768
VK_ACCESS_MEMORY_WRITE_BIT = 65536
VK_ACCESS_NONE = 0
VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 33554432
VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 67108864
VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 134217728
VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 1048576
VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 524288
VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 2097152
VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 4194304
VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 16777216
VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 8388608
VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 131072
VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 262144
VK_ACCESS_FLAG_BITS_MAX_ENUM = 2147483647
VK_IMAGE_ASPECT_COLOR_BIT = 1
VK_IMAGE_ASPECT_DEPTH_BIT = 2
VK_IMAGE_ASPECT_STENCIL_BIT = 4
VK_IMAGE_ASPECT_METADATA_BIT = 8
VK_IMAGE_ASPECT_PLANE_0_BIT = 16
VK_IMAGE_ASPECT_PLANE_1_BIT = 32
VK_IMAGE_ASPECT_PLANE_2_BIT = 64
VK_IMAGE_ASPECT_NONE = 0
VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 128
VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 256
VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 512
VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 1024
VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 2147483647
VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 1
VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 2
VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 4
VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 8
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 16
VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 32
VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 64
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 128
VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 256
VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 512
VK_FORMAT_FEATURE_BLIT_SRC_BIT = 1024
VK_FORMAT_FEATURE_BLIT_DST_BIT = 2048
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 4096
VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 16384
VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 32768
VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 131072
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 262144
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 524288
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 1048576
VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 2097152
VK_FORMAT_FEATURE_DISJOINT_BIT = 4194304
VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 8388608
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 65536
VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 8192
VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 536870912
VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 16777216
VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 1073741824
VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 1
VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 2
VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 4
VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 8
VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 16
VK_IMAGE_CREATE_ALIAS_BIT = 1024
VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 64
VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 32
VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 128
VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 256
VK_IMAGE_CREATE_PROTECTED_BIT = 2048
VK_IMAGE_CREATE_DISJOINT_BIT = 512
VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 8192
VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 4096
VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 16384
VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT = 131072
VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 32768
VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_SAMPLE_COUNT_1_BIT = 1
VK_SAMPLE_COUNT_2_BIT = 2
VK_SAMPLE_COUNT_4_BIT = 4
VK_SAMPLE_COUNT_8_BIT = 8
VK_SAMPLE_COUNT_16_BIT = 16
VK_SAMPLE_COUNT_32_BIT = 32
VK_SAMPLE_COUNT_64_BIT = 64
VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 2147483647
VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 1
VK_IMAGE_USAGE_TRANSFER_DST_BIT = 2
VK_IMAGE_USAGE_SAMPLED_BIT = 4
VK_IMAGE_USAGE_STORAGE_BIT = 8
VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16
VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32
VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64
VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128
VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 512
VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 256
VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 262144
VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR = 1
VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 1
VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 2
VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 2147483647
VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 1
VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 2
VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 4
VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 8
VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 16
VK_MEMORY_PROPERTY_PROTECTED_BIT = 32
VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 64
VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 128
VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 256
VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 2147483647
VK_QUEUE_GRAPHICS_BIT = 1
VK_QUEUE_COMPUTE_BIT = 2
VK_QUEUE_TRANSFER_BIT = 4
VK_QUEUE_SPARSE_BINDING_BIT = 8
VK_QUEUE_PROTECTED_BIT = 16
VK_QUEUE_FLAG_BITS_MAX_ENUM = 2147483647
VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 1
VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 1
VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 2
VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 4
VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 8
VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 16
VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 32
VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 64
VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 128
VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 256
VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 512
VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 1024
VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 2048
VK_PIPELINE_STAGE_TRANSFER_BIT = 4096
VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 8192
VK_PIPELINE_STAGE_HOST_BIT = 16384
VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 32768
VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 65536
VK_PIPELINE_STAGE_NONE = 0
VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 16777216
VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 262144
VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 33554432
VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 2097152
VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 524288
VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 1048576
VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 8388608
VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 4194304
VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 131072
VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
VK_SPARSE_MEMORY_BIND_METADATA_BIT = 1
VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 2147483647
VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 1
VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 2
VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 4
VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 2147483647
VK_FENCE_CREATE_SIGNALED_BIT = 1
VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_EVENT_CREATE_DEVICE_ONLY_BIT = 1
VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 1
VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 2
VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 4
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 8
VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 16
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 32
VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 64
VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 128
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 256
VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 512
VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 1024
VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 2147483647
VK_QUERY_RESULT_64_BIT = 1
VK_QUERY_RESULT_WAIT_BIT = 2
VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 4
VK_QUERY_RESULT_PARTIAL_BIT = 8
VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 2147483647
VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 1
VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 2
VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 4
VK_BUFFER_CREATE_PROTECTED_BIT = 8
VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 16
VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 1
VK_BUFFER_USAGE_TRANSFER_DST_BIT = 2
VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 4
VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 8
VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 16
VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 32
VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 64
VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1
VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_COLOR_COMPONENT_R_BIT = 1
VK_COLOR_COMPONENT_G_BIT = 2
VK_COLOR_COMPONENT_B_BIT = 4
VK_COLOR_COMPONENT_A_BIT = 8
VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256
VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512
VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608
VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024
VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576
VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1
VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2
VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_SHADER_STAGE_VERTEX_BIT = 1
VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
VK_SHADER_STAGE_GEOMETRY_BIT = 8
VK_SHADER_STAGE_FRAGMENT_BIT = 16
VK_SHADER_STAGE_COMPUTE_BIT = 32
VK_SHADER_STAGE_ALL_GRAPHICS = 31
VK_SHADER_STAGE_ALL = 2147483647
VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256
VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512
VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
VK_SHADER_STAGE_MISS_BIT_KHR = 2048
VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
VK_SHADER_STAGE_TASK_BIT_NV = 64
VK_SHADER_STAGE_MESH_BIT_NV = 128
VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384
VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
VK_CULL_MODE_NONE = 0
VK_CULL_MODE_FRONT_BIT = 1
VK_CULL_MODE_BACK_BIT = 2
VK_CULL_MODE_FRONT_AND_BACK = 3
VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2
VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1
VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2
VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
VK_DEPENDENCY_BY_REGION_BIT = 1
VK_DEPENDENCY_DEVICE_GROUP_BIT = 4
VK_DEPENDENCY_VIEW_LOCAL_BIT = 2
VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32
VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64
VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4
VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
VK_QUERY_CONTROL_PRECISE_BIT = 1
VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
VK_STENCIL_FACE_FRONT_BIT = 1
VK_STENCIL_FACE_BACK_BIT = 2
VK_STENCIL_FACE_FRONT_AND_BACK = 3
VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
VK_CHROMA_LOCATION_COSITED_EVEN = 0
VK_CHROMA_LOCATION_MIDPOINT = 1
VK_CHROMA_LOCATION_MAX_ENUM = 2147483647
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
VK_SUBGROUP_FEATURE_BASIC_BIT = 1
VK_SUBGROUP_FEATURE_VOTE_BIT = 2
VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
VK_SUBGROUP_FEATURE_BALLOT_BIT = 8
VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16
VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64
VK_SUBGROUP_FEATURE_QUAD_BIT = 128
VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096
VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VK_FENCE_IMPORT_TEMPORARY_BIT = 1
VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
VK_DRIVER_ID_AMD_PROPRIETARY = 1
VK_DRIVER_ID_AMD_OPEN_SOURCE = 2
VK_DRIVER_ID_MESA_RADV = 3
VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4
VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7
VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8
VK_DRIVER_ID_ARM_PROPRIETARY = 9
VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10
VK_DRIVER_ID_GGP_PROPRIETARY = 11
VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12
VK_DRIVER_ID_MESA_LLVMPIPE = 13
VK_DRIVER_ID_MOLTENVK = 14
VK_DRIVER_ID_COREAVI_PROPRIETARY = 15
VK_DRIVER_ID_JUICE_PROPRIETARY = 16
VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17
VK_DRIVER_ID_MESA_TURNIP = 18
VK_DRIVER_ID_MESA_V3DV = 19
VK_DRIVER_ID_MESA_PANVK = 20
VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21
VK_DRIVER_ID_MESA_VENUS = 22
VK_DRIVER_ID_MAX_ENUM = 2147483647
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647
VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
VK_SAMPLER_REDUCTION_MODE_MIN = 1
VK_SAMPLER_REDUCTION_MODE_MAX = 2
VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647
VK_SEMAPHORE_TYPE_BINARY = 0
VK_SEMAPHORE_TYPE_TIMELINE = 1
VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647
VK_RESOLVE_MODE_NONE = 0
VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
VK_RESOLVE_MODE_AVERAGE_BIT = 2
VK_RESOLVE_MODE_MIN_BIT = 4
VK_RESOLVE_MODE_MAX_BIT = 8
VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647
VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647
VK_SEMAPHORE_WAIT_ANY_BIT = 1
VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647
VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1
VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2
VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4
VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647
VK_TOOL_PURPOSE_VALIDATION_BIT = 1
VK_TOOL_PURPOSE_PROFILING_BIT = 2
VK_TOOL_PURPOSE_TRACING_BIT = 4
VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8
VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16
VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647
VK_SUBMIT_PROTECTED_BIT = 1
VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647
VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1
VK_RENDERING_SUSPENDING_BIT = 2
VK_RENDERING_RESUMING_BIT = 4
VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647
VK_PRESENT_MODE_IMMEDIATE_KHR = 0
VK_PRESENT_MODE_MAILBOX_KHR = 1
VK_PRESENT_MODE_FIFO_KHR = 2
VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647
VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647
VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647
VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128
VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256
VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512
VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024
VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647
VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000
VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001
VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000
VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16
VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VK_RASTERIZATION_ORDER_STRICT_AMD = 0
VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
VK_SHADER_INFO_TYPE_BINARY_AMD = 1
VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VK_VALIDATION_CHECK_ALL_EXT = 0
VK_VALIDATION_CHECK_SHADERS_EXT = 1
VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1
VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VK_DISPLAY_POWER_STATE_OFF_EXT = 0
VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
VK_DISPLAY_POWER_STATE_ON_EXT = 2
VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
VK_BLEND_OVERLAP_DISJOINT_EXT = 1
VK_BLEND_OVERLAP_CONJOINT_EXT = 2
VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647
VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647
VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647
VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0
VK_GEOMETRY_TYPE_AABBS_KHR = 1
VK_GEOMETRY_TYPE_INSTANCES_KHR = 2
VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647
VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647
VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647
VK_GEOMETRY_OPAQUE_BIT_KHR = 1
VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2
VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32
VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647
VK_TIME_DOMAIN_DEVICE_EXT = 0
VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
VK_TIME_DOMAIN_MAX_ENUM_EXT = 2147483647
VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647
VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647
VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647
VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647
VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647
VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647
VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647
VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647
VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7
VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647
VK_COMPONENT_TYPE_FLOAT16_NV = 0
VK_COMPONENT_TYPE_FLOAT32_NV = 1
VK_COMPONENT_TYPE_FLOAT64_NV = 2
VK_COMPONENT_TYPE_SINT8_NV = 3
VK_COMPONENT_TYPE_SINT16_NV = 4
VK_COMPONENT_TYPE_SINT32_NV = 5
VK_COMPONENT_TYPE_SINT64_NV = 6
VK_COMPONENT_TYPE_UINT8_NV = 7
VK_COMPONENT_TYPE_UINT16_NV = 8
VK_COMPONENT_TYPE_UINT32_NV = 9
VK_COMPONENT_TYPE_UINT64_NV = 10
VK_COMPONENT_TYPE_MAX_ENUM_NV = 2147483647
VK_SCOPE_DEVICE_NV = 1
VK_SCOPE_WORKGROUP_NV = 2
VK_SCOPE_SUBGROUP_NV = 3
VK_SCOPE_QUEUE_FAMILY_NV = 5
VK_SCOPE_MAX_ENUM_NV = 2147483647
VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0
VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647
VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647
VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647
VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647
VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1
VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2
VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4
VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8
VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2
VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647
VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0
VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 2147483647
VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0
VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 2147483647
VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 1
VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 4
VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0
VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1
VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2
VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 2147483647
VkBuffer_T =  c_void_p 
VkImage_T =  c_void_p 
VkInstance_T =  c_void_p 
VkPhysicalDevice_T =  c_void_p 
VkDevice_T =  c_void_p 
VkQueue_T =  c_void_p 
VkSemaphore_T =  c_void_p 
VkCommandBuffer_T =  c_void_p 
VkFence_T =  c_void_p 
VkDeviceMemory_T =  c_void_p 
VkEvent_T =  c_void_p 
VkQueryPool_T =  c_void_p 
VkBufferView_T =  c_void_p 
VkImageView_T =  c_void_p 
VkShaderModule_T =  c_void_p 
VkPipelineCache_T =  c_void_p 
VkPipelineLayout_T =  c_void_p 
VkPipeline_T =  c_void_p 
VkRenderPass_T =  c_void_p 
VkDescriptorSetLayout_T =  c_void_p 
VkSampler_T =  c_void_p 
VkDescriptorSet_T =  c_void_p 
VkDescriptorPool_T =  c_void_p 
VkFramebuffer_T =  c_void_p 
VkCommandPool_T =  c_void_p 
VkSamplerYcbcrConversion_T =  c_void_p 
VkDescriptorUpdateTemplate_T =  c_void_p 
VkPrivateDataSlot_T =  c_void_p 
VkSurfaceKHR_T =  c_void_p 
VkSwapchainKHR_T =  c_void_p 
VkDisplayKHR_T =  c_void_p 
VkDisplayModeKHR_T =  c_void_p 
VkDeferredOperationKHR_T =  c_void_p 
VkDebugReportCallbackEXT_T =  c_void_p 
VkCuModuleNVX_T =  c_void_p 
VkCuFunctionNVX_T =  c_void_p 
VkDebugUtilsMessengerEXT_T =  c_void_p 
VkValidationCacheEXT_T =  c_void_p 
VkAccelerationStructureNV_T =  c_void_p 
VkPerformanceConfigurationINTEL_T =  c_void_p 
VkIndirectCommandsLayoutNV_T =  c_void_p 
VkAccelerationStructureKHR_T =  c_void_p 
class VkExtent2D(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("width"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.width))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("height"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.height))
            except: 
                pass
        self.JKEY = modval
VkExtent2D._fields_ = [
    ("width", c_uint),
    ("height", c_uint)
    ]

class VkExtent3D(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("width"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.width))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("height"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.height))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depth))
            except: 
                pass
        self.JKEY = modval
VkExtent3D._fields_ = [
    ("width", c_uint),
    ("height", c_uint),
    ("depth", c_uint)
    ]

class VkOffset2D(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
VkOffset2D._fields_ = [
    ("x", c_int),
    ("y", c_int)
    ]

class VkOffset3D(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("z"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.z))
            except: 
                pass
        self.JKEY = modval
VkOffset3D._fields_ = [
    ("x", c_int),
    ("y", c_int),
    ("z", c_int)
    ]

class VkRect2D(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
VkRect2D._fields_ = [
    ("offset", VkOffset2D),
    ("extent", VkExtent2D)
    ]

class VkBaseInStructure(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
VkBaseInStructure._fields_ = [
    ("sType", c_int),
    ("pNext", POINTER(VkBaseInStructure))
    ]

class VkBaseOutStructure(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
VkBaseOutStructure._fields_ = [
    ("sType", c_int),
    ("pNext", POINTER(VkBaseOutStructure))
    ]

class VkBufferMemoryBarrier(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkBufferMemoryBarrier._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcAccessMask", c_uint),
    ("dstAccessMask", c_uint),
    ("srcQueueFamilyIndex", c_uint),
    ("dstQueueFamilyIndex", c_uint),
    ("buffer", VkBuffer_T),
    ("offset", c_ulong),
    ("size", c_ulong)
    ]

class VkDispatchIndirectCommand(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("z"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.z))
            except: 
                pass
        self.JKEY = modval
VkDispatchIndirectCommand._fields_ = [
    ("x", c_uint),
    ("y", c_uint),
    ("z", c_uint)
    ]

class VkDrawIndexedIndirectCommand(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("indexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("firstIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("firstInstance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstInstance))
            except: 
                pass
        self.JKEY = modval
VkDrawIndexedIndirectCommand._fields_ = [
    ("indexCount", c_uint),
    ("instanceCount", c_uint),
    ("firstIndex", c_uint),
    ("vertexOffset", c_int),
    ("firstInstance", c_uint)
    ]

class VkDrawIndirectCommand(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("vertexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("firstVertex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstVertex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("firstInstance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstInstance))
            except: 
                pass
        self.JKEY = modval
VkDrawIndirectCommand._fields_ = [
    ("vertexCount", c_uint),
    ("instanceCount", c_uint),
    ("firstVertex", c_uint),
    ("firstInstance", c_uint)
    ]

class VkImageSubresourceRange(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("baseMipLevel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.baseMipLevel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("levelCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.levelCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("baseArrayLayer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.baseArrayLayer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layerCount))
            except: 
                pass
        self.JKEY = modval
VkImageSubresourceRange._fields_ = [
    ("aspectMask", c_uint),
    ("baseMipLevel", c_uint),
    ("levelCount", c_uint),
    ("baseArrayLayer", c_uint),
    ("layerCount", c_uint)
    ]

class VkImageMemoryBarrier(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("oldLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.oldLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("newLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.newLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subresourceRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subresourceRange))
            except: 
                pass
        self.JKEY = modval
VkImageMemoryBarrier._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcAccessMask", c_uint),
    ("dstAccessMask", c_uint),
    ("oldLayout", c_int),
    ("newLayout", c_int),
    ("srcQueueFamilyIndex", c_uint),
    ("dstQueueFamilyIndex", c_uint),
    ("image", VkImage_T),
    ("subresourceRange", VkImageSubresourceRange)
    ]

class VkMemoryBarrier(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
VkMemoryBarrier._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcAccessMask", c_uint),
    ("dstAccessMask", c_uint)
    ]

class VkPipelineCacheHeaderVersionOne(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("headerSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.headerSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("headerVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.headerVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vendorID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vendorID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineCacheUUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineCacheUUID))
            except: 
                pass
        self.JKEY = modval
VkPipelineCacheHeaderVersionOne._fields_ = [
    ("headerSize", c_uint),
    ("headerVersion", c_int),
    ("vendorID", c_uint),
    ("deviceID", c_uint),
    ("pipelineCacheUUID", c_ubyte *16)
    ]

class VkAllocationCallbacks(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("pUserData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pUserData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnReallocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnReallocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnFree"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnFree))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnInternalAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnInternalAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnInternalFree"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnInternalFree))
            except: 
                pass
        self.JKEY = modval
VkAllocationCallbacks._fields_ = [
    ("pUserData", c_void_p),
    ("pfnAllocation", c_void_p),
    ("pfnReallocation", c_void_p),
    ("pfnFree", c_void_p),
    ("pfnInternalAllocation", c_void_p),
    ("pfnInternalFree", c_void_p)
    ]

class VkApplicationInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pApplicationName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pApplicationName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("applicationVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.applicationVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pEngineName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pEngineName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("engineVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.engineVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("apiVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.apiVersion))
            except: 
                pass
        self.JKEY = modval
VkApplicationInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pApplicationName", c_char_p),
    ("applicationVersion", c_uint),
    ("pEngineName", c_char_p),
    ("engineVersion", c_uint),
    ("apiVersion", c_uint)
    ]

class VkFormatProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("linearTilingFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.linearTilingFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("optimalTilingFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.optimalTilingFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferFeatures))
            except: 
                pass
        self.JKEY = modval
VkFormatProperties._fields_ = [
    ("linearTilingFeatures", c_uint),
    ("optimalTilingFeatures", c_uint),
    ("bufferFeatures", c_uint)
    ]

class VkImageFormatProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("maxExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMipLevels"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMipLevels))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxArrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxArrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxResourceSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxResourceSize))
            except: 
                pass
        self.JKEY = modval
VkImageFormatProperties._fields_ = [
    ("maxExtent", VkExtent3D),
    ("maxMipLevels", c_uint),
    ("maxArrayLayers", c_uint),
    ("sampleCounts", c_uint),
    ("maxResourceSize", c_ulong)
    ]

class VkInstanceCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pApplicationInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pApplicationInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("enabledLayerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.enabledLayerCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ppEnabledLayerNames"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ppEnabledLayerNames))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("enabledExtensionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.enabledExtensionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ppEnabledExtensionNames"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ppEnabledExtensionNames))
            except: 
                pass
        self.JKEY = modval
VkInstanceCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pApplicationInfo", VkApplicationInfo),
    ("enabledLayerCount", c_uint),
    ("ppEnabledLayerNames", POINTER(c_byte)),
    ("enabledExtensionCount", c_uint),
    ("ppEnabledExtensionNames", POINTER(c_byte))
    ]

class VkMemoryHeap(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkMemoryHeap._fields_ = [
    ("size", c_ulong),
    ("flags", c_uint)
    ]

class VkMemoryType(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("propertyFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.propertyFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("heapIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.heapIndex))
            except: 
                pass
        self.JKEY = modval
VkMemoryType._fields_ = [
    ("propertyFlags", c_uint),
    ("heapIndex", c_uint)
    ]

class VkPhysicalDeviceFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("robustBufferAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustBufferAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fullDrawIndexUint32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fullDrawIndexUint32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageCubeArray"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageCubeArray))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("independentBlend"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.independentBlend))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometryShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometryShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tessellationShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tessellationShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleRateShading"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleRateShading))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dualSrcBlend"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dualSrcBlend))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("logicOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.logicOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiDrawIndirect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiDrawIndirect))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drawIndirectFirstInstance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drawIndirectFirstInstance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthClamp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthClamp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBiasClamp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBiasClamp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fillModeNonSolid"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fillModeNonSolid))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBounds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBounds))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("wideLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.wideLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("largePoints"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.largePoints))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("alphaToOne"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.alphaToOne))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiViewport"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiViewport))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samplerAnisotropy"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samplerAnisotropy))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("textureCompressionETC2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.textureCompressionETC2))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("textureCompressionASTC_LDR"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.textureCompressionASTC_LDR))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("textureCompressionBC"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.textureCompressionBC))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("occlusionQueryPrecise"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.occlusionQueryPrecise))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineStatisticsQuery"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineStatisticsQuery))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexPipelineStoresAndAtomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexPipelineStoresAndAtomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentStoresAndAtomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentStoresAndAtomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderTessellationAndGeometryPointSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderTessellationAndGeometryPointSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderImageGatherExtended"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderImageGatherExtended))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageExtendedFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageExtendedFormats))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageMultisample"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageMultisample))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageReadWithoutFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageReadWithoutFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageWriteWithoutFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageWriteWithoutFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformBufferArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformBufferArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSampledImageArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSampledImageArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageBufferArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageBufferArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderClipDistance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderClipDistance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderCullDistance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderCullDistance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInt64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInt64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInt16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInt16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderResourceResidency"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderResourceResidency))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderResourceMinLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderResourceMinLod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseBinding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseBinding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidencyBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidencyBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidencyImage2D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidencyImage2D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidencyImage3D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidencyImage3D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidency2Samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidency2Samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidency4Samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidency4Samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidency8Samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidency8Samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidency16Samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidency16Samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseResidencyAliased"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseResidencyAliased))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("variableMultisampleRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.variableMultisampleRate))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inheritedQueries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inheritedQueries))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFeatures._fields_ = [
    ("robustBufferAccess", c_uint),
    ("fullDrawIndexUint32", c_uint),
    ("imageCubeArray", c_uint),
    ("independentBlend", c_uint),
    ("geometryShader", c_uint),
    ("tessellationShader", c_uint),
    ("sampleRateShading", c_uint),
    ("dualSrcBlend", c_uint),
    ("logicOp", c_uint),
    ("multiDrawIndirect", c_uint),
    ("drawIndirectFirstInstance", c_uint),
    ("depthClamp", c_uint),
    ("depthBiasClamp", c_uint),
    ("fillModeNonSolid", c_uint),
    ("depthBounds", c_uint),
    ("wideLines", c_uint),
    ("largePoints", c_uint),
    ("alphaToOne", c_uint),
    ("multiViewport", c_uint),
    ("samplerAnisotropy", c_uint),
    ("textureCompressionETC2", c_uint),
    ("textureCompressionASTC_LDR", c_uint),
    ("textureCompressionBC", c_uint),
    ("occlusionQueryPrecise", c_uint),
    ("pipelineStatisticsQuery", c_uint),
    ("vertexPipelineStoresAndAtomics", c_uint),
    ("fragmentStoresAndAtomics", c_uint),
    ("shaderTessellationAndGeometryPointSize", c_uint),
    ("shaderImageGatherExtended", c_uint),
    ("shaderStorageImageExtendedFormats", c_uint),
    ("shaderStorageImageMultisample", c_uint),
    ("shaderStorageImageReadWithoutFormat", c_uint),
    ("shaderStorageImageWriteWithoutFormat", c_uint),
    ("shaderUniformBufferArrayDynamicIndexing", c_uint),
    ("shaderSampledImageArrayDynamicIndexing", c_uint),
    ("shaderStorageBufferArrayDynamicIndexing", c_uint),
    ("shaderStorageImageArrayDynamicIndexing", c_uint),
    ("shaderClipDistance", c_uint),
    ("shaderCullDistance", c_uint),
    ("shaderFloat64", c_uint),
    ("shaderInt64", c_uint),
    ("shaderInt16", c_uint),
    ("shaderResourceResidency", c_uint),
    ("shaderResourceMinLod", c_uint),
    ("sparseBinding", c_uint),
    ("sparseResidencyBuffer", c_uint),
    ("sparseResidencyImage2D", c_uint),
    ("sparseResidencyImage3D", c_uint),
    ("sparseResidency2Samples", c_uint),
    ("sparseResidency4Samples", c_uint),
    ("sparseResidency8Samples", c_uint),
    ("sparseResidency16Samples", c_uint),
    ("sparseResidencyAliased", c_uint),
    ("variableMultisampleRate", c_uint),
    ("inheritedQueries", c_uint)
    ]

class VkPhysicalDeviceLimits(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("maxImageDimension1D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageDimension1D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageDimension2D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageDimension2D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageDimension3D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageDimension3D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageDimensionCube"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageDimensionCube))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageArrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageArrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTexelBufferElements"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTexelBufferElements))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxUniformBufferRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxUniformBufferRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxStorageBufferRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxStorageBufferRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPushConstantsSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPushConstantsSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMemoryAllocationCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMemoryAllocationCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSamplerAllocationCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSamplerAllocationCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferImageGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferImageGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseAddressSpaceSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseAddressSpaceSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxBoundDescriptorSets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxBoundDescriptorSets))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorSamplers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUniformBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUniformBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorStorageBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorStorageBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorSampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorSampledImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorStorageImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorStorageImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageResources"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageResources))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetSamplers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUniformBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUniformBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUniformBuffersDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUniformBuffersDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetStorageBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetStorageBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetStorageBuffersDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetStorageBuffersDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetSampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetSampledImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetStorageImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetStorageImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertexInputAttributes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertexInputAttributes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertexInputBindings"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertexInputBindings))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertexInputAttributeOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertexInputAttributeOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertexInputBindingStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertexInputBindingStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertexOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertexOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationGenerationLevel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationGenerationLevel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationPatchSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationPatchSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationControlPerVertexInputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationControlPerVertexInputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationControlPerVertexOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationControlPerVertexOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationControlPerPatchOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationControlPerPatchOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationControlTotalOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationControlTotalOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationEvaluationInputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationEvaluationInputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTessellationEvaluationOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTessellationEvaluationOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryShaderInvocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryShaderInvocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryInputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryInputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryOutputVertices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryOutputVertices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryTotalOutputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryTotalOutputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentInputComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentInputComponents))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentOutputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentOutputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentDualSrcAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentDualSrcAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentCombinedOutputResources"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentCombinedOutputResources))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxComputeSharedMemorySize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxComputeSharedMemorySize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxComputeWorkGroupCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxComputeWorkGroupCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxComputeWorkGroupInvocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxComputeWorkGroupInvocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxComputeWorkGroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxComputeWorkGroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subPixelPrecisionBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subPixelPrecisionBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subTexelPrecisionBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subTexelPrecisionBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mipmapPrecisionBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mipmapPrecisionBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDrawIndexedIndexValue"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDrawIndexedIndexValue))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDrawIndirectCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDrawIndirectCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSamplerLodBias"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSamplerLodBias))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSamplerAnisotropy"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSamplerAnisotropy))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxViewports"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxViewports))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxViewportDimensions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxViewportDimensions))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportBoundsRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportBoundsRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportSubPixelBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportSubPixelBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minMemoryMapAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minMemoryMapAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minTexelBufferOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minTexelBufferOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minUniformBufferOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minUniformBufferOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minStorageBufferOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minStorageBufferOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minTexelOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minTexelOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTexelOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTexelOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minTexelGatherOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minTexelGatherOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTexelGatherOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTexelGatherOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minInterpolationOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minInterpolationOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInterpolationOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInterpolationOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subPixelInterpolationOffsetBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subPixelInterpolationOffsetBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFramebufferWidth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFramebufferWidth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFramebufferHeight"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFramebufferHeight))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFramebufferLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFramebufferLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebufferColorSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebufferColorSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebufferDepthSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebufferDepthSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebufferStencilSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebufferStencilSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebufferNoAttachmentsSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebufferNoAttachmentsSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxColorAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxColorAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampledImageColorSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampledImageColorSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampledImageIntegerSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampledImageIntegerSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampledImageDepthSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampledImageDepthSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampledImageStencilSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampledImageStencilSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageImageSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageImageSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSampleMaskWords"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSampleMaskWords))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timestampComputeAndGraphics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timestampComputeAndGraphics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timestampPeriod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timestampPeriod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxClipDistances"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxClipDistances))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxCullDistances"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxCullDistances))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxCombinedClipAndCullDistances"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxCombinedClipAndCullDistances))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("discreteQueuePriorities"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.discreteQueuePriorities))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pointSizeRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pointSizeRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineWidthRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineWidthRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pointSizeGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pointSizeGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineWidthGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineWidthGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("strictLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.strictLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("standardSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.standardSampleLocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("optimalBufferCopyOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.optimalBufferCopyOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("optimalBufferCopyRowPitchAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.optimalBufferCopyRowPitchAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("nonCoherentAtomSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.nonCoherentAtomSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceLimits._fields_ = [
    ("maxImageDimension1D", c_uint),
    ("maxImageDimension2D", c_uint),
    ("maxImageDimension3D", c_uint),
    ("maxImageDimensionCube", c_uint),
    ("maxImageArrayLayers", c_uint),
    ("maxTexelBufferElements", c_uint),
    ("maxUniformBufferRange", c_uint),
    ("maxStorageBufferRange", c_uint),
    ("maxPushConstantsSize", c_uint),
    ("maxMemoryAllocationCount", c_uint),
    ("maxSamplerAllocationCount", c_uint),
    ("bufferImageGranularity", c_ulong),
    ("sparseAddressSpaceSize", c_ulong),
    ("maxBoundDescriptorSets", c_uint),
    ("maxPerStageDescriptorSamplers", c_uint),
    ("maxPerStageDescriptorUniformBuffers", c_uint),
    ("maxPerStageDescriptorStorageBuffers", c_uint),
    ("maxPerStageDescriptorSampledImages", c_uint),
    ("maxPerStageDescriptorStorageImages", c_uint),
    ("maxPerStageDescriptorInputAttachments", c_uint),
    ("maxPerStageResources", c_uint),
    ("maxDescriptorSetSamplers", c_uint),
    ("maxDescriptorSetUniformBuffers", c_uint),
    ("maxDescriptorSetUniformBuffersDynamic", c_uint),
    ("maxDescriptorSetStorageBuffers", c_uint),
    ("maxDescriptorSetStorageBuffersDynamic", c_uint),
    ("maxDescriptorSetSampledImages", c_uint),
    ("maxDescriptorSetStorageImages", c_uint),
    ("maxDescriptorSetInputAttachments", c_uint),
    ("maxVertexInputAttributes", c_uint),
    ("maxVertexInputBindings", c_uint),
    ("maxVertexInputAttributeOffset", c_uint),
    ("maxVertexInputBindingStride", c_uint),
    ("maxVertexOutputComponents", c_uint),
    ("maxTessellationGenerationLevel", c_uint),
    ("maxTessellationPatchSize", c_uint),
    ("maxTessellationControlPerVertexInputComponents", c_uint),
    ("maxTessellationControlPerVertexOutputComponents", c_uint),
    ("maxTessellationControlPerPatchOutputComponents", c_uint),
    ("maxTessellationControlTotalOutputComponents", c_uint),
    ("maxTessellationEvaluationInputComponents", c_uint),
    ("maxTessellationEvaluationOutputComponents", c_uint),
    ("maxGeometryShaderInvocations", c_uint),
    ("maxGeometryInputComponents", c_uint),
    ("maxGeometryOutputComponents", c_uint),
    ("maxGeometryOutputVertices", c_uint),
    ("maxGeometryTotalOutputComponents", c_uint),
    ("maxFragmentInputComponents", c_uint),
    ("maxFragmentOutputAttachments", c_uint),
    ("maxFragmentDualSrcAttachments", c_uint),
    ("maxFragmentCombinedOutputResources", c_uint),
    ("maxComputeSharedMemorySize", c_uint),
    ("maxComputeWorkGroupCount", c_uint *3),
    ("maxComputeWorkGroupInvocations", c_uint),
    ("maxComputeWorkGroupSize", c_uint *3),
    ("subPixelPrecisionBits", c_uint),
    ("subTexelPrecisionBits", c_uint),
    ("mipmapPrecisionBits", c_uint),
    ("maxDrawIndexedIndexValue", c_uint),
    ("maxDrawIndirectCount", c_uint),
    ("maxSamplerLodBias", c_float),
    ("maxSamplerAnisotropy", c_float),
    ("maxViewports", c_uint),
    ("maxViewportDimensions", c_uint *2),
    ("viewportBoundsRange", c_float *2),
    ("viewportSubPixelBits", c_uint),
    ("minMemoryMapAlignment", c_ulong),
    ("minTexelBufferOffsetAlignment", c_ulong),
    ("minUniformBufferOffsetAlignment", c_ulong),
    ("minStorageBufferOffsetAlignment", c_ulong),
    ("minTexelOffset", c_int),
    ("maxTexelOffset", c_uint),
    ("minTexelGatherOffset", c_int),
    ("maxTexelGatherOffset", c_uint),
    ("minInterpolationOffset", c_float),
    ("maxInterpolationOffset", c_float),
    ("subPixelInterpolationOffsetBits", c_uint),
    ("maxFramebufferWidth", c_uint),
    ("maxFramebufferHeight", c_uint),
    ("maxFramebufferLayers", c_uint),
    ("framebufferColorSampleCounts", c_uint),
    ("framebufferDepthSampleCounts", c_uint),
    ("framebufferStencilSampleCounts", c_uint),
    ("framebufferNoAttachmentsSampleCounts", c_uint),
    ("maxColorAttachments", c_uint),
    ("sampledImageColorSampleCounts", c_uint),
    ("sampledImageIntegerSampleCounts", c_uint),
    ("sampledImageDepthSampleCounts", c_uint),
    ("sampledImageStencilSampleCounts", c_uint),
    ("storageImageSampleCounts", c_uint),
    ("maxSampleMaskWords", c_uint),
    ("timestampComputeAndGraphics", c_uint),
    ("timestampPeriod", c_float),
    ("maxClipDistances", c_uint),
    ("maxCullDistances", c_uint),
    ("maxCombinedClipAndCullDistances", c_uint),
    ("discreteQueuePriorities", c_uint),
    ("pointSizeRange", c_float *2),
    ("lineWidthRange", c_float *2),
    ("pointSizeGranularity", c_float),
    ("lineWidthGranularity", c_float),
    ("strictLines", c_uint),
    ("standardSampleLocations", c_uint),
    ("optimalBufferCopyOffsetAlignment", c_ulong),
    ("optimalBufferCopyRowPitchAlignment", c_ulong),
    ("nonCoherentAtomSize", c_ulong)
    ]

class VkPhysicalDeviceMemoryProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("memoryTypeCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryTypeCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryHeapCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryHeapCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryHeaps"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryHeaps))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMemoryProperties._fields_ = [
    ("memoryTypeCount", c_uint),
    ("memoryTypes", VkMemoryType *32),
    ("memoryHeapCount", c_uint),
    ("memoryHeaps", VkMemoryHeap *16)
    ]

class VkPhysicalDeviceSparseProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("residencyStandard2DBlockShape"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.residencyStandard2DBlockShape))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("residencyStandard2DMultisampleBlockShape"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.residencyStandard2DMultisampleBlockShape))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("residencyStandard3DBlockShape"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.residencyStandard3DBlockShape))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("residencyAlignedMipSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.residencyAlignedMipSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("residencyNonResidentStrict"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.residencyNonResidentStrict))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSparseProperties._fields_ = [
    ("residencyStandard2DBlockShape", c_uint),
    ("residencyStandard2DMultisampleBlockShape", c_uint),
    ("residencyStandard3DBlockShape", c_uint),
    ("residencyAlignedMipSize", c_uint),
    ("residencyNonResidentStrict", c_uint)
    ]

class VkPhysicalDeviceProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("apiVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.apiVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vendorID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vendorID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineCacheUUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineCacheUUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("limits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.limits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseProperties))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceProperties._fields_ = [
    ("apiVersion", c_uint),
    ("driverVersion", c_uint),
    ("vendorID", c_uint),
    ("deviceID", c_uint),
    ("deviceType", c_int),
    ("deviceName", c_byte *256),
    ("pipelineCacheUUID", c_ubyte *16),
    ("limits", VkPhysicalDeviceLimits),
    ("sparseProperties", VkPhysicalDeviceSparseProperties)
    ]

class VkQueueFamilyProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("queueFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timestampValidBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timestampValidBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minImageTransferGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImageTransferGranularity))
            except: 
                pass
        self.JKEY = modval
VkQueueFamilyProperties._fields_ = [
    ("queueFlags", c_uint),
    ("queueCount", c_uint),
    ("timestampValidBits", c_uint),
    ("minImageTransferGranularity", VkExtent3D)
    ]

class VkDeviceQueueCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueuePriorities"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueuePriorities))
            except: 
                pass
        self.JKEY = modval
VkDeviceQueueCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("queueFamilyIndex", c_uint),
    ("queueCount", c_uint),
    ("pQueuePriorities", POINTER(c_float))
    ]

class VkDeviceCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueCreateInfoCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueCreateInfoCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueueCreateInfos"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueueCreateInfos))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("enabledLayerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.enabledLayerCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ppEnabledLayerNames"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ppEnabledLayerNames))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("enabledExtensionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.enabledExtensionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ppEnabledExtensionNames"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ppEnabledExtensionNames))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pEnabledFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pEnabledFeatures))
            except: 
                pass
        self.JKEY = modval
VkDeviceCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("queueCreateInfoCount", c_uint),
    ("pQueueCreateInfos", VkDeviceQueueCreateInfo),
    ("enabledLayerCount", c_uint),
    ("ppEnabledLayerNames", POINTER(c_byte)),
    ("enabledExtensionCount", c_uint),
    ("ppEnabledExtensionNames", POINTER(c_byte)),
    ("pEnabledFeatures", VkPhysicalDeviceFeatures)
    ]

class VkExtensionProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("extensionName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extensionName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("specVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.specVersion))
            except: 
                pass
        self.JKEY = modval
VkExtensionProperties._fields_ = [
    ("extensionName", c_byte *256),
    ("specVersion", c_uint)
    ]

class VkLayerProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("layerName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layerName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("specVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.specVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("implementationVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.implementationVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("description"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.description))
            except: 
                pass
        self.JKEY = modval
VkLayerProperties._fields_ = [
    ("layerName", c_byte *256),
    ("specVersion", c_uint),
    ("implementationVersion", c_uint),
    ("description", c_byte *256)
    ]

class VkSubmitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("waitSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.waitSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitSemaphores"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitSemaphores))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitDstStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitDstStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("commandBufferCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.commandBufferCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCommandBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCommandBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("signalSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.signalSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSignalSemaphores"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSignalSemaphores))
            except: 
                pass
        self.JKEY = modval
VkSubmitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("waitSemaphoreCount", c_uint),
    ("pWaitSemaphores", POINTER(VkSemaphore_T)),
    ("pWaitDstStageMask", POINTER(c_uint)),
    ("commandBufferCount", c_uint),
    ("pCommandBuffers", POINTER(VkCommandBuffer_T)),
    ("signalSemaphoreCount", c_uint),
    ("pSignalSemaphores", POINTER(VkSemaphore_T))
    ]

class VkMappedMemoryRange(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkMappedMemoryRange._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memory", VkDeviceMemory_T),
    ("offset", c_ulong),
    ("size", c_ulong)
    ]

class VkMemoryAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("allocationSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.allocationSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryTypeIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryTypeIndex))
            except: 
                pass
        self.JKEY = modval
VkMemoryAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("allocationSize", c_ulong),
    ("memoryTypeIndex", c_uint)
    ]

class VkMemoryRequirements(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("alignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.alignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryTypeBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryTypeBits))
            except: 
                pass
        self.JKEY = modval
VkMemoryRequirements._fields_ = [
    ("size", c_ulong),
    ("alignment", c_ulong),
    ("memoryTypeBits", c_uint)
    ]

class VkSparseMemoryBind(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("resourceOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.resourceOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkSparseMemoryBind._fields_ = [
    ("resourceOffset", c_ulong),
    ("size", c_ulong),
    ("memory", VkDeviceMemory_T),
    ("memoryOffset", c_ulong),
    ("flags", c_uint)
    ]

class VkSparseBufferMemoryBindInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bindCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bindCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBinds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBinds))
            except: 
                pass
        self.JKEY = modval
VkSparseBufferMemoryBindInfo._fields_ = [
    ("buffer", VkBuffer_T),
    ("bindCount", c_uint),
    ("pBinds", VkSparseMemoryBind)
    ]

class VkSparseImageOpaqueMemoryBindInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bindCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bindCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBinds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBinds))
            except: 
                pass
        self.JKEY = modval
VkSparseImageOpaqueMemoryBindInfo._fields_ = [
    ("image", VkImage_T),
    ("bindCount", c_uint),
    ("pBinds", VkSparseMemoryBind)
    ]

class VkImageSubresource(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mipLevel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mipLevel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("arrayLayer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.arrayLayer))
            except: 
                pass
        self.JKEY = modval
VkImageSubresource._fields_ = [
    ("aspectMask", c_uint),
    ("mipLevel", c_uint),
    ("arrayLayer", c_uint)
    ]

class VkSparseImageMemoryBind(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("subresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkSparseImageMemoryBind._fields_ = [
    ("subresource", VkImageSubresource),
    ("offset", VkOffset3D),
    ("extent", VkExtent3D),
    ("memory", VkDeviceMemory_T),
    ("memoryOffset", c_ulong),
    ("flags", c_uint)
    ]

class VkSparseImageMemoryBindInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bindCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bindCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBinds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBinds))
            except: 
                pass
        self.JKEY = modval
VkSparseImageMemoryBindInfo._fields_ = [
    ("image", VkImage_T),
    ("bindCount", c_uint),
    ("pBinds", VkSparseImageMemoryBind)
    ]

class VkBindSparseInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("waitSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.waitSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitSemaphores"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitSemaphores))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferBindCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferBindCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBufferBinds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBufferBinds))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageOpaqueBindCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageOpaqueBindCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pImageOpaqueBinds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pImageOpaqueBinds))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageBindCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageBindCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pImageBinds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pImageBinds))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("signalSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.signalSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSignalSemaphores"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSignalSemaphores))
            except: 
                pass
        self.JKEY = modval
VkBindSparseInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("waitSemaphoreCount", c_uint),
    ("pWaitSemaphores", POINTER(VkSemaphore_T)),
    ("bufferBindCount", c_uint),
    ("pBufferBinds", VkSparseBufferMemoryBindInfo),
    ("imageOpaqueBindCount", c_uint),
    ("pImageOpaqueBinds", VkSparseImageOpaqueMemoryBindInfo),
    ("imageBindCount", c_uint),
    ("pImageBinds", VkSparseImageMemoryBindInfo),
    ("signalSemaphoreCount", c_uint),
    ("pSignalSemaphores", POINTER(VkSemaphore_T))
    ]

class VkSparseImageFormatProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkSparseImageFormatProperties._fields_ = [
    ("aspectMask", c_uint),
    ("imageGranularity", VkExtent3D),
    ("flags", c_uint)
    ]

class VkSparseImageMemoryRequirements(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("formatProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.formatProperties))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageMipTailFirstLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageMipTailFirstLod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageMipTailSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageMipTailSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageMipTailOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageMipTailOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageMipTailStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageMipTailStride))
            except: 
                pass
        self.JKEY = modval
VkSparseImageMemoryRequirements._fields_ = [
    ("formatProperties", VkSparseImageFormatProperties),
    ("imageMipTailFirstLod", c_uint),
    ("imageMipTailSize", c_ulong),
    ("imageMipTailOffset", c_ulong),
    ("imageMipTailStride", c_ulong)
    ]

class VkFenceCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkFenceCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkSemaphoreCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkSemaphoreCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkEventCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkEventCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkQueryPoolCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queryType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queryType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineStatistics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineStatistics))
            except: 
                pass
        self.JKEY = modval
VkQueryPoolCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("queryType", c_int),
    ("queryCount", c_uint),
    ("pipelineStatistics", c_uint)
    ]

class VkBufferCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sharingMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sharingMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueueFamilyIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueueFamilyIndices))
            except: 
                pass
        self.JKEY = modval
VkBufferCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("size", c_ulong),
    ("usage", c_uint),
    ("sharingMode", c_int),
    ("queueFamilyIndexCount", c_uint),
    ("pQueueFamilyIndices", POINTER(c_uint))
    ]

class VkBufferViewCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("range"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.range))
            except: 
                pass
        self.JKEY = modval
VkBufferViewCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("buffer", VkBuffer_T),
    ("format", c_int),
    ("offset", c_ulong),
    ("range", c_ulong)
    ]

class VkImageCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mipLevels"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mipLevels))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("arrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.arrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tiling"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tiling))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sharingMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sharingMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueueFamilyIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueueFamilyIndices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("initialLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.initialLayout))
            except: 
                pass
        self.JKEY = modval
VkImageCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("imageType", c_int),
    ("format", c_int),
    ("extent", VkExtent3D),
    ("mipLevels", c_uint),
    ("arrayLayers", c_uint),
    ("samples", c_int),
    ("tiling", c_int),
    ("usage", c_uint),
    ("sharingMode", c_int),
    ("queueFamilyIndexCount", c_uint),
    ("pQueueFamilyIndices", POINTER(c_uint)),
    ("initialLayout", c_int)
    ]

class VkSubresourceLayout(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rowPitch"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rowPitch))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("arrayPitch"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.arrayPitch))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthPitch"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthPitch))
            except: 
                pass
        self.JKEY = modval
VkSubresourceLayout._fields_ = [
    ("offset", c_ulong),
    ("size", c_ulong),
    ("rowPitch", c_ulong),
    ("arrayPitch", c_ulong),
    ("depthPitch", c_ulong)
    ]

class VkComponentMapping(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("r"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.r))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("g"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.g))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("b"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.b))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("a"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.a))
            except: 
                pass
        self.JKEY = modval
VkComponentMapping._fields_ = [
    ("r", c_int),
    ("g", c_int),
    ("b", c_int),
    ("a", c_int)
    ]

class VkImageViewCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("components"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.components))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subresourceRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subresourceRange))
            except: 
                pass
        self.JKEY = modval
VkImageViewCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("image", VkImage_T),
    ("viewType", c_int),
    ("format", c_int),
    ("components", VkComponentMapping),
    ("subresourceRange", VkImageSubresourceRange)
    ]

class VkShaderModuleCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("codeSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.codeSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCode))
            except: 
                pass
        self.JKEY = modval
VkShaderModuleCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("codeSize", c_ulong),
    ("pCode", POINTER(c_uint))
    ]

class VkPipelineCacheCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("initialDataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.initialDataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pInitialData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pInitialData))
            except: 
                pass
        self.JKEY = modval
VkPipelineCacheCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("initialDataSize", c_ulong),
    ("pInitialData", c_void_p)
    ]

class VkSpecializationMapEntry(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("constantID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.constantID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkSpecializationMapEntry._fields_ = [
    ("constantID", c_uint),
    ("offset", c_uint),
    ("size", c_ulong)
    ]

class VkSpecializationInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("mapEntryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mapEntryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMapEntries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMapEntries))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pData))
            except: 
                pass
        self.JKEY = modval
VkSpecializationInfo._fields_ = [
    ("mapEntryCount", c_uint),
    ("pMapEntries", VkSpecializationMapEntry),
    ("dataSize", c_ulong),
    ("pData", c_void_p)
    ]

class VkPipelineShaderStageCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("module"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.module))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSpecializationInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSpecializationInfo))
            except: 
                pass
        self.JKEY = modval
VkPipelineShaderStageCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("stage", c_int),
    ("module", VkShaderModule_T),
    ("pName", c_char_p),
    ("pSpecializationInfo", VkSpecializationInfo)
    ]

class VkComputePipelineCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineIndex))
            except: 
                pass
        self.JKEY = modval
VkComputePipelineCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("stage", VkPipelineShaderStageCreateInfo),
    ("layout", VkPipelineLayout_T),
    ("basePipelineHandle", VkPipeline_T),
    ("basePipelineIndex", c_int)
    ]

class VkVertexInputBindingDescription(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inputRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inputRate))
            except: 
                pass
        self.JKEY = modval
VkVertexInputBindingDescription._fields_ = [
    ("binding", c_uint),
    ("stride", c_uint),
    ("inputRate", c_int)
    ]

class VkVertexInputAttributeDescription(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("location"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.location))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
VkVertexInputAttributeDescription._fields_ = [
    ("location", c_uint),
    ("binding", c_uint),
    ("format", c_int),
    ("offset", c_uint)
    ]

class VkPipelineVertexInputStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexBindingDescriptionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexBindingDescriptionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pVertexBindingDescriptions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pVertexBindingDescriptions))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexAttributeDescriptionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexAttributeDescriptionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pVertexAttributeDescriptions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pVertexAttributeDescriptions))
            except: 
                pass
        self.JKEY = modval
VkPipelineVertexInputStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("vertexBindingDescriptionCount", c_uint),
    ("pVertexBindingDescriptions", VkVertexInputBindingDescription),
    ("vertexAttributeDescriptionCount", c_uint),
    ("pVertexAttributeDescriptions", VkVertexInputAttributeDescription)
    ]

class VkPipelineInputAssemblyStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("topology"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.topology))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveRestartEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveRestartEnable))
            except: 
                pass
        self.JKEY = modval
VkPipelineInputAssemblyStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("topology", c_int),
    ("primitiveRestartEnable", c_uint)
    ]

class VkPipelineTessellationStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("patchControlPoints"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.patchControlPoints))
            except: 
                pass
        self.JKEY = modval
VkPipelineTessellationStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("patchControlPoints", c_uint)
    ]

class VkViewport(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("width"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.width))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("height"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.height))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minDepth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minDepth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDepth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDepth))
            except: 
                pass
        self.JKEY = modval
VkViewport._fields_ = [
    ("x", c_float),
    ("y", c_float),
    ("width", c_float),
    ("height", c_float),
    ("minDepth", c_float),
    ("maxDepth", c_float)
    ]

class VkPipelineViewportStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewports"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewports))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scissorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scissorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pScissors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pScissors))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("viewportCount", c_uint),
    ("pViewports", VkViewport),
    ("scissorCount", c_uint),
    ("pScissors", VkRect2D)
    ]

class VkPipelineRasterizationStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthClampEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthClampEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizerDiscardEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizerDiscardEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("polygonMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.polygonMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("cullMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.cullMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("frontFace"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.frontFace))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBiasEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBiasEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBiasConstantFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBiasConstantFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBiasClamp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBiasClamp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBiasSlopeFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBiasSlopeFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineWidth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineWidth))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("depthClampEnable", c_uint),
    ("rasterizerDiscardEnable", c_uint),
    ("polygonMode", c_int),
    ("cullMode", c_uint),
    ("frontFace", c_int),
    ("depthBiasEnable", c_uint),
    ("depthBiasConstantFactor", c_float),
    ("depthBiasClamp", c_float),
    ("depthBiasSlopeFactor", c_float),
    ("lineWidth", c_float)
    ]

class VkPipelineMultisampleStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationSamples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleShadingEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleShadingEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSampleShading"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSampleShading))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSampleMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSampleMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("alphaToCoverageEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.alphaToCoverageEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("alphaToOneEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.alphaToOneEnable))
            except: 
                pass
        self.JKEY = modval
VkPipelineMultisampleStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("rasterizationSamples", c_int),
    ("sampleShadingEnable", c_uint),
    ("minSampleShading", c_float),
    ("pSampleMask", POINTER(c_uint)),
    ("alphaToCoverageEnable", c_uint),
    ("alphaToOneEnable", c_uint)
    ]

class VkStencilOpState(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("failOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.failOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("passOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.passOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthFailOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthFailOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compareOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compareOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compareMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compareMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("writeMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.writeMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("reference"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.reference))
            except: 
                pass
        self.JKEY = modval
VkStencilOpState._fields_ = [
    ("failOp", c_int),
    ("passOp", c_int),
    ("depthFailOp", c_int),
    ("compareOp", c_int),
    ("compareMask", c_uint),
    ("writeMask", c_uint),
    ("reference", c_uint)
    ]

class VkPipelineDepthStencilStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthTestEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthTestEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthWriteEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthWriteEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthCompareOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthCompareOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthBoundsTestEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthBoundsTestEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilTestEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilTestEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("front"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.front))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("back"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.back))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minDepthBounds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minDepthBounds))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDepthBounds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDepthBounds))
            except: 
                pass
        self.JKEY = modval
VkPipelineDepthStencilStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("depthTestEnable", c_uint),
    ("depthWriteEnable", c_uint),
    ("depthCompareOp", c_int),
    ("depthBoundsTestEnable", c_uint),
    ("stencilTestEnable", c_uint),
    ("front", VkStencilOpState),
    ("back", VkStencilOpState),
    ("minDepthBounds", c_float),
    ("maxDepthBounds", c_float)
    ]

class VkPipelineColorBlendAttachmentState(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("blendEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.blendEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcColorBlendFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcColorBlendFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstColorBlendFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstColorBlendFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorBlendOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorBlendOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAlphaBlendFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAlphaBlendFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAlphaBlendFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAlphaBlendFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("alphaBlendOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.alphaBlendOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorWriteMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorWriteMask))
            except: 
                pass
        self.JKEY = modval
VkPipelineColorBlendAttachmentState._fields_ = [
    ("blendEnable", c_uint),
    ("srcColorBlendFactor", c_int),
    ("dstColorBlendFactor", c_int),
    ("colorBlendOp", c_int),
    ("srcAlphaBlendFactor", c_int),
    ("dstAlphaBlendFactor", c_int),
    ("alphaBlendOp", c_int),
    ("colorWriteMask", c_uint)
    ]

class VkPipelineColorBlendStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("logicOpEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.logicOpEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("logicOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.logicOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("blendConstants"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.blendConstants))
            except: 
                pass
        self.JKEY = modval
VkPipelineColorBlendStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("logicOpEnable", c_uint),
    ("logicOp", c_int),
    ("attachmentCount", c_uint),
    ("pAttachments", VkPipelineColorBlendAttachmentState),
    ("blendConstants", c_float *4)
    ]

class VkPipelineDynamicStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dynamicStateCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dynamicStateCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDynamicStates"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDynamicStates))
            except: 
                pass
        self.JKEY = modval
VkPipelineDynamicStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("dynamicStateCount", c_uint),
    ("pDynamicStates", POINTER(c_int))
    ]

class VkGraphicsPipelineCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pVertexInputState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pVertexInputState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pInputAssemblyState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pInputAssemblyState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTessellationState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTessellationState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewportState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewportState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRasterizationState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRasterizationState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMultisampleState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMultisampleState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDepthStencilState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDepthStencilState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorBlendState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorBlendState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDynamicState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDynamicState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderPass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderPass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineIndex))
            except: 
                pass
        self.JKEY = modval
VkGraphicsPipelineCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("stageCount", c_uint),
    ("pStages", VkPipelineShaderStageCreateInfo),
    ("pVertexInputState", VkPipelineVertexInputStateCreateInfo),
    ("pInputAssemblyState", VkPipelineInputAssemblyStateCreateInfo),
    ("pTessellationState", VkPipelineTessellationStateCreateInfo),
    ("pViewportState", VkPipelineViewportStateCreateInfo),
    ("pRasterizationState", VkPipelineRasterizationStateCreateInfo),
    ("pMultisampleState", VkPipelineMultisampleStateCreateInfo),
    ("pDepthStencilState", VkPipelineDepthStencilStateCreateInfo),
    ("pColorBlendState", VkPipelineColorBlendStateCreateInfo),
    ("pDynamicState", VkPipelineDynamicStateCreateInfo),
    ("layout", VkPipelineLayout_T),
    ("renderPass", VkRenderPass_T),
    ("subpass", c_uint),
    ("basePipelineHandle", VkPipeline_T),
    ("basePipelineIndex", c_int)
    ]

class VkPushConstantRange(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("stageFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkPushConstantRange._fields_ = [
    ("stageFlags", c_uint),
    ("offset", c_uint),
    ("size", c_uint)
    ]

class VkPipelineLayoutCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("setLayoutCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.setLayoutCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSetLayouts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSetLayouts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pushConstantRangeCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pushConstantRangeCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPushConstantRanges"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPushConstantRanges))
            except: 
                pass
        self.JKEY = modval
VkPipelineLayoutCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("setLayoutCount", c_uint),
    ("pSetLayouts", POINTER(VkDescriptorSetLayout_T)),
    ("pushConstantRangeCount", c_uint),
    ("pPushConstantRanges", VkPushConstantRange)
    ]

class VkSamplerCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("magFilter"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.magFilter))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minFilter"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minFilter))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mipmapMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mipmapMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("addressModeU"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.addressModeU))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("addressModeV"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.addressModeV))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("addressModeW"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.addressModeW))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mipLodBias"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mipLodBias))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("anisotropyEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.anisotropyEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxAnisotropy"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxAnisotropy))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compareEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compareEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compareOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compareOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minLod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxLod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("borderColor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.borderColor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("unnormalizedCoordinates"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.unnormalizedCoordinates))
            except: 
                pass
        self.JKEY = modval
VkSamplerCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("magFilter", c_int),
    ("minFilter", c_int),
    ("mipmapMode", c_int),
    ("addressModeU", c_int),
    ("addressModeV", c_int),
    ("addressModeW", c_int),
    ("mipLodBias", c_float),
    ("anisotropyEnable", c_uint),
    ("maxAnisotropy", c_float),
    ("compareEnable", c_uint),
    ("compareOp", c_int),
    ("minLod", c_float),
    ("maxLod", c_float),
    ("borderColor", c_int),
    ("unnormalizedCoordinates", c_uint)
    ]

class VkCopyDescriptorSet(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcSet"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSet))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcBinding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcBinding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcArrayElement"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcArrayElement))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSet"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSet))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstBinding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstBinding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstArrayElement"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstArrayElement))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorCount))
            except: 
                pass
        self.JKEY = modval
VkCopyDescriptorSet._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcSet", VkDescriptorSet_T),
    ("srcBinding", c_uint),
    ("srcArrayElement", c_uint),
    ("dstSet", VkDescriptorSet_T),
    ("dstBinding", c_uint),
    ("dstArrayElement", c_uint),
    ("descriptorCount", c_uint)
    ]

class VkDescriptorBufferInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("range"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.range))
            except: 
                pass
        self.JKEY = modval
VkDescriptorBufferInfo._fields_ = [
    ("buffer", VkBuffer_T),
    ("offset", c_ulong),
    ("range", c_ulong)
    ]

class VkDescriptorImageInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sampler"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampler))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageView))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageLayout))
            except: 
                pass
        self.JKEY = modval
VkDescriptorImageInfo._fields_ = [
    ("sampler", VkSampler_T),
    ("imageView", VkImageView_T),
    ("imageLayout", c_int)
    ]

class VkDescriptorPoolSize(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorCount))
            except: 
                pass
        self.JKEY = modval
VkDescriptorPoolSize._fields_ = [
    ("type", c_int),
    ("descriptorCount", c_uint)
    ]

class VkDescriptorPoolCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSets))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("poolSizeCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.poolSizeCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPoolSizes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPoolSizes))
            except: 
                pass
        self.JKEY = modval
VkDescriptorPoolCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("maxSets", c_uint),
    ("poolSizeCount", c_uint),
    ("pPoolSizes", VkDescriptorPoolSize)
    ]

class VkDescriptorSetAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorPool"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorPool))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorSetCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorSetCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSetLayouts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSetLayouts))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("descriptorPool", VkDescriptorPool_T),
    ("descriptorSetCount", c_uint),
    ("pSetLayouts", POINTER(VkDescriptorSetLayout_T))
    ]

class VkDescriptorSetLayoutBinding(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stageFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pImmutableSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pImmutableSamplers))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetLayoutBinding._fields_ = [
    ("binding", c_uint),
    ("descriptorType", c_int),
    ("descriptorCount", c_uint),
    ("stageFlags", c_uint),
    ("pImmutableSamplers", POINTER(VkSampler_T))
    ]

class VkDescriptorSetLayoutCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bindingCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bindingCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBindings"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBindings))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetLayoutCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("bindingCount", c_uint),
    ("pBindings", VkDescriptorSetLayoutBinding)
    ]

class VkWriteDescriptorSet(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSet"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSet))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstBinding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstBinding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstArrayElement"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstArrayElement))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pImageInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pImageInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBufferInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBufferInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTexelBufferView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTexelBufferView))
            except: 
                pass
        self.JKEY = modval
VkWriteDescriptorSet._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dstSet", VkDescriptorSet_T),
    ("dstBinding", c_uint),
    ("dstArrayElement", c_uint),
    ("descriptorCount", c_uint),
    ("descriptorType", c_int),
    ("pImageInfo", VkDescriptorImageInfo),
    ("pBufferInfo", VkDescriptorBufferInfo),
    ("pTexelBufferView", POINTER(VkBufferView_T))
    ]

class VkAttachmentDescription(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("loadOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.loadOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storeOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storeOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilLoadOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilLoadOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilStoreOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilStoreOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("initialLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.initialLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("finalLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.finalLayout))
            except: 
                pass
        self.JKEY = modval
VkAttachmentDescription._fields_ = [
    ("flags", c_uint),
    ("format", c_int),
    ("samples", c_int),
    ("loadOp", c_int),
    ("storeOp", c_int),
    ("stencilLoadOp", c_int),
    ("stencilStoreOp", c_int),
    ("initialLayout", c_int),
    ("finalLayout", c_int)
    ]

class VkAttachmentReference(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("attachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layout))
            except: 
                pass
        self.JKEY = modval
VkAttachmentReference._fields_ = [
    ("attachment", c_uint),
    ("layout", c_int)
    ]

class VkFramebufferCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderPass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderPass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("width"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.width))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("height"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.height))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layers))
            except: 
                pass
        self.JKEY = modval
VkFramebufferCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("renderPass", VkRenderPass_T),
    ("attachmentCount", c_uint),
    ("pAttachments", POINTER(VkImageView_T)),
    ("width", c_uint),
    ("height", c_uint),
    ("layers", c_uint)
    ]

class VkSubpassDescription(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineBindPoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineBindPoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inputAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inputAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pResolveAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pResolveAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDepthStencilAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDepthStencilAttachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("preserveAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.preserveAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPreserveAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPreserveAttachments))
            except: 
                pass
        self.JKEY = modval
VkSubpassDescription._fields_ = [
    ("flags", c_uint),
    ("pipelineBindPoint", c_int),
    ("inputAttachmentCount", c_uint),
    ("pInputAttachments", VkAttachmentReference),
    ("colorAttachmentCount", c_uint),
    ("pColorAttachments", VkAttachmentReference),
    ("pResolveAttachments", VkAttachmentReference),
    ("pDepthStencilAttachment", VkAttachmentReference),
    ("preserveAttachmentCount", c_uint),
    ("pPreserveAttachments", POINTER(c_uint))
    ]

class VkSubpassDependency(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("srcSubpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dependencyFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dependencyFlags))
            except: 
                pass
        self.JKEY = modval
VkSubpassDependency._fields_ = [
    ("srcSubpass", c_uint),
    ("dstSubpass", c_uint),
    ("srcStageMask", c_uint),
    ("dstStageMask", c_uint),
    ("srcAccessMask", c_uint),
    ("dstAccessMask", c_uint),
    ("dependencyFlags", c_uint)
    ]

class VkRenderPassCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpassCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpassCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSubpasses"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSubpasses))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dependencyCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dependencyCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDependencies"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDependencies))
            except: 
                pass
        self.JKEY = modval
VkRenderPassCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("attachmentCount", c_uint),
    ("pAttachments", VkAttachmentDescription),
    ("subpassCount", c_uint),
    ("pSubpasses", VkSubpassDescription),
    ("dependencyCount", c_uint),
    ("pDependencies", VkSubpassDependency)
    ]

class VkCommandPoolCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
VkCommandPoolCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("queueFamilyIndex", c_uint)
    ]

class VkCommandBufferAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("commandPool"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.commandPool))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("level"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.level))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("commandBufferCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.commandBufferCount))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("commandPool", VkCommandPool_T),
    ("level", c_int),
    ("commandBufferCount", c_uint)
    ]

class VkCommandBufferInheritanceInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderPass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderPass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("occlusionQueryEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.occlusionQueryEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queryFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queryFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineStatistics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineStatistics))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferInheritanceInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("renderPass", VkRenderPass_T),
    ("subpass", c_uint),
    ("framebuffer", VkFramebuffer_T),
    ("occlusionQueryEnable", c_uint),
    ("queryFlags", c_uint),
    ("pipelineStatistics", c_uint)
    ]

class VkCommandBufferBeginInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pInheritanceInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pInheritanceInfo))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferBeginInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pInheritanceInfo", VkCommandBufferInheritanceInfo)
    ]

class VkBufferCopy(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("srcOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkBufferCopy._fields_ = [
    ("srcOffset", c_ulong),
    ("dstOffset", c_ulong),
    ("size", c_ulong)
    ]

class VkImageSubresourceLayers(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mipLevel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mipLevel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("baseArrayLayer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.baseArrayLayer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layerCount))
            except: 
                pass
        self.JKEY = modval
VkImageSubresourceLayers._fields_ = [
    ("aspectMask", c_uint),
    ("mipLevel", c_uint),
    ("baseArrayLayer", c_uint),
    ("layerCount", c_uint)
    ]

class VkBufferImageCopy(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("bufferOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferRowLength"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferRowLength))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferImageHeight"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferImageHeight))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageExtent))
            except: 
                pass
        self.JKEY = modval
VkBufferImageCopy._fields_ = [
    ("bufferOffset", c_ulong),
    ("bufferRowLength", c_uint),
    ("bufferImageHeight", c_uint),
    ("imageSubresource", VkImageSubresourceLayers),
    ("imageOffset", VkOffset3D),
    ("imageExtent", VkExtent3D)
    ]

class VkClearColorValue(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("float32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.float32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("int32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.int32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uint32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uint32))
            except: 
                pass
        self.JKEY = modval
VkClearColorValue._fields_ = [
    ("float32", c_float *4),
    ("int32", c_int *4),
    ("uint32", c_uint *4)
    ]

class VkClearDepthStencilValue(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("depth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencil"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencil))
            except: 
                pass
        self.JKEY = modval
VkClearDepthStencilValue._fields_ = [
    ("depth", c_float),
    ("stencil", c_uint)
    ]

class VkClearValue(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("color"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.color))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthStencil"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthStencil))
            except: 
                pass
        self.JKEY = modval
VkClearValue._fields_ = [
    ("color", VkClearColorValue),
    ("depthStencil", VkClearDepthStencilValue)
    ]

class VkClearAttachment(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("clearValue"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.clearValue))
            except: 
                pass
        self.JKEY = modval
VkClearAttachment._fields_ = [
    ("aspectMask", c_uint),
    ("colorAttachment", c_uint),
    ("clearValue", VkClearValue)
    ]

class VkClearRect(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("rect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rect))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("baseArrayLayer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.baseArrayLayer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layerCount))
            except: 
                pass
        self.JKEY = modval
VkClearRect._fields_ = [
    ("rect", VkRect2D),
    ("baseArrayLayer", c_uint),
    ("layerCount", c_uint)
    ]

class VkImageBlit(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("srcSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffsets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffsets))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffsets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffsets))
            except: 
                pass
        self.JKEY = modval
VkImageBlit._fields_ = [
    ("srcSubresource", VkImageSubresourceLayers),
    ("srcOffsets", VkOffset3D *2),
    ("dstSubresource", VkImageSubresourceLayers),
    ("dstOffsets", VkOffset3D *2)
    ]

class VkImageCopy(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("srcSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
VkImageCopy._fields_ = [
    ("srcSubresource", VkImageSubresourceLayers),
    ("srcOffset", VkOffset3D),
    ("dstSubresource", VkImageSubresourceLayers),
    ("dstOffset", VkOffset3D),
    ("extent", VkExtent3D)
    ]

class VkImageResolve(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("srcSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
VkImageResolve._fields_ = [
    ("srcSubresource", VkImageSubresourceLayers),
    ("srcOffset", VkOffset3D),
    ("dstSubresource", VkImageSubresourceLayers),
    ("dstOffset", VkOffset3D),
    ("extent", VkExtent3D)
    ]

class VkRenderPassBeginInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderPass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderPass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderArea"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderArea))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("clearValueCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.clearValueCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pClearValues"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pClearValues))
            except: 
                pass
        self.JKEY = modval
VkRenderPassBeginInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("renderPass", VkRenderPass_T),
    ("framebuffer", VkFramebuffer_T),
    ("renderArea", VkRect2D),
    ("clearValueCount", c_uint),
    ("pClearValues", VkClearValue)
    ]

class VkPhysicalDeviceSubgroupProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedOperations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedOperations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("quadOperationsInAllStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.quadOperationsInAllStages))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSubgroupProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("subgroupSize", c_uint),
    ("supportedStages", c_uint),
    ("supportedOperations", c_uint),
    ("quadOperationsInAllStages", c_uint)
    ]

class VkBindBufferMemoryInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryOffset))
            except: 
                pass
        self.JKEY = modval
VkBindBufferMemoryInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("buffer", VkBuffer_T),
    ("memory", VkDeviceMemory_T),
    ("memoryOffset", c_ulong)
    ]

class VkBindImageMemoryInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryOffset))
            except: 
                pass
        self.JKEY = modval
VkBindImageMemoryInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("image", VkImage_T),
    ("memory", VkDeviceMemory_T),
    ("memoryOffset", c_ulong)
    ]

class VkPhysicalDevice16BitStorageFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageBuffer16BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageBuffer16BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformAndStorageBuffer16BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformAndStorageBuffer16BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storagePushConstant16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storagePushConstant16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageInputOutput16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageInputOutput16))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevice16BitStorageFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("storageBuffer16BitAccess", c_uint),
    ("uniformAndStorageBuffer16BitAccess", c_uint),
    ("storagePushConstant16", c_uint),
    ("storageInputOutput16", c_uint)
    ]

class VkMemoryDedicatedRequirements(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("prefersDedicatedAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.prefersDedicatedAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("requiresDedicatedAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.requiresDedicatedAllocation))
            except: 
                pass
        self.JKEY = modval
VkMemoryDedicatedRequirements._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("prefersDedicatedAllocation", c_uint),
    ("requiresDedicatedAllocation", c_uint)
    ]

class VkMemoryDedicatedAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
VkMemoryDedicatedAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("image", VkImage_T),
    ("buffer", VkBuffer_T)
    ]

class VkMemoryAllocateFlagsInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceMask))
            except: 
                pass
        self.JKEY = modval
VkMemoryAllocateFlagsInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("deviceMask", c_uint)
    ]

class VkDeviceGroupRenderPassBeginInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceRenderAreaCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceRenderAreaCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDeviceRenderAreas"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDeviceRenderAreas))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupRenderPassBeginInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceMask", c_uint),
    ("deviceRenderAreaCount", c_uint),
    ("pDeviceRenderAreas", VkRect2D)
    ]

class VkDeviceGroupCommandBufferBeginInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceMask))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupCommandBufferBeginInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceMask", c_uint)
    ]

class VkDeviceGroupSubmitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("waitSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.waitSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitSemaphoreDeviceIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitSemaphoreDeviceIndices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("commandBufferCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.commandBufferCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCommandBufferDeviceMasks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCommandBufferDeviceMasks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("signalSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.signalSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSignalSemaphoreDeviceIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSignalSemaphoreDeviceIndices))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupSubmitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("waitSemaphoreCount", c_uint),
    ("pWaitSemaphoreDeviceIndices", POINTER(c_uint)),
    ("commandBufferCount", c_uint),
    ("pCommandBufferDeviceMasks", POINTER(c_uint)),
    ("signalSemaphoreCount", c_uint),
    ("pSignalSemaphoreDeviceIndices", POINTER(c_uint))
    ]

class VkDeviceGroupBindSparseInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("resourceDeviceIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.resourceDeviceIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryDeviceIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryDeviceIndex))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupBindSparseInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("resourceDeviceIndex", c_uint),
    ("memoryDeviceIndex", c_uint)
    ]

class VkBindBufferMemoryDeviceGroupInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDeviceIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDeviceIndices))
            except: 
                pass
        self.JKEY = modval
VkBindBufferMemoryDeviceGroupInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceIndexCount", c_uint),
    ("pDeviceIndices", POINTER(c_uint))
    ]

class VkBindImageMemoryDeviceGroupInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDeviceIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDeviceIndices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("splitInstanceBindRegionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.splitInstanceBindRegionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSplitInstanceBindRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSplitInstanceBindRegions))
            except: 
                pass
        self.JKEY = modval
VkBindImageMemoryDeviceGroupInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceIndexCount", c_uint),
    ("pDeviceIndices", POINTER(c_uint)),
    ("splitInstanceBindRegionCount", c_uint),
    ("pSplitInstanceBindRegions", VkRect2D)
    ]

class VkPhysicalDeviceGroupProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("physicalDeviceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.physicalDeviceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("physicalDevices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.physicalDevices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subsetAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subsetAllocation))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceGroupProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("physicalDeviceCount", c_uint),
    ("physicalDevices", VkPhysicalDevice_T *32),
    ("subsetAllocation", c_uint)
    ]

class VkDeviceGroupDeviceCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("physicalDeviceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.physicalDeviceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPhysicalDevices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPhysicalDevices))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupDeviceCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("physicalDeviceCount", c_uint),
    ("pPhysicalDevices", POINTER(VkPhysicalDevice_T))
    ]

class VkBufferMemoryRequirementsInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
VkBufferMemoryRequirementsInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("buffer", VkBuffer_T)
    ]

class VkImageMemoryRequirementsInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
VkImageMemoryRequirementsInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("image", VkImage_T)
    ]

class VkImageSparseMemoryRequirementsInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
VkImageSparseMemoryRequirementsInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("image", VkImage_T)
    ]

class VkMemoryRequirements2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryRequirements"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryRequirements))
            except: 
                pass
        self.JKEY = modval
VkMemoryRequirements2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memoryRequirements", VkMemoryRequirements)
    ]

class VkSparseImageMemoryRequirements2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryRequirements"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryRequirements))
            except: 
                pass
        self.JKEY = modval
VkSparseImageMemoryRequirements2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memoryRequirements", VkSparseImageMemoryRequirements)
    ]

class VkPhysicalDeviceFeatures2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("features"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.features))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFeatures2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("features", VkPhysicalDeviceFeatures)
    ]

class VkPhysicalDeviceProperties2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("properties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.properties))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceProperties2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("properties", VkPhysicalDeviceProperties)
    ]

class VkFormatProperties2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("formatProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.formatProperties))
            except: 
                pass
        self.JKEY = modval
VkFormatProperties2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("formatProperties", VkFormatProperties)
    ]

class VkImageFormatProperties2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageFormatProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageFormatProperties))
            except: 
                pass
        self.JKEY = modval
VkImageFormatProperties2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageFormatProperties", VkImageFormatProperties)
    ]

class VkPhysicalDeviceImageFormatInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tiling"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tiling))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImageFormatInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("format", c_int),
    ("type", c_int),
    ("tiling", c_int),
    ("usage", c_uint),
    ("flags", c_uint)
    ]

class VkQueueFamilyProperties2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyProperties))
            except: 
                pass
        self.JKEY = modval
VkQueueFamilyProperties2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("queueFamilyProperties", VkQueueFamilyProperties)
    ]

class VkPhysicalDeviceMemoryProperties2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryProperties))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMemoryProperties2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memoryProperties", VkPhysicalDeviceMemoryProperties)
    ]

class VkSparseImageFormatProperties2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("properties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.properties))
            except: 
                pass
        self.JKEY = modval
VkSparseImageFormatProperties2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("properties", VkSparseImageFormatProperties)
    ]

class VkPhysicalDeviceSparseImageFormatInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tiling"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tiling))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSparseImageFormatInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("format", c_int),
    ("type", c_int),
    ("samples", c_int),
    ("usage", c_uint),
    ("tiling", c_int)
    ]

class VkPhysicalDevicePointClippingProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pointClippingBehavior"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pointClippingBehavior))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePointClippingProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pointClippingBehavior", c_int)
    ]

class VkInputAttachmentAspectReference(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("subpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inputAttachmentIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inputAttachmentIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
VkInputAttachmentAspectReference._fields_ = [
    ("subpass", c_uint),
    ("inputAttachmentIndex", c_uint),
    ("aspectMask", c_uint)
    ]

class VkRenderPassInputAttachmentAspectCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("aspectReferenceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectReferenceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAspectReferences"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAspectReferences))
            except: 
                pass
        self.JKEY = modval
VkRenderPassInputAttachmentAspectCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("aspectReferenceCount", c_uint),
    ("pAspectReferences", VkInputAttachmentAspectReference)
    ]

class VkImageViewUsageCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
VkImageViewUsageCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("usage", c_uint)
    ]

class VkPipelineTessellationDomainOriginStateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("domainOrigin"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.domainOrigin))
            except: 
                pass
        self.JKEY = modval
VkPipelineTessellationDomainOriginStateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("domainOrigin", c_int)
    ]

class VkRenderPassMultiviewCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpassCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpassCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewMasks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewMasks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dependencyCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dependencyCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewOffsets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewOffsets))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("correlationMaskCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.correlationMaskCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCorrelationMasks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCorrelationMasks))
            except: 
                pass
        self.JKEY = modval
VkRenderPassMultiviewCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("subpassCount", c_uint),
    ("pViewMasks", POINTER(c_uint)),
    ("dependencyCount", c_uint),
    ("pViewOffsets", POINTER(c_int)),
    ("correlationMaskCount", c_uint),
    ("pCorrelationMasks", POINTER(c_uint))
    ]

class VkPhysicalDeviceMultiviewFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiview"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiview))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiviewGeometryShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiviewGeometryShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiviewTessellationShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiviewTessellationShader))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMultiviewFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("multiview", c_uint),
    ("multiviewGeometryShader", c_uint),
    ("multiviewTessellationShader", c_uint)
    ]

class VkPhysicalDeviceMultiviewProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMultiviewViewCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMultiviewViewCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMultiviewInstanceIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMultiviewInstanceIndex))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMultiviewProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxMultiviewViewCount", c_uint),
    ("maxMultiviewInstanceIndex", c_uint)
    ]

class VkPhysicalDeviceVariablePointersFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("variablePointersStorageBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.variablePointersStorageBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("variablePointers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.variablePointers))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVariablePointersFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("variablePointersStorageBuffer", c_uint),
    ("variablePointers", c_uint)
    ]

class VkPhysicalDeviceProtectedMemoryFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("protectedMemory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.protectedMemory))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceProtectedMemoryFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("protectedMemory", c_uint)
    ]

class VkPhysicalDeviceProtectedMemoryProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("protectedNoFault"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.protectedNoFault))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceProtectedMemoryProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("protectedNoFault", c_uint)
    ]

class VkDeviceQueueInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueIndex))
            except: 
                pass
        self.JKEY = modval
VkDeviceQueueInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("queueFamilyIndex", c_uint),
    ("queueIndex", c_uint)
    ]

class VkProtectedSubmitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("protectedSubmit"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.protectedSubmit))
            except: 
                pass
        self.JKEY = modval
VkProtectedSubmitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("protectedSubmit", c_uint)
    ]

class VkSamplerYcbcrConversionCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ycbcrModel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ycbcrModel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ycbcrRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ycbcrRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("components"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.components))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("xChromaOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.xChromaOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("yChromaOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.yChromaOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("chromaFilter"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.chromaFilter))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("forceExplicitReconstruction"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.forceExplicitReconstruction))
            except: 
                pass
        self.JKEY = modval
VkSamplerYcbcrConversionCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("format", c_int),
    ("ycbcrModel", c_int),
    ("ycbcrRange", c_int),
    ("components", VkComponentMapping),
    ("xChromaOffset", c_int),
    ("yChromaOffset", c_int),
    ("chromaFilter", c_int),
    ("forceExplicitReconstruction", c_uint)
    ]

class VkSamplerYcbcrConversionInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conversion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conversion))
            except: 
                pass
        self.JKEY = modval
VkSamplerYcbcrConversionInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("conversion", VkSamplerYcbcrConversion_T)
    ]

class VkBindImagePlaneMemoryInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeAspect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeAspect))
            except: 
                pass
        self.JKEY = modval
VkBindImagePlaneMemoryInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("planeAspect", c_int)
    ]

class VkImagePlaneMemoryRequirementsInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeAspect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeAspect))
            except: 
                pass
        self.JKEY = modval
VkImagePlaneMemoryRequirementsInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("planeAspect", c_int)
    ]

class VkPhysicalDeviceSamplerYcbcrConversionFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samplerYcbcrConversion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samplerYcbcrConversion))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSamplerYcbcrConversionFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("samplerYcbcrConversion", c_uint)
    ]

class VkSamplerYcbcrConversionImageFormatProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("combinedImageSamplerDescriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.combinedImageSamplerDescriptorCount))
            except: 
                pass
        self.JKEY = modval
VkSamplerYcbcrConversionImageFormatProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("combinedImageSamplerDescriptorCount", c_uint)
    ]

class VkDescriptorUpdateTemplateEntry(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("dstBinding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstBinding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstArrayElement"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstArrayElement))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
VkDescriptorUpdateTemplateEntry._fields_ = [
    ("dstBinding", c_uint),
    ("dstArrayElement", c_uint),
    ("descriptorCount", c_uint),
    ("descriptorType", c_int),
    ("offset", c_ulong),
    ("stride", c_ulong)
    ]

class VkDescriptorUpdateTemplateCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorUpdateEntryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorUpdateEntryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDescriptorUpdateEntries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDescriptorUpdateEntries))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("templateType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.templateType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorSetLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorSetLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineBindPoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineBindPoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("set"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.set))
            except: 
                pass
        self.JKEY = modval
VkDescriptorUpdateTemplateCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("descriptorUpdateEntryCount", c_uint),
    ("pDescriptorUpdateEntries", VkDescriptorUpdateTemplateEntry),
    ("templateType", c_int),
    ("descriptorSetLayout", VkDescriptorSetLayout_T),
    ("pipelineBindPoint", c_int),
    ("pipelineLayout", VkPipelineLayout_T),
    ("set", c_uint)
    ]

class VkExternalMemoryProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("externalMemoryFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalMemoryFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("exportFromImportedHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.exportFromImportedHandleTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compatibleHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compatibleHandleTypes))
            except: 
                pass
        self.JKEY = modval
VkExternalMemoryProperties._fields_ = [
    ("externalMemoryFeatures", c_uint),
    ("exportFromImportedHandleTypes", c_uint),
    ("compatibleHandleTypes", c_uint)
    ]

class VkPhysicalDeviceExternalImageFormatInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExternalImageFormatInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleType", c_int)
    ]

class VkExternalImageFormatProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("externalMemoryProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalMemoryProperties))
            except: 
                pass
        self.JKEY = modval
VkExternalImageFormatProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("externalMemoryProperties", VkExternalMemoryProperties)
    ]

class VkPhysicalDeviceExternalBufferInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExternalBufferInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("usage", c_uint),
    ("handleType", c_int)
    ]

class VkExternalBufferProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("externalMemoryProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalMemoryProperties))
            except: 
                pass
        self.JKEY = modval
VkExternalBufferProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("externalMemoryProperties", VkExternalMemoryProperties)
    ]

class VkPhysicalDeviceIDProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceUUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceUUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverUUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverUUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceLUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceLUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceNodeMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceNodeMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceLUIDValid"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceLUIDValid))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceIDProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceUUID", c_ubyte *16),
    ("driverUUID", c_ubyte *16),
    ("deviceLUID", c_ubyte *8),
    ("deviceNodeMask", c_uint),
    ("deviceLUIDValid", c_uint)
    ]

class VkExternalMemoryImageCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExternalMemoryImageCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkExternalMemoryBufferCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExternalMemoryBufferCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkExportMemoryAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExportMemoryAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkPhysicalDeviceExternalFenceInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExternalFenceInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleType", c_int)
    ]

class VkExternalFenceProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("exportFromImportedHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.exportFromImportedHandleTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compatibleHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compatibleHandleTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("externalFenceFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalFenceFeatures))
            except: 
                pass
        self.JKEY = modval
VkExternalFenceProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("exportFromImportedHandleTypes", c_uint),
    ("compatibleHandleTypes", c_uint),
    ("externalFenceFeatures", c_uint)
    ]

class VkExportFenceCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExportFenceCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkExportSemaphoreCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExportSemaphoreCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkPhysicalDeviceExternalSemaphoreInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExternalSemaphoreInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleType", c_int)
    ]

class VkExternalSemaphoreProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("exportFromImportedHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.exportFromImportedHandleTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compatibleHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compatibleHandleTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("externalSemaphoreFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalSemaphoreFeatures))
            except: 
                pass
        self.JKEY = modval
VkExternalSemaphoreProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("exportFromImportedHandleTypes", c_uint),
    ("compatibleHandleTypes", c_uint),
    ("externalSemaphoreFeatures", c_uint)
    ]

class VkPhysicalDeviceMaintenance3Properties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerSetDescriptors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerSetDescriptors))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMemoryAllocationSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMemoryAllocationSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMaintenance3Properties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxPerSetDescriptors", c_uint),
    ("maxMemoryAllocationSize", c_ulong)
    ]

class VkDescriptorSetLayoutSupport(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supported"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supported))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetLayoutSupport._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("supported", c_uint)
    ]

class VkPhysicalDeviceShaderDrawParametersFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDrawParameters"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDrawParameters))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderDrawParametersFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderDrawParameters", c_uint)
    ]

class VkPhysicalDeviceVulkan11Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageBuffer16BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageBuffer16BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformAndStorageBuffer16BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformAndStorageBuffer16BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storagePushConstant16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storagePushConstant16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageInputOutput16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageInputOutput16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiview"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiview))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiviewGeometryShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiviewGeometryShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiviewTessellationShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiviewTessellationShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("variablePointersStorageBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.variablePointersStorageBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("variablePointers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.variablePointers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("protectedMemory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.protectedMemory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samplerYcbcrConversion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samplerYcbcrConversion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDrawParameters"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDrawParameters))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkan11Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("storageBuffer16BitAccess", c_uint),
    ("uniformAndStorageBuffer16BitAccess", c_uint),
    ("storagePushConstant16", c_uint),
    ("storageInputOutput16", c_uint),
    ("multiview", c_uint),
    ("multiviewGeometryShader", c_uint),
    ("multiviewTessellationShader", c_uint),
    ("variablePointersStorageBuffer", c_uint),
    ("variablePointers", c_uint),
    ("protectedMemory", c_uint),
    ("samplerYcbcrConversion", c_uint),
    ("shaderDrawParameters", c_uint)
    ]

class VkPhysicalDeviceVulkan11Properties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceUUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceUUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverUUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverUUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceLUID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceLUID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceNodeMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceNodeMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceLUIDValid"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceLUIDValid))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSupportedStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSupportedStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSupportedOperations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSupportedOperations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupQuadOperationsInAllStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupQuadOperationsInAllStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pointClippingBehavior"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pointClippingBehavior))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMultiviewViewCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMultiviewViewCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMultiviewInstanceIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMultiviewInstanceIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("protectedNoFault"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.protectedNoFault))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerSetDescriptors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerSetDescriptors))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMemoryAllocationSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMemoryAllocationSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkan11Properties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceUUID", c_ubyte *16),
    ("driverUUID", c_ubyte *16),
    ("deviceLUID", c_ubyte *8),
    ("deviceNodeMask", c_uint),
    ("deviceLUIDValid", c_uint),
    ("subgroupSize", c_uint),
    ("subgroupSupportedStages", c_uint),
    ("subgroupSupportedOperations", c_uint),
    ("subgroupQuadOperationsInAllStages", c_uint),
    ("pointClippingBehavior", c_int),
    ("maxMultiviewViewCount", c_uint),
    ("maxMultiviewInstanceIndex", c_uint),
    ("protectedNoFault", c_uint),
    ("maxPerSetDescriptors", c_uint),
    ("maxMemoryAllocationSize", c_ulong)
    ]

class VkPhysicalDeviceVulkan12Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samplerMirrorClampToEdge"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samplerMirrorClampToEdge))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drawIndirectCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drawIndirectCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageBuffer8BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageBuffer8BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformAndStorageBuffer8BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformAndStorageBuffer8BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storagePushConstant8"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storagePushConstant8))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferInt64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferInt64Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedInt64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedInt64Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInt8"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInt8))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInputAttachmentArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInputAttachmentArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformTexelBufferArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformTexelBufferArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageTexelBufferArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageTexelBufferArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSampledImageArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSampledImageArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInputAttachmentArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInputAttachmentArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformTexelBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformTexelBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageTexelBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageTexelBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingUniformBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingUniformBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingSampledImageUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingSampledImageUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingStorageImageUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingStorageImageUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingStorageBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingStorageBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingUniformTexelBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingUniformTexelBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingStorageTexelBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingStorageTexelBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingUpdateUnusedWhilePending"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingUpdateUnusedWhilePending))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingPartiallyBound"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingPartiallyBound))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingVariableDescriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingVariableDescriptorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("runtimeDescriptorArray"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.runtimeDescriptorArray))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samplerFilterMinmax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samplerFilterMinmax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scalarBlockLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scalarBlockLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imagelessFramebuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imagelessFramebuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformBufferStandardLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformBufferStandardLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSubgroupExtendedTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSubgroupExtendedTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("separateDepthStencilLayouts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.separateDepthStencilLayouts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("hostQueryReset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.hostQueryReset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timelineSemaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timelineSemaphore))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddressCaptureReplay"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddressCaptureReplay))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddressMultiDevice"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddressMultiDevice))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vulkanMemoryModel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vulkanMemoryModel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vulkanMemoryModelDeviceScope"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vulkanMemoryModelDeviceScope))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vulkanMemoryModelAvailabilityVisibilityChains"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vulkanMemoryModelAvailabilityVisibilityChains))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderOutputViewportIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderOutputViewportIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderOutputLayer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderOutputLayer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupBroadcastDynamicId"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupBroadcastDynamicId))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkan12Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("samplerMirrorClampToEdge", c_uint),
    ("drawIndirectCount", c_uint),
    ("storageBuffer8BitAccess", c_uint),
    ("uniformAndStorageBuffer8BitAccess", c_uint),
    ("storagePushConstant8", c_uint),
    ("shaderBufferInt64Atomics", c_uint),
    ("shaderSharedInt64Atomics", c_uint),
    ("shaderFloat16", c_uint),
    ("shaderInt8", c_uint),
    ("descriptorIndexing", c_uint),
    ("shaderInputAttachmentArrayDynamicIndexing", c_uint),
    ("shaderUniformTexelBufferArrayDynamicIndexing", c_uint),
    ("shaderStorageTexelBufferArrayDynamicIndexing", c_uint),
    ("shaderUniformBufferArrayNonUniformIndexing", c_uint),
    ("shaderSampledImageArrayNonUniformIndexing", c_uint),
    ("shaderStorageBufferArrayNonUniformIndexing", c_uint),
    ("shaderStorageImageArrayNonUniformIndexing", c_uint),
    ("shaderInputAttachmentArrayNonUniformIndexing", c_uint),
    ("shaderUniformTexelBufferArrayNonUniformIndexing", c_uint),
    ("shaderStorageTexelBufferArrayNonUniformIndexing", c_uint),
    ("descriptorBindingUniformBufferUpdateAfterBind", c_uint),
    ("descriptorBindingSampledImageUpdateAfterBind", c_uint),
    ("descriptorBindingStorageImageUpdateAfterBind", c_uint),
    ("descriptorBindingStorageBufferUpdateAfterBind", c_uint),
    ("descriptorBindingUniformTexelBufferUpdateAfterBind", c_uint),
    ("descriptorBindingStorageTexelBufferUpdateAfterBind", c_uint),
    ("descriptorBindingUpdateUnusedWhilePending", c_uint),
    ("descriptorBindingPartiallyBound", c_uint),
    ("descriptorBindingVariableDescriptorCount", c_uint),
    ("runtimeDescriptorArray", c_uint),
    ("samplerFilterMinmax", c_uint),
    ("scalarBlockLayout", c_uint),
    ("imagelessFramebuffer", c_uint),
    ("uniformBufferStandardLayout", c_uint),
    ("shaderSubgroupExtendedTypes", c_uint),
    ("separateDepthStencilLayouts", c_uint),
    ("hostQueryReset", c_uint),
    ("timelineSemaphore", c_uint),
    ("bufferDeviceAddress", c_uint),
    ("bufferDeviceAddressCaptureReplay", c_uint),
    ("bufferDeviceAddressMultiDevice", c_uint),
    ("vulkanMemoryModel", c_uint),
    ("vulkanMemoryModelDeviceScope", c_uint),
    ("vulkanMemoryModelAvailabilityVisibilityChains", c_uint),
    ("shaderOutputViewportIndex", c_uint),
    ("shaderOutputLayer", c_uint),
    ("subgroupBroadcastDynamicId", c_uint)
    ]

class VkConformanceVersion(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("major"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.major))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subminor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subminor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("patch"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.patch))
            except: 
                pass
        self.JKEY = modval
VkConformanceVersion._fields_ = [
    ("major", c_ubyte),
    ("minor", c_ubyte),
    ("subminor", c_ubyte),
    ("patch", c_ubyte)
    ]

class VkPhysicalDeviceVulkan12Properties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conformanceVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conformanceVersion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("denormBehaviorIndependence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.denormBehaviorIndependence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("roundingModeIndependence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.roundingModeIndependence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSignedZeroInfNanPreserveFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSignedZeroInfNanPreserveFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSignedZeroInfNanPreserveFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSignedZeroInfNanPreserveFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSignedZeroInfNanPreserveFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSignedZeroInfNanPreserveFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormPreserveFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormPreserveFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormPreserveFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormPreserveFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormPreserveFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormPreserveFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormFlushToZeroFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormFlushToZeroFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormFlushToZeroFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormFlushToZeroFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormFlushToZeroFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormFlushToZeroFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTEFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTEFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTEFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTEFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTEFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTEFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTZFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTZFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTZFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTZFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTZFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTZFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxUpdateAfterBindDescriptorsInAllPools"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxUpdateAfterBindDescriptorsInAllPools))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformBufferArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformBufferArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSampledImageArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSampledImageArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageBufferArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageBufferArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInputAttachmentArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInputAttachmentArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustBufferAccessUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustBufferAccessUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("quadDivergentImplicitLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.quadDivergentImplicitLod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindSamplers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindUniformBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindUniformBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindStorageBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindStorageBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindSampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindSampledImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindStorageImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindStorageImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageUpdateAfterBindResources"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageUpdateAfterBindResources))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindSamplers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindUniformBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindUniformBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindStorageBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindStorageBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindSampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindSampledImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindStorageImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindStorageImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedDepthResolveModes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedDepthResolveModes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedStencilResolveModes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedStencilResolveModes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("independentResolveNone"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.independentResolveNone))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("independentResolve"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.independentResolve))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filterMinmaxSingleComponentFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filterMinmaxSingleComponentFormats))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filterMinmaxImageComponentMapping"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filterMinmaxImageComponentMapping))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTimelineSemaphoreValueDifference"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTimelineSemaphoreValueDifference))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("framebufferIntegerColorSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.framebufferIntegerColorSampleCounts))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkan12Properties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("driverID", c_int),
    ("driverName", c_byte *256),
    ("driverInfo", c_byte *256),
    ("conformanceVersion", VkConformanceVersion),
    ("denormBehaviorIndependence", c_int),
    ("roundingModeIndependence", c_int),
    ("shaderSignedZeroInfNanPreserveFloat16", c_uint),
    ("shaderSignedZeroInfNanPreserveFloat32", c_uint),
    ("shaderSignedZeroInfNanPreserveFloat64", c_uint),
    ("shaderDenormPreserveFloat16", c_uint),
    ("shaderDenormPreserveFloat32", c_uint),
    ("shaderDenormPreserveFloat64", c_uint),
    ("shaderDenormFlushToZeroFloat16", c_uint),
    ("shaderDenormFlushToZeroFloat32", c_uint),
    ("shaderDenormFlushToZeroFloat64", c_uint),
    ("shaderRoundingModeRTEFloat16", c_uint),
    ("shaderRoundingModeRTEFloat32", c_uint),
    ("shaderRoundingModeRTEFloat64", c_uint),
    ("shaderRoundingModeRTZFloat16", c_uint),
    ("shaderRoundingModeRTZFloat32", c_uint),
    ("shaderRoundingModeRTZFloat64", c_uint),
    ("maxUpdateAfterBindDescriptorsInAllPools", c_uint),
    ("shaderUniformBufferArrayNonUniformIndexingNative", c_uint),
    ("shaderSampledImageArrayNonUniformIndexingNative", c_uint),
    ("shaderStorageBufferArrayNonUniformIndexingNative", c_uint),
    ("shaderStorageImageArrayNonUniformIndexingNative", c_uint),
    ("shaderInputAttachmentArrayNonUniformIndexingNative", c_uint),
    ("robustBufferAccessUpdateAfterBind", c_uint),
    ("quadDivergentImplicitLod", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindSamplers", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindUniformBuffers", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindStorageBuffers", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindSampledImages", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindStorageImages", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindInputAttachments", c_uint),
    ("maxPerStageUpdateAfterBindResources", c_uint),
    ("maxDescriptorSetUpdateAfterBindSamplers", c_uint),
    ("maxDescriptorSetUpdateAfterBindUniformBuffers", c_uint),
    ("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic", c_uint),
    ("maxDescriptorSetUpdateAfterBindStorageBuffers", c_uint),
    ("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic", c_uint),
    ("maxDescriptorSetUpdateAfterBindSampledImages", c_uint),
    ("maxDescriptorSetUpdateAfterBindStorageImages", c_uint),
    ("maxDescriptorSetUpdateAfterBindInputAttachments", c_uint),
    ("supportedDepthResolveModes", c_uint),
    ("supportedStencilResolveModes", c_uint),
    ("independentResolveNone", c_uint),
    ("independentResolve", c_uint),
    ("filterMinmaxSingleComponentFormats", c_uint),
    ("filterMinmaxImageComponentMapping", c_uint),
    ("maxTimelineSemaphoreValueDifference", c_ulong),
    ("framebufferIntegerColorSampleCounts", c_uint)
    ]

class VkImageFormatListCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewFormatCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewFormatCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewFormats))
            except: 
                pass
        self.JKEY = modval
VkImageFormatListCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("viewFormatCount", c_uint),
    ("pViewFormats", POINTER(c_int))
    ]

class VkAttachmentDescription2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("samples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.samples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("loadOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.loadOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storeOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storeOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilLoadOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilLoadOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilStoreOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilStoreOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("initialLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.initialLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("finalLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.finalLayout))
            except: 
                pass
        self.JKEY = modval
VkAttachmentDescription2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("format", c_int),
    ("samples", c_int),
    ("loadOp", c_int),
    ("storeOp", c_int),
    ("stencilLoadOp", c_int),
    ("stencilStoreOp", c_int),
    ("initialLayout", c_int),
    ("finalLayout", c_int)
    ]

class VkAttachmentReference2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("aspectMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aspectMask))
            except: 
                pass
        self.JKEY = modval
VkAttachmentReference2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("attachment", c_uint),
    ("layout", c_int),
    ("aspectMask", c_uint)
    ]

class VkSubpassDescription2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineBindPoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineBindPoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inputAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inputAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pResolveAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pResolveAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDepthStencilAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDepthStencilAttachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("preserveAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.preserveAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPreserveAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPreserveAttachments))
            except: 
                pass
        self.JKEY = modval
VkSubpassDescription2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pipelineBindPoint", c_int),
    ("viewMask", c_uint),
    ("inputAttachmentCount", c_uint),
    ("pInputAttachments", VkAttachmentReference2),
    ("colorAttachmentCount", c_uint),
    ("pColorAttachments", VkAttachmentReference2),
    ("pResolveAttachments", VkAttachmentReference2),
    ("pDepthStencilAttachment", VkAttachmentReference2),
    ("preserveAttachmentCount", c_uint),
    ("pPreserveAttachments", POINTER(c_uint))
    ]

class VkSubpassDependency2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcSubpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubpass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dependencyFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dependencyFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewOffset))
            except: 
                pass
        self.JKEY = modval
VkSubpassDependency2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcSubpass", c_uint),
    ("dstSubpass", c_uint),
    ("srcStageMask", c_uint),
    ("dstStageMask", c_uint),
    ("srcAccessMask", c_uint),
    ("dstAccessMask", c_uint),
    ("dependencyFlags", c_uint),
    ("viewOffset", c_int)
    ]

class VkRenderPassCreateInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpassCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpassCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSubpasses"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSubpasses))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dependencyCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dependencyCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDependencies"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDependencies))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("correlatedViewMaskCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.correlatedViewMaskCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCorrelatedViewMasks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCorrelatedViewMasks))
            except: 
                pass
        self.JKEY = modval
VkRenderPassCreateInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("attachmentCount", c_uint),
    ("pAttachments", VkAttachmentDescription2),
    ("subpassCount", c_uint),
    ("pSubpasses", VkSubpassDescription2),
    ("dependencyCount", c_uint),
    ("pDependencies", VkSubpassDependency2),
    ("correlatedViewMaskCount", c_uint),
    ("pCorrelatedViewMasks", POINTER(c_uint))
    ]

class VkSubpassBeginInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("contents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.contents))
            except: 
                pass
        self.JKEY = modval
VkSubpassBeginInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("contents", c_int)
    ]

class VkSubpassEndInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
VkSubpassEndInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p)
    ]

class VkPhysicalDevice8BitStorageFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageBuffer8BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageBuffer8BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformAndStorageBuffer8BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformAndStorageBuffer8BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storagePushConstant8"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storagePushConstant8))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevice8BitStorageFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("storageBuffer8BitAccess", c_uint),
    ("uniformAndStorageBuffer8BitAccess", c_uint),
    ("storagePushConstant8", c_uint)
    ]

class VkPhysicalDeviceDriverProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("driverInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.driverInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conformanceVersion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conformanceVersion))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDriverProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("driverID", c_int),
    ("driverName", c_byte *256),
    ("driverInfo", c_byte *256),
    ("conformanceVersion", VkConformanceVersion)
    ]

class VkPhysicalDeviceShaderAtomicInt64Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferInt64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferInt64Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedInt64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedInt64Atomics))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderAtomicInt64Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderBufferInt64Atomics", c_uint),
    ("shaderSharedInt64Atomics", c_uint)
    ]

class VkPhysicalDeviceShaderFloat16Int8Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInt8"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInt8))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderFloat16Int8Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderFloat16", c_uint),
    ("shaderInt8", c_uint)
    ]

class VkPhysicalDeviceFloatControlsProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("denormBehaviorIndependence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.denormBehaviorIndependence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("roundingModeIndependence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.roundingModeIndependence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSignedZeroInfNanPreserveFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSignedZeroInfNanPreserveFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSignedZeroInfNanPreserveFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSignedZeroInfNanPreserveFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSignedZeroInfNanPreserveFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSignedZeroInfNanPreserveFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormPreserveFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormPreserveFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormPreserveFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormPreserveFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormPreserveFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormPreserveFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormFlushToZeroFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormFlushToZeroFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormFlushToZeroFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormFlushToZeroFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDenormFlushToZeroFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDenormFlushToZeroFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTEFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTEFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTEFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTEFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTEFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTEFloat64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTZFloat16"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTZFloat16))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTZFloat32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTZFloat32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderRoundingModeRTZFloat64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderRoundingModeRTZFloat64))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFloatControlsProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("denormBehaviorIndependence", c_int),
    ("roundingModeIndependence", c_int),
    ("shaderSignedZeroInfNanPreserveFloat16", c_uint),
    ("shaderSignedZeroInfNanPreserveFloat32", c_uint),
    ("shaderSignedZeroInfNanPreserveFloat64", c_uint),
    ("shaderDenormPreserveFloat16", c_uint),
    ("shaderDenormPreserveFloat32", c_uint),
    ("shaderDenormPreserveFloat64", c_uint),
    ("shaderDenormFlushToZeroFloat16", c_uint),
    ("shaderDenormFlushToZeroFloat32", c_uint),
    ("shaderDenormFlushToZeroFloat64", c_uint),
    ("shaderRoundingModeRTEFloat16", c_uint),
    ("shaderRoundingModeRTEFloat32", c_uint),
    ("shaderRoundingModeRTEFloat64", c_uint),
    ("shaderRoundingModeRTZFloat16", c_uint),
    ("shaderRoundingModeRTZFloat32", c_uint),
    ("shaderRoundingModeRTZFloat64", c_uint)
    ]

class VkDescriptorSetLayoutBindingFlagsCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bindingCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bindingCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBindingFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBindingFlags))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetLayoutBindingFlagsCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("bindingCount", c_uint),
    ("pBindingFlags", POINTER(c_uint))
    ]

class VkPhysicalDeviceDescriptorIndexingFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInputAttachmentArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInputAttachmentArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformTexelBufferArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformTexelBufferArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageTexelBufferArrayDynamicIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageTexelBufferArrayDynamicIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSampledImageArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSampledImageArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInputAttachmentArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInputAttachmentArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformTexelBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformTexelBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageTexelBufferArrayNonUniformIndexing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageTexelBufferArrayNonUniformIndexing))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingUniformBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingUniformBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingSampledImageUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingSampledImageUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingStorageImageUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingStorageImageUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingStorageBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingStorageBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingUniformTexelBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingUniformTexelBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingStorageTexelBufferUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingStorageTexelBufferUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingUpdateUnusedWhilePending"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingUpdateUnusedWhilePending))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingPartiallyBound"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingPartiallyBound))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingVariableDescriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingVariableDescriptorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("runtimeDescriptorArray"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.runtimeDescriptorArray))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDescriptorIndexingFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderInputAttachmentArrayDynamicIndexing", c_uint),
    ("shaderUniformTexelBufferArrayDynamicIndexing", c_uint),
    ("shaderStorageTexelBufferArrayDynamicIndexing", c_uint),
    ("shaderUniformBufferArrayNonUniformIndexing", c_uint),
    ("shaderSampledImageArrayNonUniformIndexing", c_uint),
    ("shaderStorageBufferArrayNonUniformIndexing", c_uint),
    ("shaderStorageImageArrayNonUniformIndexing", c_uint),
    ("shaderInputAttachmentArrayNonUniformIndexing", c_uint),
    ("shaderUniformTexelBufferArrayNonUniformIndexing", c_uint),
    ("shaderStorageTexelBufferArrayNonUniformIndexing", c_uint),
    ("descriptorBindingUniformBufferUpdateAfterBind", c_uint),
    ("descriptorBindingSampledImageUpdateAfterBind", c_uint),
    ("descriptorBindingStorageImageUpdateAfterBind", c_uint),
    ("descriptorBindingStorageBufferUpdateAfterBind", c_uint),
    ("descriptorBindingUniformTexelBufferUpdateAfterBind", c_uint),
    ("descriptorBindingStorageTexelBufferUpdateAfterBind", c_uint),
    ("descriptorBindingUpdateUnusedWhilePending", c_uint),
    ("descriptorBindingPartiallyBound", c_uint),
    ("descriptorBindingVariableDescriptorCount", c_uint),
    ("runtimeDescriptorArray", c_uint)
    ]

class VkPhysicalDeviceDescriptorIndexingProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxUpdateAfterBindDescriptorsInAllPools"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxUpdateAfterBindDescriptorsInAllPools))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderUniformBufferArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderUniformBufferArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSampledImageArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSampledImageArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageBufferArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageBufferArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderStorageImageArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStorageImageArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderInputAttachmentArrayNonUniformIndexingNative"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderInputAttachmentArrayNonUniformIndexingNative))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustBufferAccessUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustBufferAccessUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("quadDivergentImplicitLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.quadDivergentImplicitLod))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindSamplers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindUniformBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindUniformBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindStorageBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindStorageBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindSampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindSampledImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindStorageImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindStorageImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindInputAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageUpdateAfterBindResources"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageUpdateAfterBindResources))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindSamplers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindUniformBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindUniformBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindStorageBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindStorageBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindSampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindSampledImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindStorageImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindStorageImages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindInputAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindInputAttachments))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDescriptorIndexingProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxUpdateAfterBindDescriptorsInAllPools", c_uint),
    ("shaderUniformBufferArrayNonUniformIndexingNative", c_uint),
    ("shaderSampledImageArrayNonUniformIndexingNative", c_uint),
    ("shaderStorageBufferArrayNonUniformIndexingNative", c_uint),
    ("shaderStorageImageArrayNonUniformIndexingNative", c_uint),
    ("shaderInputAttachmentArrayNonUniformIndexingNative", c_uint),
    ("robustBufferAccessUpdateAfterBind", c_uint),
    ("quadDivergentImplicitLod", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindSamplers", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindUniformBuffers", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindStorageBuffers", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindSampledImages", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindStorageImages", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindInputAttachments", c_uint),
    ("maxPerStageUpdateAfterBindResources", c_uint),
    ("maxDescriptorSetUpdateAfterBindSamplers", c_uint),
    ("maxDescriptorSetUpdateAfterBindUniformBuffers", c_uint),
    ("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic", c_uint),
    ("maxDescriptorSetUpdateAfterBindStorageBuffers", c_uint),
    ("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic", c_uint),
    ("maxDescriptorSetUpdateAfterBindSampledImages", c_uint),
    ("maxDescriptorSetUpdateAfterBindStorageImages", c_uint),
    ("maxDescriptorSetUpdateAfterBindInputAttachments", c_uint)
    ]

class VkDescriptorSetVariableDescriptorCountAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorSetCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorSetCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDescriptorCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDescriptorCounts))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetVariableDescriptorCountAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("descriptorSetCount", c_uint),
    ("pDescriptorCounts", POINTER(c_uint))
    ]

class VkDescriptorSetVariableDescriptorCountLayoutSupport(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVariableDescriptorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVariableDescriptorCount))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetVariableDescriptorCountLayoutSupport._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxVariableDescriptorCount", c_uint)
    ]

class VkSubpassDescriptionDepthStencilResolve(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthResolveMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthResolveMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilResolveMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilResolveMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDepthStencilResolveAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDepthStencilResolveAttachment))
            except: 
                pass
        self.JKEY = modval
VkSubpassDescriptionDepthStencilResolve._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("depthResolveMode", c_int),
    ("stencilResolveMode", c_int),
    ("pDepthStencilResolveAttachment", VkAttachmentReference2)
    ]

class VkPhysicalDeviceDepthStencilResolveProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedDepthResolveModes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedDepthResolveModes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedStencilResolveModes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedStencilResolveModes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("independentResolveNone"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.independentResolveNone))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("independentResolve"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.independentResolve))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDepthStencilResolveProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("supportedDepthResolveModes", c_uint),
    ("supportedStencilResolveModes", c_uint),
    ("independentResolveNone", c_uint),
    ("independentResolve", c_uint)
    ]

class VkPhysicalDeviceScalarBlockLayoutFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scalarBlockLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scalarBlockLayout))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceScalarBlockLayoutFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("scalarBlockLayout", c_uint)
    ]

class VkImageStencilUsageCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilUsage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilUsage))
            except: 
                pass
        self.JKEY = modval
VkImageStencilUsageCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stencilUsage", c_uint)
    ]

class VkSamplerReductionModeCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("reductionMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.reductionMode))
            except: 
                pass
        self.JKEY = modval
VkSamplerReductionModeCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("reductionMode", c_int)
    ]

class VkPhysicalDeviceSamplerFilterMinmaxProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filterMinmaxSingleComponentFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filterMinmaxSingleComponentFormats))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filterMinmaxImageComponentMapping"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filterMinmaxImageComponentMapping))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSamplerFilterMinmaxProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("filterMinmaxSingleComponentFormats", c_uint),
    ("filterMinmaxImageComponentMapping", c_uint)
    ]

class VkPhysicalDeviceVulkanMemoryModelFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vulkanMemoryModel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vulkanMemoryModel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vulkanMemoryModelDeviceScope"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vulkanMemoryModelDeviceScope))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vulkanMemoryModelAvailabilityVisibilityChains"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vulkanMemoryModelAvailabilityVisibilityChains))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkanMemoryModelFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vulkanMemoryModel", c_uint),
    ("vulkanMemoryModelDeviceScope", c_uint),
    ("vulkanMemoryModelAvailabilityVisibilityChains", c_uint)
    ]

class VkPhysicalDeviceImagelessFramebufferFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imagelessFramebuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imagelessFramebuffer))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImagelessFramebufferFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imagelessFramebuffer", c_uint)
    ]

class VkFramebufferAttachmentImageInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("usage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.usage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("width"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.width))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("height"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.height))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layerCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewFormatCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewFormatCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewFormats))
            except: 
                pass
        self.JKEY = modval
VkFramebufferAttachmentImageInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("usage", c_uint),
    ("width", c_uint),
    ("height", c_uint),
    ("layerCount", c_uint),
    ("viewFormatCount", c_uint),
    ("pViewFormats", POINTER(c_int))
    ]

class VkFramebufferAttachmentsCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentImageInfoCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentImageInfoCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachmentImageInfos"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachmentImageInfos))
            except: 
                pass
        self.JKEY = modval
VkFramebufferAttachmentsCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("attachmentImageInfoCount", c_uint),
    ("pAttachmentImageInfos", VkFramebufferAttachmentImageInfo)
    ]

class VkRenderPassAttachmentBeginInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachments))
            except: 
                pass
        self.JKEY = modval
VkRenderPassAttachmentBeginInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("attachmentCount", c_uint),
    ("pAttachments", POINTER(VkImageView_T))
    ]

class VkPhysicalDeviceUniformBufferStandardLayoutFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformBufferStandardLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformBufferStandardLayout))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceUniformBufferStandardLayoutFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("uniformBufferStandardLayout", c_uint)
    ]

class VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSubgroupExtendedTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSubgroupExtendedTypes))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderSubgroupExtendedTypes", c_uint)
    ]

class VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("separateDepthStencilLayouts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.separateDepthStencilLayouts))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("separateDepthStencilLayouts", c_uint)
    ]

class VkAttachmentReferenceStencilLayout(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilLayout))
            except: 
                pass
        self.JKEY = modval
VkAttachmentReferenceStencilLayout._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stencilLayout", c_int)
    ]

class VkAttachmentDescriptionStencilLayout(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilInitialLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilInitialLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilFinalLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilFinalLayout))
            except: 
                pass
        self.JKEY = modval
VkAttachmentDescriptionStencilLayout._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stencilInitialLayout", c_int),
    ("stencilFinalLayout", c_int)
    ]

class VkPhysicalDeviceHostQueryResetFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("hostQueryReset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.hostQueryReset))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceHostQueryResetFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("hostQueryReset", c_uint)
    ]

class VkPhysicalDeviceTimelineSemaphoreFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timelineSemaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timelineSemaphore))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTimelineSemaphoreFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("timelineSemaphore", c_uint)
    ]

class VkPhysicalDeviceTimelineSemaphoreProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTimelineSemaphoreValueDifference"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTimelineSemaphoreValueDifference))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTimelineSemaphoreProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxTimelineSemaphoreValueDifference", c_ulong)
    ]

class VkSemaphoreTypeCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphoreType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphoreType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("initialValue"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.initialValue))
            except: 
                pass
        self.JKEY = modval
VkSemaphoreTypeCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("semaphoreType", c_int),
    ("initialValue", c_ulong)
    ]

class VkTimelineSemaphoreSubmitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("waitSemaphoreValueCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.waitSemaphoreValueCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitSemaphoreValues"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitSemaphoreValues))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("signalSemaphoreValueCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.signalSemaphoreValueCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSignalSemaphoreValues"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSignalSemaphoreValues))
            except: 
                pass
        self.JKEY = modval
VkTimelineSemaphoreSubmitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("waitSemaphoreValueCount", c_uint),
    ("pWaitSemaphoreValues", POINTER(c_ulong)),
    ("signalSemaphoreValueCount", c_uint),
    ("pSignalSemaphoreValues", POINTER(c_ulong))
    ]

class VkSemaphoreWaitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSemaphores"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSemaphores))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pValues"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pValues))
            except: 
                pass
        self.JKEY = modval
VkSemaphoreWaitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("semaphoreCount", c_uint),
    ("pSemaphores", POINTER(VkSemaphore_T)),
    ("pValues", POINTER(c_ulong))
    ]

class VkSemaphoreSignalInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphore))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("value"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.value))
            except: 
                pass
        self.JKEY = modval
VkSemaphoreSignalInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("semaphore", VkSemaphore_T),
    ("value", c_ulong)
    ]

class VkPhysicalDeviceBufferDeviceAddressFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddressCaptureReplay"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddressCaptureReplay))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddressMultiDevice"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddressMultiDevice))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceBufferDeviceAddressFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("bufferDeviceAddress", c_uint),
    ("bufferDeviceAddressCaptureReplay", c_uint),
    ("bufferDeviceAddressMultiDevice", c_uint)
    ]

class VkBufferDeviceAddressInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
VkBufferDeviceAddressInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("buffer", VkBuffer_T)
    ]

class VkBufferOpaqueCaptureAddressCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("opaqueCaptureAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.opaqueCaptureAddress))
            except: 
                pass
        self.JKEY = modval
VkBufferOpaqueCaptureAddressCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("opaqueCaptureAddress", c_ulong)
    ]

class VkMemoryOpaqueCaptureAddressAllocateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("opaqueCaptureAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.opaqueCaptureAddress))
            except: 
                pass
        self.JKEY = modval
VkMemoryOpaqueCaptureAddressAllocateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("opaqueCaptureAddress", c_ulong)
    ]

class VkDeviceMemoryOpaqueCaptureAddressInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
VkDeviceMemoryOpaqueCaptureAddressInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memory", VkDeviceMemory_T)
    ]

class VkPhysicalDeviceVulkan13Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustImageAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustImageAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inlineUniformBlock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inlineUniformBlock))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingInlineUniformBlockUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingInlineUniformBlockUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineCreationCacheControl"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineCreationCacheControl))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("privateData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.privateData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDemoteToHelperInvocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDemoteToHelperInvocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderTerminateInvocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderTerminateInvocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSizeControl"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSizeControl))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("computeFullSubgroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.computeFullSubgroups))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("synchronization2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.synchronization2))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("textureCompressionASTC_HDR"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.textureCompressionASTC_HDR))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderZeroInitializeWorkgroupMemory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderZeroInitializeWorkgroupMemory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dynamicRendering"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dynamicRendering))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderIntegerDotProduct"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderIntegerDotProduct))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maintenance4"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maintenance4))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkan13Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("robustImageAccess", c_uint),
    ("inlineUniformBlock", c_uint),
    ("descriptorBindingInlineUniformBlockUpdateAfterBind", c_uint),
    ("pipelineCreationCacheControl", c_uint),
    ("privateData", c_uint),
    ("shaderDemoteToHelperInvocation", c_uint),
    ("shaderTerminateInvocation", c_uint),
    ("subgroupSizeControl", c_uint),
    ("computeFullSubgroups", c_uint),
    ("synchronization2", c_uint),
    ("textureCompressionASTC_HDR", c_uint),
    ("shaderZeroInitializeWorkgroupMemory", c_uint),
    ("dynamicRendering", c_uint),
    ("shaderIntegerDotProduct", c_uint),
    ("maintenance4", c_uint)
    ]

class VkPhysicalDeviceVulkan13Properties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSubgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSubgroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSubgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSubgroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxComputeWorkgroupSubgroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxComputeWorkgroupSubgroups))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("requiredSubgroupSizeStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.requiredSubgroupSizeStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInlineUniformBlockSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInlineUniformBlockSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInlineUniformTotalSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInlineUniformTotalSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct8BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct8BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct8BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct8BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct8BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct8BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct4x8BitPackedUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct4x8BitPackedUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct4x8BitPackedSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct4x8BitPackedSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct4x8BitPackedMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct4x8BitPackedMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct16BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct16BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct16BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct16BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct16BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct16BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct32BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct32BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct32BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct32BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct32BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct32BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct64BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct64BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct64BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct64BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct64BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct64BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating8BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating8BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating16BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating16BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating32BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating32BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating64BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating64BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageTexelBufferOffsetAlignmentBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageTexelBufferOffsetAlignmentBytes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageTexelBufferOffsetSingleTexelAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageTexelBufferOffsetSingleTexelAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformTexelBufferOffsetAlignmentBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformTexelBufferOffsetAlignmentBytes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformTexelBufferOffsetSingleTexelAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformTexelBufferOffsetSingleTexelAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxBufferSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxBufferSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVulkan13Properties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minSubgroupSize", c_uint),
    ("maxSubgroupSize", c_uint),
    ("maxComputeWorkgroupSubgroups", c_uint),
    ("requiredSubgroupSizeStages", c_uint),
    ("maxInlineUniformBlockSize", c_uint),
    ("maxPerStageDescriptorInlineUniformBlocks", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks", c_uint),
    ("maxDescriptorSetInlineUniformBlocks", c_uint),
    ("maxDescriptorSetUpdateAfterBindInlineUniformBlocks", c_uint),
    ("maxInlineUniformTotalSize", c_uint),
    ("integerDotProduct8BitUnsignedAccelerated", c_uint),
    ("integerDotProduct8BitSignedAccelerated", c_uint),
    ("integerDotProduct8BitMixedSignednessAccelerated", c_uint),
    ("integerDotProduct4x8BitPackedUnsignedAccelerated", c_uint),
    ("integerDotProduct4x8BitPackedSignedAccelerated", c_uint),
    ("integerDotProduct4x8BitPackedMixedSignednessAccelerated", c_uint),
    ("integerDotProduct16BitUnsignedAccelerated", c_uint),
    ("integerDotProduct16BitSignedAccelerated", c_uint),
    ("integerDotProduct16BitMixedSignednessAccelerated", c_uint),
    ("integerDotProduct32BitUnsignedAccelerated", c_uint),
    ("integerDotProduct32BitSignedAccelerated", c_uint),
    ("integerDotProduct32BitMixedSignednessAccelerated", c_uint),
    ("integerDotProduct64BitUnsignedAccelerated", c_uint),
    ("integerDotProduct64BitSignedAccelerated", c_uint),
    ("integerDotProduct64BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating8BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating8BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating16BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating16BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating32BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating32BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating64BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating64BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated", c_uint),
    ("storageTexelBufferOffsetAlignmentBytes", c_ulong),
    ("storageTexelBufferOffsetSingleTexelAlignment", c_uint),
    ("uniformTexelBufferOffsetAlignmentBytes", c_ulong),
    ("uniformTexelBufferOffsetSingleTexelAlignment", c_uint),
    ("maxBufferSize", c_ulong)
    ]

class VkPipelineCreationFeedback(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("duration"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.duration))
            except: 
                pass
        self.JKEY = modval
VkPipelineCreationFeedback._fields_ = [
    ("flags", c_uint),
    ("duration", c_ulong)
    ]

class VkPipelineCreationFeedbackCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPipelineCreationFeedback"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPipelineCreationFeedback))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineStageCreationFeedbackCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineStageCreationFeedbackCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPipelineStageCreationFeedbacks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPipelineStageCreationFeedbacks))
            except: 
                pass
        self.JKEY = modval
VkPipelineCreationFeedbackCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pPipelineCreationFeedback", VkPipelineCreationFeedback),
    ("pipelineStageCreationFeedbackCount", c_uint),
    ("pPipelineStageCreationFeedbacks", VkPipelineCreationFeedback)
    ]

class VkPhysicalDeviceShaderTerminateInvocationFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderTerminateInvocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderTerminateInvocation))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderTerminateInvocationFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderTerminateInvocation", c_uint)
    ]

class VkPhysicalDeviceToolProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("name"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.name))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("version"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.version))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("purposes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.purposes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("description"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.description))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layer))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceToolProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("name", c_byte *256),
    ("version", c_byte *256),
    ("purposes", c_uint),
    ("description", c_byte *256),
    ("layer", c_byte *256)
    ]

class VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDemoteToHelperInvocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDemoteToHelperInvocation))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderDemoteToHelperInvocation", c_uint)
    ]

class VkPhysicalDevicePrivateDataFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("privateData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.privateData))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePrivateDataFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("privateData", c_uint)
    ]

class VkDevicePrivateDataCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("privateDataSlotRequestCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.privateDataSlotRequestCount))
            except: 
                pass
        self.JKEY = modval
VkDevicePrivateDataCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("privateDataSlotRequestCount", c_uint)
    ]

class VkPrivateDataSlotCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkPrivateDataSlotCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkPhysicalDevicePipelineCreationCacheControlFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineCreationCacheControl"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineCreationCacheControl))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePipelineCreationCacheControlFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipelineCreationCacheControl", c_uint)
    ]

class VkMemoryBarrier2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
VkMemoryBarrier2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcStageMask", c_ulong),
    ("srcAccessMask", c_ulong),
    ("dstStageMask", c_ulong),
    ("dstAccessMask", c_ulong)
    ]

class VkBufferMemoryBarrier2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkBufferMemoryBarrier2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcStageMask", c_ulong),
    ("srcAccessMask", c_ulong),
    ("dstStageMask", c_ulong),
    ("dstAccessMask", c_ulong),
    ("srcQueueFamilyIndex", c_uint),
    ("dstQueueFamilyIndex", c_uint),
    ("buffer", VkBuffer_T),
    ("offset", c_ulong),
    ("size", c_ulong)
    ]

class VkImageMemoryBarrier2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccessMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccessMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("oldLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.oldLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("newLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.newLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstQueueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstQueueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subresourceRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subresourceRange))
            except: 
                pass
        self.JKEY = modval
VkImageMemoryBarrier2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcStageMask", c_ulong),
    ("srcAccessMask", c_ulong),
    ("dstStageMask", c_ulong),
    ("dstAccessMask", c_ulong),
    ("oldLayout", c_int),
    ("newLayout", c_int),
    ("srcQueueFamilyIndex", c_uint),
    ("dstQueueFamilyIndex", c_uint),
    ("image", VkImage_T),
    ("subresourceRange", VkImageSubresourceRange)
    ]

class VkDependencyInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dependencyFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dependencyFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryBarrierCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryBarrierCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMemoryBarriers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMemoryBarriers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferMemoryBarrierCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferMemoryBarrierCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pBufferMemoryBarriers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pBufferMemoryBarriers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageMemoryBarrierCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageMemoryBarrierCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pImageMemoryBarriers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pImageMemoryBarriers))
            except: 
                pass
        self.JKEY = modval
VkDependencyInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dependencyFlags", c_uint),
    ("memoryBarrierCount", c_uint),
    ("pMemoryBarriers", VkMemoryBarrier2),
    ("bufferMemoryBarrierCount", c_uint),
    ("pBufferMemoryBarriers", VkBufferMemoryBarrier2),
    ("imageMemoryBarrierCount", c_uint),
    ("pImageMemoryBarriers", VkImageMemoryBarrier2)
    ]

class VkSemaphoreSubmitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphore))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("value"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.value))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceIndex))
            except: 
                pass
        self.JKEY = modval
VkSemaphoreSubmitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("semaphore", VkSemaphore_T),
    ("value", c_ulong),
    ("stageMask", c_ulong),
    ("deviceIndex", c_uint)
    ]

class VkCommandBufferSubmitInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("commandBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.commandBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceMask))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferSubmitInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("commandBuffer", VkCommandBuffer_T),
    ("deviceMask", c_uint)
    ]

class VkSubmitInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("waitSemaphoreInfoCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.waitSemaphoreInfoCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitSemaphoreInfos"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitSemaphoreInfos))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("commandBufferInfoCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.commandBufferInfoCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCommandBufferInfos"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCommandBufferInfos))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("signalSemaphoreInfoCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.signalSemaphoreInfoCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSignalSemaphoreInfos"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSignalSemaphoreInfos))
            except: 
                pass
        self.JKEY = modval
VkSubmitInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("waitSemaphoreInfoCount", c_uint),
    ("pWaitSemaphoreInfos", VkSemaphoreSubmitInfo),
    ("commandBufferInfoCount", c_uint),
    ("pCommandBufferInfos", VkCommandBufferSubmitInfo),
    ("signalSemaphoreInfoCount", c_uint),
    ("pSignalSemaphoreInfos", VkSemaphoreSubmitInfo)
    ]

class VkPhysicalDeviceSynchronization2Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("synchronization2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.synchronization2))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSynchronization2Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("synchronization2", c_uint)
    ]

class VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderZeroInitializeWorkgroupMemory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderZeroInitializeWorkgroupMemory))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderZeroInitializeWorkgroupMemory", c_uint)
    ]

class VkPhysicalDeviceImageRobustnessFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustImageAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustImageAccess))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImageRobustnessFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("robustImageAccess", c_uint)
    ]

class VkBufferCopy2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkBufferCopy2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcOffset", c_ulong),
    ("dstOffset", c_ulong),
    ("size", c_ulong)
    ]

class VkCopyBufferInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("regionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.regionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
VkCopyBufferInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcBuffer", VkBuffer_T),
    ("dstBuffer", VkBuffer_T),
    ("regionCount", c_uint),
    ("pRegions", VkBufferCopy2)
    ]

class VkImageCopy2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
VkImageCopy2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcSubresource", VkImageSubresourceLayers),
    ("srcOffset", VkOffset3D),
    ("dstSubresource", VkImageSubresourceLayers),
    ("dstOffset", VkOffset3D),
    ("extent", VkExtent3D)
    ]

class VkCopyImageInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("regionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.regionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
VkCopyImageInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcImage", VkImage_T),
    ("srcImageLayout", c_int),
    ("dstImage", VkImage_T),
    ("dstImageLayout", c_int),
    ("regionCount", c_uint),
    ("pRegions", VkImageCopy2)
    ]

class VkBufferImageCopy2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferRowLength"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferRowLength))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferImageHeight"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferImageHeight))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageExtent))
            except: 
                pass
        self.JKEY = modval
VkBufferImageCopy2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("bufferOffset", c_ulong),
    ("bufferRowLength", c_uint),
    ("bufferImageHeight", c_uint),
    ("imageSubresource", VkImageSubresourceLayers),
    ("imageOffset", VkOffset3D),
    ("imageExtent", VkExtent3D)
    ]

class VkCopyBufferToImageInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("regionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.regionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
VkCopyBufferToImageInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcBuffer", VkBuffer_T),
    ("dstImage", VkImage_T),
    ("dstImageLayout", c_int),
    ("regionCount", c_uint),
    ("pRegions", VkBufferImageCopy2)
    ]

class VkCopyImageToBufferInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("regionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.regionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
VkCopyImageToBufferInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcImage", VkImage_T),
    ("srcImageLayout", c_int),
    ("dstBuffer", VkBuffer_T),
    ("regionCount", c_uint),
    ("pRegions", VkBufferImageCopy2)
    ]

class VkImageBlit2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffsets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffsets))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffsets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffsets))
            except: 
                pass
        self.JKEY = modval
VkImageBlit2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcSubresource", VkImageSubresourceLayers),
    ("srcOffsets", VkOffset3D *2),
    ("dstSubresource", VkImageSubresourceLayers),
    ("dstOffsets", VkOffset3D *2)
    ]

class VkBlitImageInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("regionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.regionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filter"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filter))
            except: 
                pass
        self.JKEY = modval
VkBlitImageInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcImage", VkImage_T),
    ("srcImageLayout", c_int),
    ("dstImage", VkImage_T),
    ("dstImageLayout", c_int),
    ("regionCount", c_uint),
    ("pRegions", VkImageBlit2),
    ("filter", c_int)
    ]

class VkImageResolve2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstSubresource"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstSubresource))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
VkImageResolve2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcSubresource", VkImageSubresourceLayers),
    ("srcOffset", VkOffset3D),
    ("dstSubresource", VkImageSubresourceLayers),
    ("dstOffset", VkOffset3D),
    ("extent", VkExtent3D)
    ]

class VkResolveImageInfo2(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("regionCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.regionCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
VkResolveImageInfo2._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcImage", VkImage_T),
    ("srcImageLayout", c_int),
    ("dstImage", VkImage_T),
    ("dstImageLayout", c_int),
    ("regionCount", c_uint),
    ("pRegions", VkImageResolve2)
    ]

class VkPhysicalDeviceSubgroupSizeControlFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSizeControl"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSizeControl))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("computeFullSubgroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.computeFullSubgroups))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSubgroupSizeControlFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("subgroupSizeControl", c_uint),
    ("computeFullSubgroups", c_uint)
    ]

class VkPhysicalDeviceSubgroupSizeControlProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSubgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSubgroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSubgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSubgroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxComputeWorkgroupSubgroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxComputeWorkgroupSubgroups))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("requiredSubgroupSizeStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.requiredSubgroupSizeStages))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSubgroupSizeControlProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minSubgroupSize", c_uint),
    ("maxSubgroupSize", c_uint),
    ("maxComputeWorkgroupSubgroups", c_uint),
    ("requiredSubgroupSizeStages", c_uint)
    ]

class VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("requiredSubgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.requiredSubgroupSize))
            except: 
                pass
        self.JKEY = modval
VkPipelineShaderStageRequiredSubgroupSizeCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("requiredSubgroupSize", c_uint)
    ]

class VkPhysicalDeviceInlineUniformBlockFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inlineUniformBlock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inlineUniformBlock))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingInlineUniformBlockUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingInlineUniformBlockUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceInlineUniformBlockFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("inlineUniformBlock", c_uint),
    ("descriptorBindingInlineUniformBlockUpdateAfterBind", c_uint)
    ]

class VkPhysicalDeviceInlineUniformBlockProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInlineUniformBlockSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInlineUniformBlockSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindInlineUniformBlocks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindInlineUniformBlocks))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceInlineUniformBlockProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxInlineUniformBlockSize", c_uint),
    ("maxPerStageDescriptorInlineUniformBlocks", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks", c_uint),
    ("maxDescriptorSetInlineUniformBlocks", c_uint),
    ("maxDescriptorSetUpdateAfterBindInlineUniformBlocks", c_uint)
    ]

class VkWriteDescriptorSetInlineUniformBlock(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pData))
            except: 
                pass
        self.JKEY = modval
VkWriteDescriptorSetInlineUniformBlock._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dataSize", c_uint),
    ("pData", c_void_p)
    ]

class VkDescriptorPoolInlineUniformBlockCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInlineUniformBlockBindings"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInlineUniformBlockBindings))
            except: 
                pass
        self.JKEY = modval
VkDescriptorPoolInlineUniformBlockCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxInlineUniformBlockBindings", c_uint)
    ]

class VkPhysicalDeviceTextureCompressionASTCHDRFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("textureCompressionASTC_HDR"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.textureCompressionASTC_HDR))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTextureCompressionASTCHDRFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("textureCompressionASTC_HDR", c_uint)
    ]

class VkRenderingAttachmentInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageView))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("resolveMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.resolveMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("resolveImageView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.resolveImageView))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("resolveImageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.resolveImageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("loadOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.loadOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storeOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storeOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("clearValue"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.clearValue))
            except: 
                pass
        self.JKEY = modval
VkRenderingAttachmentInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageView", VkImageView_T),
    ("imageLayout", c_int),
    ("resolveMode", c_int),
    ("resolveImageView", VkImageView_T),
    ("resolveImageLayout", c_int),
    ("loadOp", c_int),
    ("storeOp", c_int),
    ("clearValue", VkClearValue)
    ]

class VkRenderingInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderArea"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderArea))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layerCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layerCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDepthAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDepthAttachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStencilAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStencilAttachment))
            except: 
                pass
        self.JKEY = modval
VkRenderingInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("renderArea", VkRect2D),
    ("layerCount", c_uint),
    ("viewMask", c_uint),
    ("colorAttachmentCount", c_uint),
    ("pColorAttachments", VkRenderingAttachmentInfo),
    ("pDepthAttachment", VkRenderingAttachmentInfo),
    ("pStencilAttachment", VkRenderingAttachmentInfo)
    ]

class VkPipelineRenderingCreateInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorAttachmentFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorAttachmentFormats))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthAttachmentFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthAttachmentFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilAttachmentFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilAttachmentFormat))
            except: 
                pass
        self.JKEY = modval
VkPipelineRenderingCreateInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("viewMask", c_uint),
    ("colorAttachmentCount", c_uint),
    ("pColorAttachmentFormats", POINTER(c_int)),
    ("depthAttachmentFormat", c_int),
    ("stencilAttachmentFormat", c_int)
    ]

class VkPhysicalDeviceDynamicRenderingFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dynamicRendering"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dynamicRendering))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDynamicRenderingFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dynamicRendering", c_uint)
    ]

class VkCommandBufferInheritanceRenderingInfo(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorAttachmentFormats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorAttachmentFormats))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthAttachmentFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthAttachmentFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stencilAttachmentFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stencilAttachmentFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationSamples))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferInheritanceRenderingInfo._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("viewMask", c_uint),
    ("colorAttachmentCount", c_uint),
    ("pColorAttachmentFormats", POINTER(c_int)),
    ("depthAttachmentFormat", c_int),
    ("stencilAttachmentFormat", c_int),
    ("rasterizationSamples", c_int)
    ]

class VkPhysicalDeviceShaderIntegerDotProductFeatures(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderIntegerDotProduct"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderIntegerDotProduct))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderIntegerDotProductFeatures._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderIntegerDotProduct", c_uint)
    ]

class VkPhysicalDeviceShaderIntegerDotProductProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct8BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct8BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct8BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct8BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct8BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct8BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct4x8BitPackedUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct4x8BitPackedUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct4x8BitPackedSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct4x8BitPackedSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct4x8BitPackedMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct4x8BitPackedMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct16BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct16BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct16BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct16BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct16BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct16BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct32BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct32BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct32BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct32BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct32BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct32BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct64BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct64BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct64BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct64BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProduct64BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProduct64BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating8BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating8BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating16BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating16BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating32BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating32BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating64BitSignedAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating64BitSignedAccelerated))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderIntegerDotProductProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("integerDotProduct8BitUnsignedAccelerated", c_uint),
    ("integerDotProduct8BitSignedAccelerated", c_uint),
    ("integerDotProduct8BitMixedSignednessAccelerated", c_uint),
    ("integerDotProduct4x8BitPackedUnsignedAccelerated", c_uint),
    ("integerDotProduct4x8BitPackedSignedAccelerated", c_uint),
    ("integerDotProduct4x8BitPackedMixedSignednessAccelerated", c_uint),
    ("integerDotProduct16BitUnsignedAccelerated", c_uint),
    ("integerDotProduct16BitSignedAccelerated", c_uint),
    ("integerDotProduct16BitMixedSignednessAccelerated", c_uint),
    ("integerDotProduct32BitUnsignedAccelerated", c_uint),
    ("integerDotProduct32BitSignedAccelerated", c_uint),
    ("integerDotProduct32BitMixedSignednessAccelerated", c_uint),
    ("integerDotProduct64BitUnsignedAccelerated", c_uint),
    ("integerDotProduct64BitSignedAccelerated", c_uint),
    ("integerDotProduct64BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating8BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating8BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating16BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating16BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating32BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating32BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating64BitUnsignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating64BitSignedAccelerated", c_uint),
    ("integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated", c_uint)
    ]

class VkPhysicalDeviceTexelBufferAlignmentProperties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageTexelBufferOffsetAlignmentBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageTexelBufferOffsetAlignmentBytes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storageTexelBufferOffsetSingleTexelAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storageTexelBufferOffsetSingleTexelAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformTexelBufferOffsetAlignmentBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformTexelBufferOffsetAlignmentBytes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uniformTexelBufferOffsetSingleTexelAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uniformTexelBufferOffsetSingleTexelAlignment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTexelBufferAlignmentProperties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("storageTexelBufferOffsetAlignmentBytes", c_ulong),
    ("storageTexelBufferOffsetSingleTexelAlignment", c_uint),
    ("uniformTexelBufferOffsetAlignmentBytes", c_ulong),
    ("uniformTexelBufferOffsetSingleTexelAlignment", c_uint)
    ]

class VkFormatProperties3(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("linearTilingFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.linearTilingFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("optimalTilingFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.optimalTilingFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferFeatures))
            except: 
                pass
        self.JKEY = modval
VkFormatProperties3._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("linearTilingFeatures", c_ulong),
    ("optimalTilingFeatures", c_ulong),
    ("bufferFeatures", c_ulong)
    ]

class VkPhysicalDeviceMaintenance4Features(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maintenance4"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maintenance4))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMaintenance4Features._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maintenance4", c_uint)
    ]

class VkPhysicalDeviceMaintenance4Properties(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxBufferSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxBufferSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMaintenance4Properties._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxBufferSize", c_ulong)
    ]

class VkDeviceBufferMemoryRequirements(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCreateInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCreateInfo))
            except: 
                pass
        self.JKEY = modval
VkDeviceBufferMemoryRequirements._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pCreateInfo", VkBufferCreateInfo)
    ]

class VkDeviceImageMemoryRequirements(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCreateInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCreateInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeAspect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeAspect))
            except: 
                pass
        self.JKEY = modval
VkDeviceImageMemoryRequirements._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pCreateInfo", VkImageCreateInfo),
    ("planeAspect", c_int)
    ]

class VkSurfaceCapabilitiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("minImageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("currentExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.currentExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minImageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImageExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageArrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageArrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedTransforms"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedTransforms))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("currentTransform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.currentTransform))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedCompositeAlpha"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedCompositeAlpha))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedUsageFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedUsageFlags))
            except: 
                pass
        self.JKEY = modval
VkSurfaceCapabilitiesKHR._fields_ = [
    ("minImageCount", c_uint),
    ("maxImageCount", c_uint),
    ("currentExtent", VkExtent2D),
    ("minImageExtent", VkExtent2D),
    ("maxImageExtent", VkExtent2D),
    ("maxImageArrayLayers", c_uint),
    ("supportedTransforms", c_uint),
    ("currentTransform", c_int),
    ("supportedCompositeAlpha", c_uint),
    ("supportedUsageFlags", c_uint)
    ]

class VkSurfaceFormatKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorSpace"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorSpace))
            except: 
                pass
        self.JKEY = modval
VkSurfaceFormatKHR._fields_ = [
    ("format", c_int),
    ("colorSpace", c_int)
    ]

class VkSwapchainCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("surface"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.surface))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minImageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageColorSpace"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageColorSpace))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageArrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageArrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageUsage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageUsage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageSharingMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageSharingMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueueFamilyIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueueFamilyIndices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("preTransform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.preTransform))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compositeAlpha"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compositeAlpha))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("presentMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("clipped"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.clipped))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("oldSwapchain"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.oldSwapchain))
            except: 
                pass
        self.JKEY = modval
VkSwapchainCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("surface", VkSurfaceKHR_T),
    ("minImageCount", c_uint),
    ("imageFormat", c_int),
    ("imageColorSpace", c_int),
    ("imageExtent", VkExtent2D),
    ("imageArrayLayers", c_uint),
    ("imageUsage", c_uint),
    ("imageSharingMode", c_int),
    ("queueFamilyIndexCount", c_uint),
    ("pQueueFamilyIndices", POINTER(c_uint)),
    ("preTransform", c_int),
    ("compositeAlpha", c_int),
    ("presentMode", c_int),
    ("clipped", c_uint),
    ("oldSwapchain", VkSwapchainKHR_T)
    ]

class VkPresentInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("waitSemaphoreCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.waitSemaphoreCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pWaitSemaphores"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pWaitSemaphores))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchainCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchainCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSwapchains"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSwapchains))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pImageIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pImageIndices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pResults"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pResults))
            except: 
                pass
        self.JKEY = modval
VkPresentInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("waitSemaphoreCount", c_uint),
    ("pWaitSemaphores", POINTER(VkSemaphore_T)),
    ("swapchainCount", c_uint),
    ("pSwapchains", POINTER(VkSwapchainKHR_T)),
    ("pImageIndices", POINTER(c_uint)),
    ("pResults", POINTER(c_int))
    ]

class VkImageSwapchainCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchain"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchain))
            except: 
                pass
        self.JKEY = modval
VkImageSwapchainCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchain", VkSwapchainKHR_T)
    ]

class VkBindImageMemorySwapchainInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchain"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchain))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageIndex))
            except: 
                pass
        self.JKEY = modval
VkBindImageMemorySwapchainInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchain", VkSwapchainKHR_T),
    ("imageIndex", c_uint)
    ]

class VkAcquireNextImageInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchain"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchain))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timeout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timeout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphore))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceMask))
            except: 
                pass
        self.JKEY = modval
VkAcquireNextImageInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchain", VkSwapchainKHR_T),
    ("timeout", c_ulong),
    ("semaphore", VkSemaphore_T),
    ("fence", VkFence_T),
    ("deviceMask", c_uint)
    ]

class VkDeviceGroupPresentCapabilitiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("presentMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("modes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.modes))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupPresentCapabilitiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("presentMask", c_uint *32),
    ("modes", c_uint)
    ]

class VkDeviceGroupPresentInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchainCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchainCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDeviceMasks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDeviceMasks))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mode))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupPresentInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchainCount", c_uint),
    ("pDeviceMasks", POINTER(c_uint)),
    ("mode", c_int)
    ]

class VkDeviceGroupSwapchainCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("modes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.modes))
            except: 
                pass
        self.JKEY = modval
VkDeviceGroupSwapchainCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("modes", c_uint)
    ]

class VkDisplayModeParametersKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("visibleRegion"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.visibleRegion))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("refreshRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.refreshRate))
            except: 
                pass
        self.JKEY = modval
VkDisplayModeParametersKHR._fields_ = [
    ("visibleRegion", VkExtent2D),
    ("refreshRate", c_uint)
    ]

class VkDisplayModeCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("parameters"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.parameters))
            except: 
                pass
        self.JKEY = modval
VkDisplayModeCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("parameters", VkDisplayModeParametersKHR)
    ]

class VkDisplayModePropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("displayMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("parameters"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.parameters))
            except: 
                pass
        self.JKEY = modval
VkDisplayModePropertiesKHR._fields_ = [
    ("displayMode", VkDisplayModeKHR_T),
    ("parameters", VkDisplayModeParametersKHR)
    ]

class VkDisplayPlaneCapabilitiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("supportedAlpha"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedAlpha))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSrcPosition"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSrcPosition))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSrcPosition"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSrcPosition))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSrcExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSrcExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSrcExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSrcExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minDstPosition"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minDstPosition))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDstPosition"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDstPosition))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minDstExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minDstExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDstExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDstExtent))
            except: 
                pass
        self.JKEY = modval
VkDisplayPlaneCapabilitiesKHR._fields_ = [
    ("supportedAlpha", c_uint),
    ("minSrcPosition", VkOffset2D),
    ("maxSrcPosition", VkOffset2D),
    ("minSrcExtent", VkExtent2D),
    ("maxSrcExtent", VkExtent2D),
    ("minDstPosition", VkOffset2D),
    ("maxDstPosition", VkOffset2D),
    ("minDstExtent", VkExtent2D),
    ("maxDstExtent", VkExtent2D)
    ]

class VkDisplayPlanePropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("currentDisplay"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.currentDisplay))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("currentStackIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.currentStackIndex))
            except: 
                pass
        self.JKEY = modval
VkDisplayPlanePropertiesKHR._fields_ = [
    ("currentDisplay", VkDisplayKHR_T),
    ("currentStackIndex", c_uint)
    ]

class VkDisplayPropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("display"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.display))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("physicalDimensions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.physicalDimensions))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("physicalResolution"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.physicalResolution))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedTransforms"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedTransforms))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeReorderPossible"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeReorderPossible))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("persistentContent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.persistentContent))
            except: 
                pass
        self.JKEY = modval
VkDisplayPropertiesKHR._fields_ = [
    ("display", VkDisplayKHR_T),
    ("displayName", c_char_p),
    ("physicalDimensions", VkExtent2D),
    ("physicalResolution", VkExtent2D),
    ("supportedTransforms", c_uint),
    ("planeReorderPossible", c_uint),
    ("persistentContent", c_uint)
    ]

class VkDisplaySurfaceCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeStackIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeStackIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transform))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("globalAlpha"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.globalAlpha))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("alphaMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.alphaMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageExtent))
            except: 
                pass
        self.JKEY = modval
VkDisplaySurfaceCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("displayMode", VkDisplayModeKHR_T),
    ("planeIndex", c_uint),
    ("planeStackIndex", c_uint),
    ("transform", c_int),
    ("globalAlpha", c_float),
    ("alphaMode", c_int),
    ("imageExtent", VkExtent2D)
    ]

class VkDisplayPresentInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcRect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcRect))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstRect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstRect))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("persistent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.persistent))
            except: 
                pass
        self.JKEY = modval
VkDisplayPresentInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcRect", VkRect2D),
    ("dstRect", VkRect2D),
    ("persistent", c_uint)
    ]

class VkRenderingFragmentShadingRateAttachmentInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageView))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateAttachmentTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateAttachmentTexelSize))
            except: 
                pass
        self.JKEY = modval
VkRenderingFragmentShadingRateAttachmentInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageView", VkImageView_T),
    ("imageLayout", c_int),
    ("shadingRateAttachmentTexelSize", VkExtent2D)
    ]

class VkRenderingFragmentDensityMapAttachmentInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageView))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageLayout))
            except: 
                pass
        self.JKEY = modval
VkRenderingFragmentDensityMapAttachmentInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageView", VkImageView_T),
    ("imageLayout", c_int)
    ]

class VkAttachmentSampleCountInfoAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorAttachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorAttachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorAttachmentSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorAttachmentSamples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthStencilAttachmentSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthStencilAttachmentSamples))
            except: 
                pass
        self.JKEY = modval
VkAttachmentSampleCountInfoAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("colorAttachmentCount", c_uint),
    ("pColorAttachmentSamples", POINTER(c_int)),
    ("depthStencilAttachmentSamples", c_int)
    ]

class VkMultiviewPerViewAttributesInfoNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("perViewAttributes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.perViewAttributes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("perViewAttributesPositionXOnly"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.perViewAttributesPositionXOnly))
            except: 
                pass
        self.JKEY = modval
VkMultiviewPerViewAttributesInfoNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("perViewAttributes", c_uint),
    ("perViewAttributesPositionXOnly", c_uint)
    ]

class VkImportMemoryFdInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fd))
            except: 
                pass
        self.JKEY = modval
VkImportMemoryFdInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleType", c_int),
    ("fd", c_int)
    ]

class VkMemoryFdPropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryTypeBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryTypeBits))
            except: 
                pass
        self.JKEY = modval
VkMemoryFdPropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memoryTypeBits", c_uint)
    ]

class VkMemoryGetFdInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkMemoryGetFdInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memory", VkDeviceMemory_T),
    ("handleType", c_int)
    ]

class VkImportSemaphoreFdInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphore))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fd))
            except: 
                pass
        self.JKEY = modval
VkImportSemaphoreFdInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("semaphore", VkSemaphore_T),
    ("flags", c_uint),
    ("handleType", c_int),
    ("fd", c_int)
    ]

class VkSemaphoreGetFdInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("semaphore"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.semaphore))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkSemaphoreGetFdInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("semaphore", VkSemaphore_T),
    ("handleType", c_int)
    ]

class VkPhysicalDevicePushDescriptorPropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPushDescriptors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPushDescriptors))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePushDescriptorPropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxPushDescriptors", c_uint)
    ]

class VkRectLayerKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layer))
            except: 
                pass
        self.JKEY = modval
VkRectLayerKHR._fields_ = [
    ("offset", VkOffset2D),
    ("extent", VkExtent2D),
    ("layer", c_uint)
    ]

class VkPresentRegionKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("rectangleCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rectangleCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRectangles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRectangles))
            except: 
                pass
        self.JKEY = modval
VkPresentRegionKHR._fields_ = [
    ("rectangleCount", c_uint),
    ("pRectangles", VkRectLayerKHR)
    ]

class VkPresentRegionsKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchainCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchainCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pRegions"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pRegions))
            except: 
                pass
        self.JKEY = modval
VkPresentRegionsKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchainCount", c_uint),
    ("pRegions", VkPresentRegionKHR)
    ]

class VkSharedPresentSurfaceCapabilitiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sharedPresentSupportedUsageFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sharedPresentSupportedUsageFlags))
            except: 
                pass
        self.JKEY = modval
VkSharedPresentSurfaceCapabilitiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("sharedPresentSupportedUsageFlags", c_uint)
    ]

class VkImportFenceFdInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fd))
            except: 
                pass
        self.JKEY = modval
VkImportFenceFdInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fence", VkFence_T),
    ("flags", c_uint),
    ("handleType", c_int),
    ("fd", c_int)
    ]

class VkFenceGetFdInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fence"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fence))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkFenceGetFdInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fence", VkFence_T),
    ("handleType", c_int)
    ]

class VkPhysicalDevicePerformanceQueryFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("performanceCounterQueryPools"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.performanceCounterQueryPools))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("performanceCounterMultipleQueryPools"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.performanceCounterMultipleQueryPools))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePerformanceQueryFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("performanceCounterQueryPools", c_uint),
    ("performanceCounterMultipleQueryPools", c_uint)
    ]

class VkPhysicalDevicePerformanceQueryPropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("allowCommandBufferQueryCopies"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.allowCommandBufferQueryCopies))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePerformanceQueryPropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("allowCommandBufferQueryCopies", c_uint)
    ]

class VkPerformanceCounterKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("unit"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.unit))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scope"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scope))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("storage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.storage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uuid"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uuid))
            except: 
                pass
        self.JKEY = modval
VkPerformanceCounterKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("unit", c_int),
    ("scope", c_int),
    ("storage", c_int),
    ("uuid", c_ubyte *16)
    ]

class VkPerformanceCounterDescriptionKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("name"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.name))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("category"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.category))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("description"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.description))
            except: 
                pass
        self.JKEY = modval
VkPerformanceCounterDescriptionKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("name", c_byte *256),
    ("category", c_byte *256),
    ("description", c_byte *256)
    ]

class VkQueryPoolPerformanceCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("counterIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.counterIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCounterIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCounterIndices))
            except: 
                pass
        self.JKEY = modval
VkQueryPoolPerformanceCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("queueFamilyIndex", c_uint),
    ("counterIndexCount", c_uint),
    ("pCounterIndices", POINTER(c_uint))
    ]

class VkPerformanceCounterResultKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("int32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.int32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("int64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.int64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uint32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uint32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("uint64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.uint64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("float32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.float32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("float64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.float64))
            except: 
                pass
        self.JKEY = modval
VkPerformanceCounterResultKHR._fields_ = [
    ("int32", c_int),
    ("int64", c_long),
    ("uint32", c_uint),
    ("uint64", c_ulong),
    ("float32", c_float),
    ("float64", c_double)
    ]

class VkAcquireProfilingLockInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timeout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timeout))
            except: 
                pass
        self.JKEY = modval
VkAcquireProfilingLockInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("timeout", c_ulong)
    ]

class VkPerformanceQuerySubmitInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("counterPassIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.counterPassIndex))
            except: 
                pass
        self.JKEY = modval
VkPerformanceQuerySubmitInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("counterPassIndex", c_uint)
    ]

class VkPhysicalDeviceSurfaceInfo2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("surface"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.surface))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSurfaceInfo2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("surface", VkSurfaceKHR_T)
    ]

class VkSurfaceCapabilities2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("surfaceCapabilities"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.surfaceCapabilities))
            except: 
                pass
        self.JKEY = modval
VkSurfaceCapabilities2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("surfaceCapabilities", VkSurfaceCapabilitiesKHR)
    ]

class VkSurfaceFormat2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("surfaceFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.surfaceFormat))
            except: 
                pass
        self.JKEY = modval
VkSurfaceFormat2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("surfaceFormat", VkSurfaceFormatKHR)
    ]

class VkDisplayProperties2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayProperties))
            except: 
                pass
        self.JKEY = modval
VkDisplayProperties2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("displayProperties", VkDisplayPropertiesKHR)
    ]

class VkDisplayPlaneProperties2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayPlaneProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayPlaneProperties))
            except: 
                pass
        self.JKEY = modval
VkDisplayPlaneProperties2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("displayPlaneProperties", VkDisplayPlanePropertiesKHR)
    ]

class VkDisplayModeProperties2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayModeProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayModeProperties))
            except: 
                pass
        self.JKEY = modval
VkDisplayModeProperties2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("displayModeProperties", VkDisplayModePropertiesKHR)
    ]

class VkDisplayPlaneInfo2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("planeIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.planeIndex))
            except: 
                pass
        self.JKEY = modval
VkDisplayPlaneInfo2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("mode", VkDisplayModeKHR_T),
    ("planeIndex", c_uint)
    ]

class VkDisplayPlaneCapabilities2KHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("capabilities"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.capabilities))
            except: 
                pass
        self.JKEY = modval
VkDisplayPlaneCapabilities2KHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("capabilities", VkDisplayPlaneCapabilitiesKHR)
    ]

class VkPhysicalDeviceShaderClockFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSubgroupClock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSubgroupClock))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderDeviceClock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderDeviceClock))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderClockFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderSubgroupClock", c_uint),
    ("shaderDeviceClock", c_uint)
    ]

class VkDeviceQueueGlobalPriorityCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("globalPriority"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.globalPriority))
            except: 
                pass
        self.JKEY = modval
VkDeviceQueueGlobalPriorityCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("globalPriority", c_int)
    ]

class VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("globalPriorityQuery"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.globalPriorityQuery))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("globalPriorityQuery", c_uint)
    ]

class VkQueueFamilyGlobalPriorityPropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("priorityCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.priorityCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("priorities"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.priorities))
            except: 
                pass
        self.JKEY = modval
VkQueueFamilyGlobalPriorityPropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("priorityCount", c_uint),
    ("priorities", c_int *16)
    ]

class VkFragmentShadingRateAttachmentInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pFragmentShadingRateAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pFragmentShadingRateAttachment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateAttachmentTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateAttachmentTexelSize))
            except: 
                pass
        self.JKEY = modval
VkFragmentShadingRateAttachmentInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pFragmentShadingRateAttachment", VkAttachmentReference2),
    ("shadingRateAttachmentTexelSize", VkExtent2D)
    ]

class VkPipelineFragmentShadingRateStateCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("combinerOps"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.combinerOps))
            except: 
                pass
        self.JKEY = modval
VkPipelineFragmentShadingRateStateCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentSize", VkExtent2D),
    ("combinerOps", c_int *2)
    ]

class VkPhysicalDeviceFragmentShadingRateFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineFragmentShadingRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineFragmentShadingRate))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveFragmentShadingRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveFragmentShadingRate))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentFragmentShadingRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentFragmentShadingRate))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShadingRateFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipelineFragmentShadingRate", c_uint),
    ("primitiveFragmentShadingRate", c_uint),
    ("attachmentFragmentShadingRate", c_uint)
    ]

class VkPhysicalDeviceFragmentShadingRatePropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minFragmentShadingRateAttachmentTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minFragmentShadingRateAttachmentTexelSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentShadingRateAttachmentTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentShadingRateAttachmentTexelSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentShadingRateAttachmentTexelSizeAspectRatio"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentShadingRateAttachmentTexelSizeAspectRatio))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveFragmentShadingRateWithMultipleViewports"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveFragmentShadingRateWithMultipleViewports))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layeredShadingRateAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layeredShadingRateAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateNonTrivialCombinerOps"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateNonTrivialCombinerOps))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentSizeAspectRatio"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentSizeAspectRatio))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentShadingRateCoverageSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentShadingRateCoverageSamples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentShadingRateRasterizationSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentShadingRateRasterizationSamples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateWithShaderDepthStencilWrites"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateWithShaderDepthStencilWrites))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateWithSampleMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateWithSampleMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateWithShaderSampleMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateWithShaderSampleMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateWithConservativeRasterization"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateWithConservativeRasterization))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateWithFragmentShaderInterlock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateWithFragmentShaderInterlock))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateWithCustomSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateWithCustomSampleLocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateStrictMultiplyCombiner"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateStrictMultiplyCombiner))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShadingRatePropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minFragmentShadingRateAttachmentTexelSize", VkExtent2D),
    ("maxFragmentShadingRateAttachmentTexelSize", VkExtent2D),
    ("maxFragmentShadingRateAttachmentTexelSizeAspectRatio", c_uint),
    ("primitiveFragmentShadingRateWithMultipleViewports", c_uint),
    ("layeredShadingRateAttachments", c_uint),
    ("fragmentShadingRateNonTrivialCombinerOps", c_uint),
    ("maxFragmentSize", VkExtent2D),
    ("maxFragmentSizeAspectRatio", c_uint),
    ("maxFragmentShadingRateCoverageSamples", c_uint),
    ("maxFragmentShadingRateRasterizationSamples", c_int),
    ("fragmentShadingRateWithShaderDepthStencilWrites", c_uint),
    ("fragmentShadingRateWithSampleMask", c_uint),
    ("fragmentShadingRateWithShaderSampleMask", c_uint),
    ("fragmentShadingRateWithConservativeRasterization", c_uint),
    ("fragmentShadingRateWithFragmentShaderInterlock", c_uint),
    ("fragmentShadingRateWithCustomSampleLocations", c_uint),
    ("fragmentShadingRateStrictMultiplyCombiner", c_uint)
    ]

class VkPhysicalDeviceFragmentShadingRateKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShadingRateKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("sampleCounts", c_uint),
    ("fragmentSize", VkExtent2D)
    ]

class VkSurfaceProtectedCapabilitiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportsProtected"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportsProtected))
            except: 
                pass
        self.JKEY = modval
VkSurfaceProtectedCapabilitiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("supportsProtected", c_uint)
    ]

class VkPhysicalDevicePresentWaitFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("presentWait"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentWait))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePresentWaitFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("presentWait", c_uint)
    ]

class VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineExecutableInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineExecutableInfo))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipelineExecutableInfo", c_uint)
    ]

class VkPipelineInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipeline"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipeline))
            except: 
                pass
        self.JKEY = modval
VkPipelineInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipeline", VkPipeline_T)
    ]

class VkPipelineExecutablePropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("name"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.name))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("description"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.description))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subgroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subgroupSize))
            except: 
                pass
        self.JKEY = modval
VkPipelineExecutablePropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stages", c_uint),
    ("name", c_byte *256),
    ("description", c_byte *256),
    ("subgroupSize", c_uint)
    ]

class VkPipelineExecutableInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipeline"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipeline))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("executableIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.executableIndex))
            except: 
                pass
        self.JKEY = modval
VkPipelineExecutableInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipeline", VkPipeline_T),
    ("executableIndex", c_uint)
    ]

class VkPipelineExecutableStatisticValueKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("b32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.b32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("i64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.i64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("u64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.u64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("f64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.f64))
            except: 
                pass
        self.JKEY = modval
VkPipelineExecutableStatisticValueKHR._fields_ = [
    ("b32", c_uint),
    ("i64", c_long),
    ("u64", c_ulong),
    ("f64", c_double)
    ]

class VkPipelineExecutableStatisticKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("name"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.name))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("description"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.description))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("value"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.value))
            except: 
                pass
        self.JKEY = modval
VkPipelineExecutableStatisticKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("name", c_byte *256),
    ("description", c_byte *256),
    ("format", c_int),
    ("value", VkPipelineExecutableStatisticValueKHR)
    ]

class VkPipelineExecutableInternalRepresentationKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("name"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.name))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("description"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.description))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("isText"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.isText))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pData))
            except: 
                pass
        self.JKEY = modval
VkPipelineExecutableInternalRepresentationKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("name", c_byte *256),
    ("description", c_byte *256),
    ("isText", c_uint),
    ("dataSize", c_ulong),
    ("pData", c_void_p)
    ]

class VkPipelineLibraryCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("libraryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.libraryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pLibraries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pLibraries))
            except: 
                pass
        self.JKEY = modval
VkPipelineLibraryCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("libraryCount", c_uint),
    ("pLibraries", POINTER(VkPipeline_T))
    ]

class VkPresentIdKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchainCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchainCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPresentIds"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPresentIds))
            except: 
                pass
        self.JKEY = modval
VkPresentIdKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchainCount", c_uint),
    ("pPresentIds", POINTER(c_ulong))
    ]

class VkPhysicalDevicePresentIdFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("presentId"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentId))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePresentIdFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("presentId", c_uint)
    ]

class VkQueueFamilyCheckpointProperties2NV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("checkpointExecutionStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.checkpointExecutionStageMask))
            except: 
                pass
        self.JKEY = modval
VkQueueFamilyCheckpointProperties2NV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("checkpointExecutionStageMask", c_ulong)
    ]

class VkCheckpointData2NV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCheckpointMarker"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCheckpointMarker))
            except: 
                pass
        self.JKEY = modval
VkCheckpointData2NV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stage", c_ulong),
    ("pCheckpointMarker", c_void_p)
    ]

class VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSubgroupUniformControlFlow"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSubgroupUniformControlFlow))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderSubgroupUniformControlFlow", c_uint)
    ]

class VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("workgroupMemoryExplicitLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.workgroupMemoryExplicitLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("workgroupMemoryExplicitLayoutScalarBlockLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.workgroupMemoryExplicitLayoutScalarBlockLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("workgroupMemoryExplicitLayout8BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.workgroupMemoryExplicitLayout8BitAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("workgroupMemoryExplicitLayout16BitAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.workgroupMemoryExplicitLayout16BitAccess))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("workgroupMemoryExplicitLayout", c_uint),
    ("workgroupMemoryExplicitLayoutScalarBlockLayout", c_uint),
    ("workgroupMemoryExplicitLayout8BitAccess", c_uint),
    ("workgroupMemoryExplicitLayout16BitAccess", c_uint)
    ]

class VkDebugReportCallbackCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnCallback"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnCallback))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pUserData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pUserData))
            except: 
                pass
        self.JKEY = modval
VkDebugReportCallbackCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pfnCallback", c_void_p),
    ("pUserData", c_void_p)
    ]

class VkPipelineRasterizationStateRasterizationOrderAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationOrder"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationOrder))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationStateRasterizationOrderAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("rasterizationOrder", c_int)
    ]

class VkDebugMarkerObjectNameInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("object"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.object))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pObjectName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pObjectName))
            except: 
                pass
        self.JKEY = modval
VkDebugMarkerObjectNameInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("objectType", c_int),
    ("object", c_ulong),
    ("pObjectName", c_char_p)
    ]

class VkDebugMarkerObjectTagInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("object"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.object))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tagName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tagName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tagSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tagSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTag"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTag))
            except: 
                pass
        self.JKEY = modval
VkDebugMarkerObjectTagInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("objectType", c_int),
    ("object", c_ulong),
    ("tagName", c_ulong),
    ("tagSize", c_ulong),
    ("pTag", c_void_p)
    ]

class VkDebugMarkerMarkerInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMarkerName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMarkerName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("color"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.color))
            except: 
                pass
        self.JKEY = modval
VkDebugMarkerMarkerInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pMarkerName", c_char_p),
    ("color", c_float *4)
    ]

class VkDedicatedAllocationImageCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dedicatedAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dedicatedAllocation))
            except: 
                pass
        self.JKEY = modval
VkDedicatedAllocationImageCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dedicatedAllocation", c_uint)
    ]

class VkDedicatedAllocationBufferCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dedicatedAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dedicatedAllocation))
            except: 
                pass
        self.JKEY = modval
VkDedicatedAllocationBufferCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dedicatedAllocation", c_uint)
    ]

class VkDedicatedAllocationMemoryAllocateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
VkDedicatedAllocationMemoryAllocateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("image", VkImage_T),
    ("buffer", VkBuffer_T)
    ]

class VkPhysicalDeviceTransformFeedbackFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedback"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedback))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometryStreams"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometryStreams))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTransformFeedbackFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("transformFeedback", c_uint),
    ("geometryStreams", c_uint)
    ]

class VkPhysicalDeviceTransformFeedbackPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTransformFeedbackStreams"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTransformFeedbackStreams))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTransformFeedbackBuffers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTransformFeedbackBuffers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTransformFeedbackBufferSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTransformFeedbackBufferSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTransformFeedbackStreamDataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTransformFeedbackStreamDataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTransformFeedbackBufferDataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTransformFeedbackBufferDataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTransformFeedbackBufferDataStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTransformFeedbackBufferDataStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedbackQueries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedbackQueries))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedbackStreamsLinesTriangles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedbackStreamsLinesTriangles))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedbackRasterizationStreamSelect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedbackRasterizationStreamSelect))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedbackDraw"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedbackDraw))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTransformFeedbackPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxTransformFeedbackStreams", c_uint),
    ("maxTransformFeedbackBuffers", c_uint),
    ("maxTransformFeedbackBufferSize", c_ulong),
    ("maxTransformFeedbackStreamDataSize", c_uint),
    ("maxTransformFeedbackBufferDataSize", c_uint),
    ("maxTransformFeedbackBufferDataStride", c_uint),
    ("transformFeedbackQueries", c_uint),
    ("transformFeedbackStreamsLinesTriangles", c_uint),
    ("transformFeedbackRasterizationStreamSelect", c_uint),
    ("transformFeedbackDraw", c_uint)
    ]

class VkPipelineRasterizationStateStreamCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationStream"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationStream))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationStateStreamCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("rasterizationStream", c_uint)
    ]

class VkCuModuleCreateInfoNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pData))
            except: 
                pass
        self.JKEY = modval
VkCuModuleCreateInfoNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dataSize", c_ulong),
    ("pData", c_void_p)
    ]

class VkCuFunctionCreateInfoNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("module"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.module))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pName))
            except: 
                pass
        self.JKEY = modval
VkCuFunctionCreateInfoNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("module", VkCuModuleNVX_T),
    ("pName", c_char_p)
    ]

class VkCuLaunchInfoNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("function"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.function))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("gridDimX"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.gridDimX))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("gridDimY"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.gridDimY))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("gridDimZ"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.gridDimZ))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("blockDimX"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.blockDimX))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("blockDimY"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.blockDimY))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("blockDimZ"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.blockDimZ))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sharedMemBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sharedMemBytes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("paramCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.paramCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pParams"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pParams))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extraCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extraCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pExtras"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pExtras))
            except: 
                pass
        self.JKEY = modval
VkCuLaunchInfoNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("function", VkCuFunctionNVX_T),
    ("gridDimX", c_uint),
    ("gridDimY", c_uint),
    ("gridDimZ", c_uint),
    ("blockDimX", c_uint),
    ("blockDimY", c_uint),
    ("blockDimZ", c_uint),
    ("sharedMemBytes", c_uint),
    ("paramCount", c_ulong),
    ("pParams", POINTER(c_void_p)),
    ("extraCount", c_ulong),
    ("pExtras", POINTER(c_void_p))
    ]

class VkImageViewHandleInfoNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageView"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageView))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampler"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampler))
            except: 
                pass
        self.JKEY = modval
VkImageViewHandleInfoNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageView", VkImageView_T),
    ("descriptorType", c_int),
    ("sampler", VkSampler_T)
    ]

class VkImageViewAddressPropertiesNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkImageViewAddressPropertiesNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceAddress", c_ulong),
    ("size", c_ulong)
    ]

class VkTextureLODGatherFormatPropertiesAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportsTextureGatherLODBiasAMD"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportsTextureGatherLODBiasAMD))
            except: 
                pass
        self.JKEY = modval
VkTextureLODGatherFormatPropertiesAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("supportsTextureGatherLODBiasAMD", c_uint)
    ]

class VkShaderResourceUsageAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("numUsedVgprs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numUsedVgprs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("numUsedSgprs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numUsedSgprs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ldsSizePerLocalWorkGroup"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ldsSizePerLocalWorkGroup))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ldsUsageSizeInBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ldsUsageSizeInBytes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scratchMemUsageInBytes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scratchMemUsageInBytes))
            except: 
                pass
        self.JKEY = modval
VkShaderResourceUsageAMD._fields_ = [
    ("numUsedVgprs", c_uint),
    ("numUsedSgprs", c_uint),
    ("ldsSizePerLocalWorkGroup", c_uint),
    ("ldsUsageSizeInBytes", c_ulong),
    ("scratchMemUsageInBytes", c_ulong)
    ]

class VkShaderStatisticsInfoAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("shaderStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderStageMask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("resourceUsage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.resourceUsage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("numPhysicalVgprs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numPhysicalVgprs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("numPhysicalSgprs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numPhysicalSgprs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("numAvailableVgprs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numAvailableVgprs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("numAvailableSgprs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numAvailableSgprs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("computeWorkGroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.computeWorkGroupSize))
            except: 
                pass
        self.JKEY = modval
VkShaderStatisticsInfoAMD._fields_ = [
    ("shaderStageMask", c_uint),
    ("resourceUsage", VkShaderResourceUsageAMD),
    ("numPhysicalVgprs", c_uint),
    ("numPhysicalSgprs", c_uint),
    ("numAvailableVgprs", c_uint),
    ("numAvailableSgprs", c_uint),
    ("computeWorkGroupSize", c_uint *3)
    ]

class VkPhysicalDeviceCornerSampledImageFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("cornerSampledImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.cornerSampledImage))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCornerSampledImageFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("cornerSampledImage", c_uint)
    ]

class VkExternalImageFormatPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("imageFormatProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageFormatProperties))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("externalMemoryFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalMemoryFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("exportFromImportedHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.exportFromImportedHandleTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compatibleHandleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compatibleHandleTypes))
            except: 
                pass
        self.JKEY = modval
VkExternalImageFormatPropertiesNV._fields_ = [
    ("imageFormatProperties", VkImageFormatProperties),
    ("externalMemoryFeatures", c_uint),
    ("exportFromImportedHandleTypes", c_uint),
    ("compatibleHandleTypes", c_uint)
    ]

class VkExternalMemoryImageCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExternalMemoryImageCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkExportMemoryAllocateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleTypes))
            except: 
                pass
        self.JKEY = modval
VkExportMemoryAllocateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleTypes", c_uint)
    ]

class VkValidationFlagsEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("disabledValidationCheckCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.disabledValidationCheckCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDisabledValidationChecks"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDisabledValidationChecks))
            except: 
                pass
        self.JKEY = modval
VkValidationFlagsEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("disabledValidationCheckCount", c_uint),
    ("pDisabledValidationChecks", POINTER(c_int))
    ]

class VkImageViewASTCDecodeModeEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("decodeMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.decodeMode))
            except: 
                pass
        self.JKEY = modval
VkImageViewASTCDecodeModeEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("decodeMode", c_int)
    ]

class VkPhysicalDeviceASTCDecodeFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("decodeModeSharedExponent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.decodeModeSharedExponent))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceASTCDecodeFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("decodeModeSharedExponent", c_uint)
    ]

class VkConditionalRenderingBeginInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkConditionalRenderingBeginInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("buffer", VkBuffer_T),
    ("offset", c_ulong),
    ("flags", c_uint)
    ]

class VkPhysicalDeviceConditionalRenderingFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conditionalRendering"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conditionalRendering))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inheritedConditionalRendering"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inheritedConditionalRendering))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceConditionalRenderingFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("conditionalRendering", c_uint),
    ("inheritedConditionalRendering", c_uint)
    ]

class VkCommandBufferInheritanceConditionalRenderingInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conditionalRenderingEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conditionalRenderingEnable))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferInheritanceConditionalRenderingInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("conditionalRenderingEnable", c_uint)
    ]

class VkViewportWScalingNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("xcoeff"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.xcoeff))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ycoeff"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ycoeff))
            except: 
                pass
        self.JKEY = modval
VkViewportWScalingNV._fields_ = [
    ("xcoeff", c_float),
    ("ycoeff", c_float)
    ]

class VkPipelineViewportWScalingStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportWScalingEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportWScalingEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewportWScalings"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewportWScalings))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportWScalingStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("viewportWScalingEnable", c_uint),
    ("viewportCount", c_uint),
    ("pViewportWScalings", VkViewportWScalingNV)
    ]

class VkSurfaceCapabilities2EXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minImageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("currentExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.currentExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minImageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImageExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageExtent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageExtent))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxImageArrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxImageArrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedTransforms"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedTransforms))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("currentTransform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.currentTransform))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedCompositeAlpha"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedCompositeAlpha))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedUsageFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedUsageFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supportedSurfaceCounters"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supportedSurfaceCounters))
            except: 
                pass
        self.JKEY = modval
VkSurfaceCapabilities2EXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minImageCount", c_uint),
    ("maxImageCount", c_uint),
    ("currentExtent", VkExtent2D),
    ("minImageExtent", VkExtent2D),
    ("maxImageExtent", VkExtent2D),
    ("maxImageArrayLayers", c_uint),
    ("supportedTransforms", c_uint),
    ("currentTransform", c_int),
    ("supportedCompositeAlpha", c_uint),
    ("supportedUsageFlags", c_uint),
    ("supportedSurfaceCounters", c_uint)
    ]

class VkDisplayPowerInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("powerState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.powerState))
            except: 
                pass
        self.JKEY = modval
VkDisplayPowerInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("powerState", c_int)
    ]

class VkDeviceEventInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceEvent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceEvent))
            except: 
                pass
        self.JKEY = modval
VkDeviceEventInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceEvent", c_int)
    ]

class VkDisplayEventInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayEvent"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayEvent))
            except: 
                pass
        self.JKEY = modval
VkDisplayEventInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("displayEvent", c_int)
    ]

class VkSwapchainCounterCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("surfaceCounters"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.surfaceCounters))
            except: 
                pass
        self.JKEY = modval
VkSwapchainCounterCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("surfaceCounters", c_uint)
    ]

class VkRefreshCycleDurationGOOGLE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("refreshDuration"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.refreshDuration))
            except: 
                pass
        self.JKEY = modval
VkRefreshCycleDurationGOOGLE._fields_ = [
    ("refreshDuration", c_ulong)
    ]

class VkPastPresentationTimingGOOGLE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("presentID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("desiredPresentTime"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.desiredPresentTime))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("actualPresentTime"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.actualPresentTime))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("earliestPresentTime"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.earliestPresentTime))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("presentMargin"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentMargin))
            except: 
                pass
        self.JKEY = modval
VkPastPresentationTimingGOOGLE._fields_ = [
    ("presentID", c_uint),
    ("desiredPresentTime", c_ulong),
    ("actualPresentTime", c_ulong),
    ("earliestPresentTime", c_ulong),
    ("presentMargin", c_ulong)
    ]

class VkPresentTimeGOOGLE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("presentID"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.presentID))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("desiredPresentTime"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.desiredPresentTime))
            except: 
                pass
        self.JKEY = modval
VkPresentTimeGOOGLE._fields_ = [
    ("presentID", c_uint),
    ("desiredPresentTime", c_ulong)
    ]

class VkPresentTimesInfoGOOGLE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("swapchainCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.swapchainCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTimes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTimes))
            except: 
                pass
        self.JKEY = modval
VkPresentTimesInfoGOOGLE._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("swapchainCount", c_uint),
    ("pTimes", VkPresentTimeGOOGLE)
    ]

class VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("perViewPositionAllComponents"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.perViewPositionAllComponents))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("perViewPositionAllComponents", c_uint)
    ]

class VkViewportSwizzleNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("z"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.z))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("w"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.w))
            except: 
                pass
        self.JKEY = modval
VkViewportSwizzleNV._fields_ = [
    ("x", c_int),
    ("y", c_int),
    ("z", c_int),
    ("w", c_int)
    ]

class VkPipelineViewportSwizzleStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewportSwizzles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewportSwizzles))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportSwizzleStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("viewportCount", c_uint),
    ("pViewportSwizzles", VkViewportSwizzleNV)
    ]

class VkPhysicalDeviceDiscardRectanglePropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDiscardRectangles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDiscardRectangles))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDiscardRectanglePropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxDiscardRectangles", c_uint)
    ]

class VkPipelineDiscardRectangleStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("discardRectangleMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.discardRectangleMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("discardRectangleCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.discardRectangleCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDiscardRectangles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDiscardRectangles))
            except: 
                pass
        self.JKEY = modval
VkPipelineDiscardRectangleStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("discardRectangleMode", c_int),
    ("discardRectangleCount", c_uint),
    ("pDiscardRectangles", VkRect2D)
    ]

class VkPhysicalDeviceConservativeRasterizationPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveOverestimationSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveOverestimationSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxExtraPrimitiveOverestimationSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxExtraPrimitiveOverestimationSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extraPrimitiveOverestimationSizeGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extraPrimitiveOverestimationSizeGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveUnderestimation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveUnderestimation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conservativePointAndLineRasterization"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conservativePointAndLineRasterization))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("degenerateTrianglesRasterized"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.degenerateTrianglesRasterized))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("degenerateLinesRasterized"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.degenerateLinesRasterized))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fullyCoveredFragmentShaderInputVariable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fullyCoveredFragmentShaderInputVariable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conservativeRasterizationPostDepthCoverage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conservativeRasterizationPostDepthCoverage))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceConservativeRasterizationPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("primitiveOverestimationSize", c_float),
    ("maxExtraPrimitiveOverestimationSize", c_float),
    ("extraPrimitiveOverestimationSizeGranularity", c_float),
    ("primitiveUnderestimation", c_uint),
    ("conservativePointAndLineRasterization", c_uint),
    ("degenerateTrianglesRasterized", c_uint),
    ("degenerateLinesRasterized", c_uint),
    ("fullyCoveredFragmentShaderInputVariable", c_uint),
    ("conservativeRasterizationPostDepthCoverage", c_uint)
    ]

class VkPipelineRasterizationConservativeStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("conservativeRasterizationMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.conservativeRasterizationMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extraPrimitiveOverestimationSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extraPrimitiveOverestimationSize))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationConservativeStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("conservativeRasterizationMode", c_int),
    ("extraPrimitiveOverestimationSize", c_float)
    ]

class VkPhysicalDeviceDepthClipEnableFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthClipEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthClipEnable))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDepthClipEnableFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("depthClipEnable", c_uint)
    ]

class VkPipelineRasterizationDepthClipStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthClipEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthClipEnable))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationDepthClipStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("depthClipEnable", c_uint)
    ]

class VkXYColorEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
VkXYColorEXT._fields_ = [
    ("x", c_float),
    ("y", c_float)
    ]

class VkHdrMetadataEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayPrimaryRed"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayPrimaryRed))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayPrimaryGreen"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayPrimaryGreen))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("displayPrimaryBlue"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.displayPrimaryBlue))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("whitePoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.whitePoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxLuminance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxLuminance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minLuminance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minLuminance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxContentLightLevel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxContentLightLevel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFrameAverageLightLevel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFrameAverageLightLevel))
            except: 
                pass
        self.JKEY = modval
VkHdrMetadataEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("displayPrimaryRed", VkXYColorEXT),
    ("displayPrimaryGreen", VkXYColorEXT),
    ("displayPrimaryBlue", VkXYColorEXT),
    ("whitePoint", VkXYColorEXT),
    ("maxLuminance", c_float),
    ("minLuminance", c_float),
    ("maxContentLightLevel", c_float),
    ("maxFrameAverageLightLevel", c_float)
    ]

class VkDebugUtilsLabelEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pLabelName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pLabelName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("color"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.color))
            except: 
                pass
        self.JKEY = modval
VkDebugUtilsLabelEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pLabelName", c_char_p),
    ("color", c_float *4)
    ]

class VkDebugUtilsObjectNameInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pObjectName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pObjectName))
            except: 
                pass
        self.JKEY = modval
VkDebugUtilsObjectNameInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("objectType", c_int),
    ("objectHandle", c_ulong),
    ("pObjectName", c_char_p)
    ]

class VkDebugUtilsMessengerCallbackDataEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMessageIdName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMessageIdName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("messageIdNumber"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.messageIdNumber))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMessage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMessage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueLabelCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueLabelCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueueLabels"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueueLabels))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("cmdBufLabelCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.cmdBufLabelCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCmdBufLabels"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCmdBufLabels))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pObjects"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pObjects))
            except: 
                pass
        self.JKEY = modval
VkDebugUtilsMessengerCallbackDataEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pMessageIdName", c_char_p),
    ("messageIdNumber", c_int),
    ("pMessage", c_char_p),
    ("queueLabelCount", c_uint),
    ("pQueueLabels", VkDebugUtilsLabelEXT),
    ("cmdBufLabelCount", c_uint),
    ("pCmdBufLabels", VkDebugUtilsLabelEXT),
    ("objectCount", c_uint),
    ("pObjects", VkDebugUtilsObjectNameInfoEXT)
    ]

class VkDebugUtilsMessengerCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("messageSeverity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.messageSeverity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("messageType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.messageType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnUserCallback"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnUserCallback))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pUserData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pUserData))
            except: 
                pass
        self.JKEY = modval
VkDebugUtilsMessengerCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("messageSeverity", c_uint),
    ("messageType", c_uint),
    ("pfnUserCallback", c_void_p),
    ("pUserData", c_void_p)
    ]

class VkDebugUtilsObjectTagInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tagName"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tagName))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tagSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tagSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTag"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTag))
            except: 
                pass
        self.JKEY = modval
VkDebugUtilsObjectTagInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("objectType", c_int),
    ("objectHandle", c_ulong),
    ("tagName", c_ulong),
    ("tagSize", c_ulong),
    ("pTag", c_void_p)
    ]

class VkSampleLocationEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("x"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.x))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("y"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.y))
            except: 
                pass
        self.JKEY = modval
VkSampleLocationEXT._fields_ = [
    ("x", c_float),
    ("y", c_float)
    ]

class VkSampleLocationsInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationsPerPixel"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationsPerPixel))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationGridSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationGridSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationsCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationsCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSampleLocations))
            except: 
                pass
        self.JKEY = modval
VkSampleLocationsInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("sampleLocationsPerPixel", c_int),
    ("sampleLocationGridSize", VkExtent2D),
    ("sampleLocationsCount", c_uint),
    ("pSampleLocations", VkSampleLocationEXT)
    ]

class VkAttachmentSampleLocationsEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("attachmentIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationsInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationsInfo))
            except: 
                pass
        self.JKEY = modval
VkAttachmentSampleLocationsEXT._fields_ = [
    ("attachmentIndex", c_uint),
    ("sampleLocationsInfo", VkSampleLocationsInfoEXT)
    ]

class VkSubpassSampleLocationsEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("subpassIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpassIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationsInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationsInfo))
            except: 
                pass
        self.JKEY = modval
VkSubpassSampleLocationsEXT._fields_ = [
    ("subpassIndex", c_uint),
    ("sampleLocationsInfo", VkSampleLocationsInfoEXT)
    ]

class VkRenderPassSampleLocationsBeginInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentInitialSampleLocationsCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentInitialSampleLocationsCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAttachmentInitialSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAttachmentInitialSampleLocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("postSubpassSampleLocationsCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.postSubpassSampleLocationsCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPostSubpassSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPostSubpassSampleLocations))
            except: 
                pass
        self.JKEY = modval
VkRenderPassSampleLocationsBeginInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("attachmentInitialSampleLocationsCount", c_uint),
    ("pAttachmentInitialSampleLocations", VkAttachmentSampleLocationsEXT),
    ("postSubpassSampleLocationsCount", c_uint),
    ("pPostSubpassSampleLocations", VkSubpassSampleLocationsEXT)
    ]

class VkPipelineSampleLocationsStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationsEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationsEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationsInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationsInfo))
            except: 
                pass
        self.JKEY = modval
VkPipelineSampleLocationsStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("sampleLocationsEnable", c_uint),
    ("sampleLocationsInfo", VkSampleLocationsInfoEXT)
    ]

class VkPhysicalDeviceSampleLocationsPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationSampleCounts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationSampleCounts))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSampleLocationGridSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSampleLocationGridSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationCoordinateRange"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationCoordinateRange))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationSubPixelBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationSubPixelBits))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("variableSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.variableSampleLocations))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSampleLocationsPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("sampleLocationSampleCounts", c_uint),
    ("maxSampleLocationGridSize", VkExtent2D),
    ("sampleLocationCoordinateRange", c_float *2),
    ("sampleLocationSubPixelBits", c_uint),
    ("variableSampleLocations", c_uint)
    ]

class VkMultisamplePropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSampleLocationGridSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSampleLocationGridSize))
            except: 
                pass
        self.JKEY = modval
VkMultisamplePropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxSampleLocationGridSize", VkExtent2D)
    ]

class VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendCoherentOperations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendCoherentOperations))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("advancedBlendCoherentOperations", c_uint)
    ]

class VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendMaxColorAttachments"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendMaxColorAttachments))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendIndependentBlend"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendIndependentBlend))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendNonPremultipliedSrcColor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendNonPremultipliedSrcColor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendNonPremultipliedDstColor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendNonPremultipliedDstColor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendCorrelatedOverlap"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendCorrelatedOverlap))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("advancedBlendAllOperations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.advancedBlendAllOperations))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("advancedBlendMaxColorAttachments", c_uint),
    ("advancedBlendIndependentBlend", c_uint),
    ("advancedBlendNonPremultipliedSrcColor", c_uint),
    ("advancedBlendNonPremultipliedDstColor", c_uint),
    ("advancedBlendCorrelatedOverlap", c_uint),
    ("advancedBlendAllOperations", c_uint)
    ]

class VkPipelineColorBlendAdvancedStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcPremultiplied"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcPremultiplied))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstPremultiplied"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstPremultiplied))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("blendOverlap"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.blendOverlap))
            except: 
                pass
        self.JKEY = modval
VkPipelineColorBlendAdvancedStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("srcPremultiplied", c_uint),
    ("dstPremultiplied", c_uint),
    ("blendOverlap", c_int)
    ]

class VkPipelineCoverageToColorStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageToColorEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageToColorEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageToColorLocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageToColorLocation))
            except: 
                pass
        self.JKEY = modval
VkPipelineCoverageToColorStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("coverageToColorEnable", c_uint),
    ("coverageToColorLocation", c_uint)
    ]

class VkPipelineCoverageModulationStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageModulationMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageModulationMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageModulationTableEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageModulationTableEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageModulationTableCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageModulationTableCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCoverageModulationTable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCoverageModulationTable))
            except: 
                pass
        self.JKEY = modval
VkPipelineCoverageModulationStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("coverageModulationMode", c_int),
    ("coverageModulationTableEnable", c_uint),
    ("coverageModulationTableCount", c_uint),
    ("pCoverageModulationTable", POINTER(c_float))
    ]

class VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSMCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSMCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderWarpsPerSM"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderWarpsPerSM))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderSMBuiltinsPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderSMCount", c_uint),
    ("shaderWarpsPerSM", c_uint)
    ]

class VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSMBuiltins"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSMBuiltins))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderSMBuiltinsFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderSMBuiltins", c_uint)
    ]

class VkDrmFormatModifierPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("drmFormatModifier"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifier))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierPlaneCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierPlaneCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierTilingFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierTilingFeatures))
            except: 
                pass
        self.JKEY = modval
VkDrmFormatModifierPropertiesEXT._fields_ = [
    ("drmFormatModifier", c_ulong),
    ("drmFormatModifierPlaneCount", c_uint),
    ("drmFormatModifierTilingFeatures", c_uint)
    ]

class VkDrmFormatModifierPropertiesListEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDrmFormatModifierProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDrmFormatModifierProperties))
            except: 
                pass
        self.JKEY = modval
VkDrmFormatModifierPropertiesListEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("drmFormatModifierCount", c_uint),
    ("pDrmFormatModifierProperties", VkDrmFormatModifierPropertiesEXT)
    ]

class VkPhysicalDeviceImageDrmFormatModifierInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifier"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifier))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sharingMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sharingMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("queueFamilyIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.queueFamilyIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pQueueFamilyIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pQueueFamilyIndices))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImageDrmFormatModifierInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("drmFormatModifier", c_ulong),
    ("sharingMode", c_int),
    ("queueFamilyIndexCount", c_uint),
    ("pQueueFamilyIndices", POINTER(c_uint))
    ]

class VkImageDrmFormatModifierListCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDrmFormatModifiers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDrmFormatModifiers))
            except: 
                pass
        self.JKEY = modval
VkImageDrmFormatModifierListCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("drmFormatModifierCount", c_uint),
    ("pDrmFormatModifiers", POINTER(c_ulong))
    ]

class VkImageDrmFormatModifierExplicitCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifier"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifier))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierPlaneCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierPlaneCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPlaneLayouts"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPlaneLayouts))
            except: 
                pass
        self.JKEY = modval
VkImageDrmFormatModifierExplicitCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("drmFormatModifier", c_ulong),
    ("drmFormatModifierPlaneCount", c_uint),
    ("pPlaneLayouts", VkSubresourceLayout)
    ]

class VkImageDrmFormatModifierPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifier"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifier))
            except: 
                pass
        self.JKEY = modval
VkImageDrmFormatModifierPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("drmFormatModifier", c_ulong)
    ]

class VkDrmFormatModifierProperties2EXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("drmFormatModifier"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifier))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierPlaneCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierPlaneCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierTilingFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierTilingFeatures))
            except: 
                pass
        self.JKEY = modval
VkDrmFormatModifierProperties2EXT._fields_ = [
    ("drmFormatModifier", c_ulong),
    ("drmFormatModifierPlaneCount", c_uint),
    ("drmFormatModifierTilingFeatures", c_ulong)
    ]

class VkDrmFormatModifierPropertiesList2EXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("drmFormatModifierCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.drmFormatModifierCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDrmFormatModifierProperties"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDrmFormatModifierProperties))
            except: 
                pass
        self.JKEY = modval
VkDrmFormatModifierPropertiesList2EXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("drmFormatModifierCount", c_uint),
    ("pDrmFormatModifierProperties", VkDrmFormatModifierProperties2EXT)
    ]

class VkValidationCacheCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("initialDataSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.initialDataSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pInitialData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pInitialData))
            except: 
                pass
        self.JKEY = modval
VkValidationCacheCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("initialDataSize", c_ulong),
    ("pInitialData", c_void_p)
    ]

class VkShaderModuleValidationCacheCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("validationCache"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.validationCache))
            except: 
                pass
        self.JKEY = modval
VkShaderModuleValidationCacheCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("validationCache", VkValidationCacheEXT_T)
    ]

class VkShadingRatePaletteNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("shadingRatePaletteEntryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRatePaletteEntryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pShadingRatePaletteEntries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pShadingRatePaletteEntries))
            except: 
                pass
        self.JKEY = modval
VkShadingRatePaletteNV._fields_ = [
    ("shadingRatePaletteEntryCount", c_uint),
    ("pShadingRatePaletteEntries", POINTER(c_int))
    ]

class VkPipelineViewportShadingRateImageStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateImageEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateImageEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pShadingRatePalettes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pShadingRatePalettes))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportShadingRateImageStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shadingRateImageEnable", c_uint),
    ("viewportCount", c_uint),
    ("pShadingRatePalettes", VkShadingRatePaletteNV)
    ]

class VkPhysicalDeviceShadingRateImageFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateImage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateCoarseSampleOrder"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateCoarseSampleOrder))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShadingRateImageFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shadingRateImage", c_uint),
    ("shadingRateCoarseSampleOrder", c_uint)
    ]

class VkPhysicalDeviceShadingRateImagePropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateTexelSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRatePaletteSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRatePaletteSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateMaxCoarseSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateMaxCoarseSamples))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShadingRateImagePropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shadingRateTexelSize", VkExtent2D),
    ("shadingRatePaletteSize", c_uint),
    ("shadingRateMaxCoarseSamples", c_uint)
    ]

class VkCoarseSampleLocationNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("pixelX"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pixelX))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pixelY"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pixelY))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sample"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sample))
            except: 
                pass
        self.JKEY = modval
VkCoarseSampleLocationNV._fields_ = [
    ("pixelX", c_uint),
    ("pixelY", c_uint),
    ("sample", c_uint)
    ]

class VkCoarseSampleOrderCustomNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("shadingRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRate))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleLocationCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleLocationCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pSampleLocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pSampleLocations))
            except: 
                pass
        self.JKEY = modval
VkCoarseSampleOrderCustomNV._fields_ = [
    ("shadingRate", c_int),
    ("sampleCount", c_uint),
    ("sampleLocationCount", c_uint),
    ("pSampleLocations", VkCoarseSampleLocationNV)
    ]

class VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampleOrderType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampleOrderType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("customSampleOrderCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.customSampleOrderCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCustomSampleOrders"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCustomSampleOrders))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportCoarseSampleOrderStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("sampleOrderType", c_int),
    ("customSampleOrderCount", c_uint),
    ("pCustomSampleOrders", VkCoarseSampleOrderCustomNV)
    ]

class VkRayTracingShaderGroupCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("generalShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.generalShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("closestHitShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.closestHitShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("anyHitShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.anyHitShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("intersectionShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.intersectionShader))
            except: 
                pass
        self.JKEY = modval
VkRayTracingShaderGroupCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int),
    ("generalShader", c_uint),
    ("closestHitShader", c_uint),
    ("anyHitShader", c_uint),
    ("intersectionShader", c_uint)
    ]

class VkRayTracingPipelineCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("groupCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.groupCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pGroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pGroups))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxRecursionDepth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxRecursionDepth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineIndex))
            except: 
                pass
        self.JKEY = modval
VkRayTracingPipelineCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("stageCount", c_uint),
    ("pStages", VkPipelineShaderStageCreateInfo),
    ("groupCount", c_uint),
    ("pGroups", VkRayTracingShaderGroupCreateInfoNV),
    ("maxRecursionDepth", c_uint),
    ("layout", VkPipelineLayout_T),
    ("basePipelineHandle", VkPipeline_T),
    ("basePipelineIndex", c_int)
    ]

class VkGeometryTrianglesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformOffset))
            except: 
                pass
        self.JKEY = modval
VkGeometryTrianglesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vertexData", VkBuffer_T),
    ("vertexOffset", c_ulong),
    ("vertexCount", c_uint),
    ("vertexStride", c_ulong),
    ("vertexFormat", c_int),
    ("indexData", VkBuffer_T),
    ("indexOffset", c_ulong),
    ("indexCount", c_uint),
    ("indexType", c_int),
    ("transformData", VkBuffer_T),
    ("transformOffset", c_ulong)
    ]

class VkGeometryAABBNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("aabbData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aabbData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("numAABBs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.numAABBs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
VkGeometryAABBNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("aabbData", VkBuffer_T),
    ("numAABBs", c_uint),
    ("stride", c_uint),
    ("offset", c_ulong)
    ]

class VkGeometryDataNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("triangles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.triangles))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("aabbs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aabbs))
            except: 
                pass
        self.JKEY = modval
VkGeometryDataNV._fields_ = [
    ("triangles", VkGeometryTrianglesNV),
    ("aabbs", VkGeometryAABBNV)
    ]

class VkGeometryNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometryType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometryType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometry"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometry))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkGeometryNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("geometryType", c_int),
    ("geometry", VkGeometryDataNV),
    ("flags", c_uint)
    ]

class VkAccelerationStructureInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pGeometries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pGeometries))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int),
    ("flags", c_uint),
    ("instanceCount", c_uint),
    ("geometryCount", c_uint),
    ("pGeometries", VkGeometryNV)
    ]

class VkAccelerationStructureCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compactedSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compactedSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("info"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.info))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("compactedSize", c_ulong),
    ("info", VkAccelerationStructureInfoNV)
    ]

class VkBindAccelerationStructureMemoryInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructure"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructure))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceIndexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceIndexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDeviceIndices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDeviceIndices))
            except: 
                pass
        self.JKEY = modval
VkBindAccelerationStructureMemoryInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("accelerationStructure", VkAccelerationStructureNV_T),
    ("memory", VkDeviceMemory_T),
    ("memoryOffset", c_ulong),
    ("deviceIndexCount", c_uint),
    ("pDeviceIndices", POINTER(c_uint))
    ]

class VkWriteDescriptorSetAccelerationStructureNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
VkWriteDescriptorSetAccelerationStructureNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("accelerationStructureCount", c_uint),
    ("pAccelerationStructures", POINTER(VkAccelerationStructureNV_T))
    ]

class VkAccelerationStructureMemoryRequirementsInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructure"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructure))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureMemoryRequirementsInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int),
    ("accelerationStructure", VkAccelerationStructureNV_T)
    ]

class VkPhysicalDeviceRayTracingPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderGroupHandleSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderGroupHandleSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxRecursionDepth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxRecursionDepth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxShaderGroupStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxShaderGroupStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderGroupBaseAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderGroupBaseAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInstanceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInstanceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTriangleCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTriangleCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRayTracingPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderGroupHandleSize", c_uint),
    ("maxRecursionDepth", c_uint),
    ("maxShaderGroupStride", c_uint),
    ("shaderGroupBaseAlignment", c_uint),
    ("maxGeometryCount", c_ulong),
    ("maxInstanceCount", c_ulong),
    ("maxTriangleCount", c_ulong),
    ("maxDescriptorSetAccelerationStructures", c_uint)
    ]

class VkTransformMatrixKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("matrix"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.matrix))
            except: 
                pass
        self.JKEY = modval
VkTransformMatrixKHR._fields_ = [
    ("matrix", c_float *9)
    ]

class VkAabbPositionsKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("minX"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minX))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minY"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minY))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minZ"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minZ))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxX"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxX))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxY"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxY))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxZ"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxZ))
            except: 
                pass
        self.JKEY = modval
VkAabbPositionsKHR._fields_ = [
    ("minX", c_float),
    ("minY", c_float),
    ("minZ", c_float),
    ("maxX", c_float),
    ("maxY", c_float),
    ("maxZ", c_float)
    ]

class VkAccelerationStructureInstanceKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("transform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transform))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceCustomIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceCustomIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceShaderBindingTableRecordOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceShaderBindingTableRecordOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureReference"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureReference))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureInstanceKHR._fields_ = [
    ("transform", VkTransformMatrixKHR),
    ("instanceCustomIndex", c_uint),
    ("mask", c_uint),
    ("instanceShaderBindingTableRecordOffset", c_uint),
    ("flags", c_uint),
    ("accelerationStructureReference", c_ulong)
    ]

class VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("representativeFragmentTest"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.representativeFragmentTest))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("representativeFragmentTest", c_uint)
    ]

class VkPipelineRepresentativeFragmentTestStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("representativeFragmentTestEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.representativeFragmentTestEnable))
            except: 
                pass
        self.JKEY = modval
VkPipelineRepresentativeFragmentTestStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("representativeFragmentTestEnable", c_uint)
    ]

class VkPhysicalDeviceImageViewImageFormatInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageViewType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageViewType))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImageViewImageFormatInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageViewType", c_int)
    ]

class VkFilterCubicImageViewImageFormatPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filterCubic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filterCubic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("filterCubicMinmax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.filterCubicMinmax))
            except: 
                pass
        self.JKEY = modval
VkFilterCubicImageViewImageFormatPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("filterCubic", c_uint),
    ("filterCubicMinmax", c_uint)
    ]

class VkImportMemoryHostPointerInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pHostPointer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pHostPointer))
            except: 
                pass
        self.JKEY = modval
VkImportMemoryHostPointerInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("handleType", c_int),
    ("pHostPointer", c_void_p)
    ]

class VkMemoryHostPointerPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryTypeBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryTypeBits))
            except: 
                pass
        self.JKEY = modval
VkMemoryHostPointerPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memoryTypeBits", c_uint)
    ]

class VkPhysicalDeviceExternalMemoryHostPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minImportedHostPointerAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minImportedHostPointerAlignment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExternalMemoryHostPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minImportedHostPointerAlignment", c_ulong)
    ]

class VkPipelineCompilerControlCreateInfoAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("compilerControlFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.compilerControlFlags))
            except: 
                pass
        self.JKEY = modval
VkPipelineCompilerControlCreateInfoAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("compilerControlFlags", c_uint)
    ]

class VkCalibratedTimestampInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("timeDomain"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.timeDomain))
            except: 
                pass
        self.JKEY = modval
VkCalibratedTimestampInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("timeDomain", c_int)
    ]

class VkPhysicalDeviceShaderCorePropertiesAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderEngineCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderEngineCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderArraysPerEngineCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderArraysPerEngineCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("computeUnitsPerShaderArray"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.computeUnitsPerShaderArray))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("simdPerComputeUnit"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.simdPerComputeUnit))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("wavefrontsPerSimd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.wavefrontsPerSimd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("wavefrontSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.wavefrontSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sgprsPerSimd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sgprsPerSimd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSgprAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSgprAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSgprAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSgprAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sgprAllocationGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sgprAllocationGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vgprsPerSimd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vgprsPerSimd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minVgprAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minVgprAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVgprAllocation"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVgprAllocation))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vgprAllocationGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vgprAllocationGranularity))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderCorePropertiesAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderEngineCount", c_uint),
    ("shaderArraysPerEngineCount", c_uint),
    ("computeUnitsPerShaderArray", c_uint),
    ("simdPerComputeUnit", c_uint),
    ("wavefrontsPerSimd", c_uint),
    ("wavefrontSize", c_uint),
    ("sgprsPerSimd", c_uint),
    ("minSgprAllocation", c_uint),
    ("maxSgprAllocation", c_uint),
    ("sgprAllocationGranularity", c_uint),
    ("vgprsPerSimd", c_uint),
    ("minVgprAllocation", c_uint),
    ("maxVgprAllocation", c_uint),
    ("vgprAllocationGranularity", c_uint)
    ]

class VkDeviceMemoryOverallocationCreateInfoAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("overallocationBehavior"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.overallocationBehavior))
            except: 
                pass
        self.JKEY = modval
VkDeviceMemoryOverallocationCreateInfoAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("overallocationBehavior", c_int)
    ]

class VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertexAttribDivisor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertexAttribDivisor))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxVertexAttribDivisor", c_uint)
    ]

class VkVertexInputBindingDivisorDescriptionEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("divisor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.divisor))
            except: 
                pass
        self.JKEY = modval
VkVertexInputBindingDivisorDescriptionEXT._fields_ = [
    ("binding", c_uint),
    ("divisor", c_uint)
    ]

class VkPipelineVertexInputDivisorStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexBindingDivisorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexBindingDivisorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pVertexBindingDivisors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pVertexBindingDivisors))
            except: 
                pass
        self.JKEY = modval
VkPipelineVertexInputDivisorStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vertexBindingDivisorCount", c_uint),
    ("pVertexBindingDivisors", VkVertexInputBindingDivisorDescriptionEXT)
    ]

class VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexAttributeInstanceRateDivisor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexAttributeInstanceRateDivisor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexAttributeInstanceRateZeroDivisor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexAttributeInstanceRateZeroDivisor))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vertexAttributeInstanceRateDivisor", c_uint),
    ("vertexAttributeInstanceRateZeroDivisor", c_uint)
    ]

class VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("computeDerivativeGroupQuads"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.computeDerivativeGroupQuads))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("computeDerivativeGroupLinear"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.computeDerivativeGroupLinear))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceComputeShaderDerivativesFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("computeDerivativeGroupQuads", c_uint),
    ("computeDerivativeGroupLinear", c_uint)
    ]

class VkPhysicalDeviceMeshShaderFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("taskShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.taskShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("meshShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.meshShader))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMeshShaderFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("taskShader", c_uint),
    ("meshShader", c_uint)
    ]

class VkPhysicalDeviceMeshShaderPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDrawMeshTasksCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDrawMeshTasksCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTaskWorkGroupInvocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTaskWorkGroupInvocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTaskWorkGroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTaskWorkGroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTaskTotalMemorySize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTaskTotalMemorySize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxTaskOutputCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxTaskOutputCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMeshWorkGroupInvocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMeshWorkGroupInvocations))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMeshWorkGroupSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMeshWorkGroupSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMeshTotalMemorySize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMeshTotalMemorySize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMeshOutputVertices"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMeshOutputVertices))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMeshOutputPrimitives"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMeshOutputPrimitives))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMeshMultiviewViewCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMeshMultiviewViewCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("meshOutputPerVertexGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.meshOutputPerVertexGranularity))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("meshOutputPerPrimitiveGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.meshOutputPerPrimitiveGranularity))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMeshShaderPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxDrawMeshTasksCount", c_uint),
    ("maxTaskWorkGroupInvocations", c_uint),
    ("maxTaskWorkGroupSize", c_uint *3),
    ("maxTaskTotalMemorySize", c_uint),
    ("maxTaskOutputCount", c_uint),
    ("maxMeshWorkGroupInvocations", c_uint),
    ("maxMeshWorkGroupSize", c_uint *3),
    ("maxMeshTotalMemorySize", c_uint),
    ("maxMeshOutputVertices", c_uint),
    ("maxMeshOutputPrimitives", c_uint),
    ("maxMeshMultiviewViewCount", c_uint),
    ("meshOutputPerVertexGranularity", c_uint),
    ("meshOutputPerPrimitiveGranularity", c_uint)
    ]

class VkDrawMeshTasksIndirectCommandNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("taskCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.taskCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("firstTask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstTask))
            except: 
                pass
        self.JKEY = modval
VkDrawMeshTasksIndirectCommandNV._fields_ = [
    ("taskCount", c_uint),
    ("firstTask", c_uint)
    ]

class VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShaderBarycentric"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShaderBarycentric))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentShaderBarycentric", c_uint)
    ]

class VkPhysicalDeviceShaderImageFootprintFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("imageFootprint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.imageFootprint))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderImageFootprintFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("imageFootprint", c_uint)
    ]

class VkPipelineViewportExclusiveScissorStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("exclusiveScissorCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.exclusiveScissorCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pExclusiveScissors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pExclusiveScissors))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportExclusiveScissorStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("exclusiveScissorCount", c_uint),
    ("pExclusiveScissors", VkRect2D)
    ]

class VkPhysicalDeviceExclusiveScissorFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("exclusiveScissor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.exclusiveScissor))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExclusiveScissorFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("exclusiveScissor", c_uint)
    ]

class VkQueueFamilyCheckpointPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("checkpointExecutionStageMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.checkpointExecutionStageMask))
            except: 
                pass
        self.JKEY = modval
VkQueueFamilyCheckpointPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("checkpointExecutionStageMask", c_uint)
    ]

class VkCheckpointDataNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stage))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pCheckpointMarker"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pCheckpointMarker))
            except: 
                pass
        self.JKEY = modval
VkCheckpointDataNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stage", c_int),
    ("pCheckpointMarker", c_void_p)
    ]

class VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderIntegerFunctions2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderIntegerFunctions2))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderIntegerFunctions2", c_uint)
    ]

class VkPerformanceValueDataINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("value32"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.value32))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("value64"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.value64))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("valueFloat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.valueFloat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("valueBool"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.valueBool))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("valueString"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.valueString))
            except: 
                pass
        self.JKEY = modval
VkPerformanceValueDataINTEL._fields_ = [
    ("value32", c_uint),
    ("value64", c_ulong),
    ("valueFloat", c_float),
    ("valueBool", c_uint),
    ("valueString", c_char_p)
    ]

class VkPerformanceValueINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("data"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.data))
            except: 
                pass
        self.JKEY = modval
VkPerformanceValueINTEL._fields_ = [
    ("type", c_int),
    ("data", VkPerformanceValueDataINTEL)
    ]

class VkInitializePerformanceApiInfoINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pUserData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pUserData))
            except: 
                pass
        self.JKEY = modval
VkInitializePerformanceApiInfoINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pUserData", c_void_p)
    ]

class VkQueryPoolPerformanceQueryCreateInfoINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("performanceCountersSampling"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.performanceCountersSampling))
            except: 
                pass
        self.JKEY = modval
VkQueryPoolPerformanceQueryCreateInfoINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("performanceCountersSampling", c_int)
    ]

class VkPerformanceMarkerInfoINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("marker"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.marker))
            except: 
                pass
        self.JKEY = modval
VkPerformanceMarkerInfoINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("marker", c_ulong)
    ]

class VkPerformanceStreamMarkerInfoINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("marker"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.marker))
            except: 
                pass
        self.JKEY = modval
VkPerformanceStreamMarkerInfoINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("marker", c_uint)
    ]

class VkPerformanceOverrideInfoINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("enable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.enable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("parameter"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.parameter))
            except: 
                pass
        self.JKEY = modval
VkPerformanceOverrideInfoINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int),
    ("enable", c_uint),
    ("parameter", c_ulong)
    ]

class VkPerformanceConfigurationAcquireInfoINTEL(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
VkPerformanceConfigurationAcquireInfoINTEL._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int)
    ]

class VkPhysicalDevicePCIBusInfoPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pciDomain"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pciDomain))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pciBus"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pciBus))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pciDevice"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pciDevice))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pciFunction"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pciFunction))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePCIBusInfoPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pciDomain", c_uint),
    ("pciBus", c_uint),
    ("pciDevice", c_uint),
    ("pciFunction", c_uint)
    ]

class VkDisplayNativeHdrSurfaceCapabilitiesAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("localDimmingSupport"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.localDimmingSupport))
            except: 
                pass
        self.JKEY = modval
VkDisplayNativeHdrSurfaceCapabilitiesAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("localDimmingSupport", c_uint)
    ]

class VkSwapchainDisplayNativeHdrCreateInfoAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("localDimmingEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.localDimmingEnable))
            except: 
                pass
        self.JKEY = modval
VkSwapchainDisplayNativeHdrCreateInfoAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("localDimmingEnable", c_uint)
    ]

class VkPhysicalDeviceFragmentDensityMapFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityMap"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityMap))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityMapDynamic"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityMapDynamic))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityMapNonSubsampledImages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityMapNonSubsampledImages))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentDensityMapFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentDensityMap", c_uint),
    ("fragmentDensityMapDynamic", c_uint),
    ("fragmentDensityMapNonSubsampledImages", c_uint)
    ]

class VkPhysicalDeviceFragmentDensityMapPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minFragmentDensityTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minFragmentDensityTexelSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentDensityTexelSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentDensityTexelSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityInvocations"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityInvocations))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentDensityMapPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minFragmentDensityTexelSize", VkExtent2D),
    ("maxFragmentDensityTexelSize", VkExtent2D),
    ("fragmentDensityInvocations", c_uint)
    ]

class VkRenderPassFragmentDensityMapCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityMapAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityMapAttachment))
            except: 
                pass
        self.JKEY = modval
VkRenderPassFragmentDensityMapCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentDensityMapAttachment", VkAttachmentReference)
    ]

class VkPhysicalDeviceShaderCoreProperties2AMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderCoreFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderCoreFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("activeComputeUnitCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.activeComputeUnitCount))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderCoreProperties2AMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderCoreFeatures", c_uint),
    ("activeComputeUnitCount", c_uint)
    ]

class VkPhysicalDeviceCoherentMemoryFeaturesAMD(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceCoherentMemory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceCoherentMemory))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCoherentMemoryFeaturesAMD._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceCoherentMemory", c_uint)
    ]

class VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderImageInt64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderImageInt64Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseImageInt64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseImageInt64Atomics))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderImageInt64Atomics", c_uint),
    ("sparseImageInt64Atomics", c_uint)
    ]

class VkPhysicalDeviceMemoryBudgetPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("heapBudget"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.heapBudget))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("heapUsage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.heapUsage))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMemoryBudgetPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("heapBudget", c_ulong *16),
    ("heapUsage", c_ulong *16)
    ]

class VkPhysicalDeviceMemoryPriorityFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryPriority"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryPriority))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMemoryPriorityFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memoryPriority", c_uint)
    ]

class VkMemoryPriorityAllocateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("priority"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.priority))
            except: 
                pass
        self.JKEY = modval
VkMemoryPriorityAllocateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("priority", c_float)
    ]

class VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dedicatedAllocationImageAliasing"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dedicatedAllocationImageAliasing))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("dedicatedAllocationImageAliasing", c_uint)
    ]

class VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddressCaptureReplay"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddressCaptureReplay))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bufferDeviceAddressMultiDevice"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferDeviceAddressMultiDevice))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceBufferDeviceAddressFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("bufferDeviceAddress", c_uint),
    ("bufferDeviceAddressCaptureReplay", c_uint),
    ("bufferDeviceAddressMultiDevice", c_uint)
    ]

class VkBufferDeviceAddressCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceAddress))
            except: 
                pass
        self.JKEY = modval
VkBufferDeviceAddressCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceAddress", c_ulong)
    ]

class VkValidationFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("enabledValidationFeatureCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.enabledValidationFeatureCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pEnabledValidationFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pEnabledValidationFeatures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("disabledValidationFeatureCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.disabledValidationFeatureCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDisabledValidationFeatures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDisabledValidationFeatures))
            except: 
                pass
        self.JKEY = modval
VkValidationFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("enabledValidationFeatureCount", c_uint),
    ("pEnabledValidationFeatures", POINTER(c_int)),
    ("disabledValidationFeatureCount", c_uint),
    ("pDisabledValidationFeatures", POINTER(c_int))
    ]

class VkCooperativeMatrixPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("MSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.MSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("NSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.NSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("KSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.KSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("AType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.AType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("BType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.BType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("CType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.CType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("DType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.DType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scope"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scope))
            except: 
                pass
        self.JKEY = modval
VkCooperativeMatrixPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("MSize", c_uint),
    ("NSize", c_uint),
    ("KSize", c_uint),
    ("AType", c_int),
    ("BType", c_int),
    ("CType", c_int),
    ("DType", c_int),
    ("scope", c_int)
    ]

class VkPhysicalDeviceCooperativeMatrixFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("cooperativeMatrix"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.cooperativeMatrix))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("cooperativeMatrixRobustBufferAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.cooperativeMatrixRobustBufferAccess))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCooperativeMatrixFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("cooperativeMatrix", c_uint),
    ("cooperativeMatrixRobustBufferAccess", c_uint)
    ]

class VkPhysicalDeviceCooperativeMatrixPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("cooperativeMatrixSupportedStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.cooperativeMatrixSupportedStages))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCooperativeMatrixPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("cooperativeMatrixSupportedStages", c_uint)
    ]

class VkPhysicalDeviceCoverageReductionModeFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageReductionMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageReductionMode))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCoverageReductionModeFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("coverageReductionMode", c_uint)
    ]

class VkPipelineCoverageReductionStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageReductionMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageReductionMode))
            except: 
                pass
        self.JKEY = modval
VkPipelineCoverageReductionStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("coverageReductionMode", c_int)
    ]

class VkFramebufferMixedSamplesCombinationNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("coverageReductionMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.coverageReductionMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationSamples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthStencilSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthStencilSamples))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorSamples"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorSamples))
            except: 
                pass
        self.JKEY = modval
VkFramebufferMixedSamplesCombinationNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("coverageReductionMode", c_int),
    ("rasterizationSamples", c_int),
    ("depthStencilSamples", c_uint),
    ("colorSamples", c_uint)
    ]

class VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShaderSampleInterlock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShaderSampleInterlock))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShaderPixelInterlock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShaderPixelInterlock))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShaderShadingRateInterlock"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShaderShadingRateInterlock))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentShaderSampleInterlock", c_uint),
    ("fragmentShaderPixelInterlock", c_uint),
    ("fragmentShaderShadingRateInterlock", c_uint)
    ]

class VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ycbcrImageArrays"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ycbcrImageArrays))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceYcbcrImageArraysFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("ycbcrImageArrays", c_uint)
    ]

class VkPhysicalDeviceProvokingVertexFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("provokingVertexLast"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.provokingVertexLast))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedbackPreservesProvokingVertex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedbackPreservesProvokingVertex))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceProvokingVertexFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("provokingVertexLast", c_uint),
    ("transformFeedbackPreservesProvokingVertex", c_uint)
    ]

class VkPhysicalDeviceProvokingVertexPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("provokingVertexModePerPipeline"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.provokingVertexModePerPipeline))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformFeedbackPreservesTriangleFanProvokingVertex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformFeedbackPreservesTriangleFanProvokingVertex))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceProvokingVertexPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("provokingVertexModePerPipeline", c_uint),
    ("transformFeedbackPreservesTriangleFanProvokingVertex", c_uint)
    ]

class VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("provokingVertexMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.provokingVertexMode))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationProvokingVertexStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("provokingVertexMode", c_int)
    ]

class VkHeadlessSurfaceCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkHeadlessSurfaceCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkPhysicalDeviceLineRasterizationFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rectangularLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rectangularLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("bresenhamLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bresenhamLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("smoothLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.smoothLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stippledRectangularLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stippledRectangularLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stippledBresenhamLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stippledBresenhamLines))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stippledSmoothLines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stippledSmoothLines))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceLineRasterizationFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("rectangularLines", c_uint),
    ("bresenhamLines", c_uint),
    ("smoothLines", c_uint),
    ("stippledRectangularLines", c_uint),
    ("stippledBresenhamLines", c_uint),
    ("stippledSmoothLines", c_uint)
    ]

class VkPhysicalDeviceLineRasterizationPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineSubPixelPrecisionBits"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineSubPixelPrecisionBits))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceLineRasterizationPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("lineSubPixelPrecisionBits", c_uint)
    ]

class VkPipelineRasterizationLineStateCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineRasterizationMode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineRasterizationMode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stippledLineEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stippledLineEnable))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineStippleFactor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineStippleFactor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("lineStipplePattern"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.lineStipplePattern))
            except: 
                pass
        self.JKEY = modval
VkPipelineRasterizationLineStateCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("lineRasterizationMode", c_int),
    ("stippledLineEnable", c_uint),
    ("lineStippleFactor", c_uint),
    ("lineStipplePattern", c_ushort)
    ]

class VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat32Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat32Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat32AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat32AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat64Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat64AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat64AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat32Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat32Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat32AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat32AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat64Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat64Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat64AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat64AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderImageFloat32Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderImageFloat32Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderImageFloat32AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderImageFloat32AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseImageFloat32Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseImageFloat32Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseImageFloat32AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseImageFloat32AtomicAdd))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderAtomicFloatFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderBufferFloat32Atomics", c_uint),
    ("shaderBufferFloat32AtomicAdd", c_uint),
    ("shaderBufferFloat64Atomics", c_uint),
    ("shaderBufferFloat64AtomicAdd", c_uint),
    ("shaderSharedFloat32Atomics", c_uint),
    ("shaderSharedFloat32AtomicAdd", c_uint),
    ("shaderSharedFloat64Atomics", c_uint),
    ("shaderSharedFloat64AtomicAdd", c_uint),
    ("shaderImageFloat32Atomics", c_uint),
    ("shaderImageFloat32AtomicAdd", c_uint),
    ("sparseImageFloat32Atomics", c_uint),
    ("sparseImageFloat32AtomicAdd", c_uint)
    ]

class VkPhysicalDeviceIndexTypeUint8FeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexTypeUint8"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexTypeUint8))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceIndexTypeUint8FeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("indexTypeUint8", c_uint)
    ]

class VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extendedDynamicState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extendedDynamicState))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExtendedDynamicStateFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("extendedDynamicState", c_uint)
    ]

class VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat16Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat16Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat16AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat16AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat16AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat16AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat32AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat32AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderBufferFloat64AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderBufferFloat64AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat16Atomics"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat16Atomics))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat16AtomicAdd"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat16AtomicAdd))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat16AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat16AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat32AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat32AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderSharedFloat64AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderSharedFloat64AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderImageFloat32AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderImageFloat32AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sparseImageFloat32AtomicMinMax"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sparseImageFloat32AtomicMinMax))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderBufferFloat16Atomics", c_uint),
    ("shaderBufferFloat16AtomicAdd", c_uint),
    ("shaderBufferFloat16AtomicMinMax", c_uint),
    ("shaderBufferFloat32AtomicMinMax", c_uint),
    ("shaderBufferFloat64AtomicMinMax", c_uint),
    ("shaderSharedFloat16Atomics", c_uint),
    ("shaderSharedFloat16AtomicAdd", c_uint),
    ("shaderSharedFloat16AtomicMinMax", c_uint),
    ("shaderSharedFloat32AtomicMinMax", c_uint),
    ("shaderSharedFloat64AtomicMinMax", c_uint),
    ("shaderImageFloat32AtomicMinMax", c_uint),
    ("sparseImageFloat32AtomicMinMax", c_uint)
    ]

class VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGraphicsShaderGroupCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGraphicsShaderGroupCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxIndirectSequenceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxIndirectSequenceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxIndirectCommandsTokenCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxIndirectCommandsTokenCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxIndirectCommandsStreamCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxIndirectCommandsStreamCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxIndirectCommandsTokenOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxIndirectCommandsTokenOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxIndirectCommandsStreamStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxIndirectCommandsStreamStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSequencesCountBufferOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSequencesCountBufferOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minSequencesIndexBufferOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minSequencesIndexBufferOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minIndirectCommandsBufferOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minIndirectCommandsBufferOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxGraphicsShaderGroupCount", c_uint),
    ("maxIndirectSequenceCount", c_uint),
    ("maxIndirectCommandsTokenCount", c_uint),
    ("maxIndirectCommandsStreamCount", c_uint),
    ("maxIndirectCommandsTokenOffset", c_uint),
    ("maxIndirectCommandsStreamStride", c_uint),
    ("minSequencesCountBufferOffsetAlignment", c_uint),
    ("minSequencesIndexBufferOffsetAlignment", c_uint),
    ("minIndirectCommandsBufferOffsetAlignment", c_uint)
    ]

class VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceGeneratedCommands"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceGeneratedCommands))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceGeneratedCommands", c_uint)
    ]

class VkGraphicsShaderGroupCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pVertexInputState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pVertexInputState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTessellationState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTessellationState))
            except: 
                pass
        self.JKEY = modval
VkGraphicsShaderGroupCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("stageCount", c_uint),
    ("pStages", VkPipelineShaderStageCreateInfo),
    ("pVertexInputState", VkPipelineVertexInputStateCreateInfo),
    ("pTessellationState", VkPipelineTessellationStateCreateInfo)
    ]

class VkGraphicsPipelineShaderGroupsCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("groupCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.groupCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pGroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pGroups))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pPipelines"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pPipelines))
            except: 
                pass
        self.JKEY = modval
VkGraphicsPipelineShaderGroupsCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("groupCount", c_uint),
    ("pGroups", VkGraphicsShaderGroupCreateInfoNV),
    ("pipelineCount", c_uint),
    ("pPipelines", POINTER(VkPipeline_T))
    ]

class VkBindShaderGroupIndirectCommandNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("groupIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.groupIndex))
            except: 
                pass
        self.JKEY = modval
VkBindShaderGroupIndirectCommandNV._fields_ = [
    ("groupIndex", c_uint)
    ]

class VkBindIndexBufferIndirectCommandNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("bufferAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexType))
            except: 
                pass
        self.JKEY = modval
VkBindIndexBufferIndirectCommandNV._fields_ = [
    ("bufferAddress", c_ulong),
    ("size", c_uint),
    ("indexType", c_int)
    ]

class VkBindVertexBufferIndirectCommandNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("bufferAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.bufferAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
VkBindVertexBufferIndirectCommandNV._fields_ = [
    ("bufferAddress", c_ulong),
    ("size", c_uint),
    ("stride", c_uint)
    ]

class VkSetStateFlagsIndirectCommandNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("data"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.data))
            except: 
                pass
        self.JKEY = modval
VkSetStateFlagsIndirectCommandNV._fields_ = [
    ("data", c_uint)
    ]

class VkIndirectCommandsStreamNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
VkIndirectCommandsStreamNV._fields_ = [
    ("buffer", VkBuffer_T),
    ("offset", c_ulong)
    ]

class VkIndirectCommandsLayoutTokenNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tokenType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tokenType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stream"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stream))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexBindingUnit"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexBindingUnit))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexDynamicStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexDynamicStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pushconstantPipelineLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pushconstantPipelineLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pushconstantShaderStageFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pushconstantShaderStageFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pushconstantOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pushconstantOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pushconstantSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pushconstantSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indirectStateFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indirectStateFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexTypeCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexTypeCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pIndexTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pIndexTypes))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pIndexTypeValues"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pIndexTypeValues))
            except: 
                pass
        self.JKEY = modval
VkIndirectCommandsLayoutTokenNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("tokenType", c_int),
    ("stream", c_uint),
    ("offset", c_uint),
    ("vertexBindingUnit", c_uint),
    ("vertexDynamicStride", c_uint),
    ("pushconstantPipelineLayout", VkPipelineLayout_T),
    ("pushconstantShaderStageFlags", c_uint),
    ("pushconstantOffset", c_uint),
    ("pushconstantSize", c_uint),
    ("indirectStateFlags", c_uint),
    ("indexTypeCount", c_uint),
    ("pIndexTypes", POINTER(c_int)),
    ("pIndexTypeValues", POINTER(c_uint))
    ]

class VkIndirectCommandsLayoutCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineBindPoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineBindPoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tokenCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tokenCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pTokens"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pTokens))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("streamCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.streamCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStreamStrides"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStreamStrides))
            except: 
                pass
        self.JKEY = modval
VkIndirectCommandsLayoutCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pipelineBindPoint", c_int),
    ("tokenCount", c_uint),
    ("pTokens", VkIndirectCommandsLayoutTokenNV),
    ("streamCount", c_uint),
    ("pStreamStrides", POINTER(c_uint))
    ]

class VkGeneratedCommandsInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineBindPoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineBindPoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipeline"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipeline))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indirectCommandsLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indirectCommandsLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("streamCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.streamCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStreams"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStreams))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sequencesCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sequencesCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("preprocessBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.preprocessBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("preprocessOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.preprocessOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("preprocessSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.preprocessSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sequencesCountBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sequencesCountBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sequencesCountOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sequencesCountOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sequencesIndexBuffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sequencesIndexBuffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sequencesIndexOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sequencesIndexOffset))
            except: 
                pass
        self.JKEY = modval
VkGeneratedCommandsInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipelineBindPoint", c_int),
    ("pipeline", VkPipeline_T),
    ("indirectCommandsLayout", VkIndirectCommandsLayoutNV_T),
    ("streamCount", c_uint),
    ("pStreams", VkIndirectCommandsStreamNV),
    ("sequencesCount", c_uint),
    ("preprocessBuffer", VkBuffer_T),
    ("preprocessOffset", c_ulong),
    ("preprocessSize", c_ulong),
    ("sequencesCountBuffer", VkBuffer_T),
    ("sequencesCountOffset", c_ulong),
    ("sequencesIndexBuffer", VkBuffer_T),
    ("sequencesIndexOffset", c_ulong)
    ]

class VkGeneratedCommandsMemoryRequirementsInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipelineBindPoint"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipelineBindPoint))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pipeline"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pipeline))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indirectCommandsLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indirectCommandsLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSequencesCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSequencesCount))
            except: 
                pass
        self.JKEY = modval
VkGeneratedCommandsMemoryRequirementsInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pipelineBindPoint", c_int),
    ("pipeline", VkPipeline_T),
    ("indirectCommandsLayout", VkIndirectCommandsLayoutNV_T),
    ("maxSequencesCount", c_uint)
    ]

class VkPhysicalDeviceInheritedViewportScissorFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inheritedViewportScissor2D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inheritedViewportScissor2D))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceInheritedViewportScissorFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("inheritedViewportScissor2D", c_uint)
    ]

class VkCommandBufferInheritanceViewportScissorInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportScissor2D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportScissor2D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("viewportDepthCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.viewportDepthCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pViewportDepths"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pViewportDepths))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferInheritanceViewportScissorInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("viewportScissor2D", c_uint),
    ("viewportDepthCount", c_uint),
    ("pViewportDepths", VkViewport)
    ]

class VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("texelBufferAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.texelBufferAlignment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("texelBufferAlignment", c_uint)
    ]

class VkRenderPassTransformBeginInfoQCOM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transform))
            except: 
                pass
        self.JKEY = modval
VkRenderPassTransformBeginInfoQCOM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("transform", c_int)
    ]

class VkCommandBufferInheritanceRenderPassTransformInfoQCOM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transform))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderArea"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderArea))
            except: 
                pass
        self.JKEY = modval
VkCommandBufferInheritanceRenderPassTransformInfoQCOM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("transform", c_int),
    ("renderArea", VkRect2D)
    ]

class VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceMemoryReport"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceMemoryReport))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDeviceMemoryReportFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("deviceMemoryReport", c_uint)
    ]

class VkDeviceMemoryReportCallbackDataEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memoryObjectId"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memoryObjectId))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("objectHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.objectHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("heapIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.heapIndex))
            except: 
                pass
        self.JKEY = modval
VkDeviceMemoryReportCallbackDataEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("type", c_int),
    ("memoryObjectId", c_ulong),
    ("size", c_ulong),
    ("objectType", c_int),
    ("objectHandle", c_ulong),
    ("heapIndex", c_uint)
    ]

class VkDeviceDeviceMemoryReportCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pfnUserCallback"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pfnUserCallback))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pUserData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pUserData))
            except: 
                pass
        self.JKEY = modval
VkDeviceDeviceMemoryReportCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("pfnUserCallback", c_void_p),
    ("pUserData", c_void_p)
    ]

class VkPhysicalDeviceRobustness2FeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustBufferAccess2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustBufferAccess2))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustImageAccess2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustImageAccess2))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("nullDescriptor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.nullDescriptor))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRobustness2FeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("robustBufferAccess2", c_uint),
    ("robustImageAccess2", c_uint),
    ("nullDescriptor", c_uint)
    ]

class VkPhysicalDeviceRobustness2PropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustStorageBufferAccessSizeAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustStorageBufferAccessSizeAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("robustUniformBufferAccessSizeAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.robustUniformBufferAccessSizeAlignment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRobustness2PropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("robustStorageBufferAccessSizeAlignment", c_ulong),
    ("robustUniformBufferAccessSizeAlignment", c_ulong)
    ]

class VkSamplerCustomBorderColorCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("customBorderColor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.customBorderColor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
VkSamplerCustomBorderColorCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("customBorderColor", VkClearColorValue),
    ("format", c_int)
    ]

class VkPhysicalDeviceCustomBorderColorPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxCustomBorderColorSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxCustomBorderColorSamplers))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCustomBorderColorPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxCustomBorderColorSamplers", c_uint)
    ]

class VkPhysicalDeviceCustomBorderColorFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("customBorderColors"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.customBorderColors))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("customBorderColorWithoutFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.customBorderColorWithoutFormat))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceCustomBorderColorFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("customBorderColors", c_uint),
    ("customBorderColorWithoutFormat", c_uint)
    ]

class VkPhysicalDeviceDiagnosticsConfigFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("diagnosticsConfig"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.diagnosticsConfig))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDiagnosticsConfigFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("diagnosticsConfig", c_uint)
    ]

class VkDeviceDiagnosticsConfigCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkDeviceDiagnosticsConfigCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("graphicsPipelineLibrary"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.graphicsPipelineLibrary))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("graphicsPipelineLibrary", c_uint)
    ]

class VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("graphicsPipelineLibraryFastLinking"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.graphicsPipelineLibraryFastLinking))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("graphicsPipelineLibraryIndependentInterpolationDecoration"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.graphicsPipelineLibraryIndependentInterpolationDecoration))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("graphicsPipelineLibraryFastLinking", c_uint),
    ("graphicsPipelineLibraryIndependentInterpolationDecoration", c_uint)
    ]

class VkGraphicsPipelineLibraryCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkGraphicsPipelineLibraryCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint)
    ]

class VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentShadingRateEnums"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentShadingRateEnums))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("supersampleFragmentShadingRates"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.supersampleFragmentShadingRates))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("noInvocationFragmentShadingRates"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.noInvocationFragmentShadingRates))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentShadingRateEnums", c_uint),
    ("supersampleFragmentShadingRates", c_uint),
    ("noInvocationFragmentShadingRates", c_uint)
    ]

class VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxFragmentShadingRateInvocationCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxFragmentShadingRateInvocationCount))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxFragmentShadingRateInvocationCount", c_int)
    ]

class VkPipelineFragmentShadingRateEnumStateCreateInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRateType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRateType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shadingRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shadingRate))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("combinerOps"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.combinerOps))
            except: 
                pass
        self.JKEY = modval
VkPipelineFragmentShadingRateEnumStateCreateInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shadingRateType", c_int),
    ("shadingRate", c_int),
    ("combinerOps", c_int *2)
    ]

class VkDeviceOrHostAddressConstKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("deviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("hostAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.hostAddress))
            except: 
                pass
        self.JKEY = modval
VkDeviceOrHostAddressConstKHR._fields_ = [
    ("deviceAddress", c_ulong),
    ("hostAddress", c_void_p)
    ]

class VkAccelerationStructureGeometryMotionTrianglesDataNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexData))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureGeometryMotionTrianglesDataNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vertexData", VkDeviceOrHostAddressConstKHR)
    ]

class VkAccelerationStructureMotionInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInstances"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInstances))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureMotionInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxInstances", c_uint),
    ("flags", c_uint)
    ]

class VkAccelerationStructureMatrixMotionInstanceNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("transformT0"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformT0))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformT1"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformT1))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceCustomIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceCustomIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceShaderBindingTableRecordOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceShaderBindingTableRecordOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureReference"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureReference))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureMatrixMotionInstanceNV._fields_ = [
    ("transformT0", VkTransformMatrixKHR),
    ("transformT1", VkTransformMatrixKHR),
    ("instanceCustomIndex", c_uint),
    ("mask", c_uint),
    ("instanceShaderBindingTableRecordOffset", c_uint),
    ("flags", c_uint),
    ("accelerationStructureReference", c_ulong)
    ]

class VkSRTDataNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sx"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sx))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("a"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.a))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("b"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.b))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pvx"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pvx))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sy"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sy))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("c"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.c))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pvy"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pvy))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sz"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sz))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pvz"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pvz))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("qx"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.qx))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("qy"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.qy))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("qz"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.qz))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("qw"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.qw))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tx"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tx))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ty"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ty))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("tz"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.tz))
            except: 
                pass
        self.JKEY = modval
VkSRTDataNV._fields_ = [
    ("sx", c_float),
    ("a", c_float),
    ("b", c_float),
    ("pvx", c_float),
    ("sy", c_float),
    ("c", c_float),
    ("pvy", c_float),
    ("sz", c_float),
    ("pvz", c_float),
    ("qx", c_float),
    ("qy", c_float),
    ("qz", c_float),
    ("qw", c_float),
    ("tx", c_float),
    ("ty", c_float),
    ("tz", c_float)
    ]

class VkAccelerationStructureSRTMotionInstanceNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("transformT0"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformT0))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformT1"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformT1))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceCustomIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceCustomIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mask))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instanceShaderBindingTableRecordOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instanceShaderBindingTableRecordOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureReference"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureReference))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureSRTMotionInstanceNV._fields_ = [
    ("transformT0", VkSRTDataNV),
    ("transformT1", VkSRTDataNV),
    ("instanceCustomIndex", c_uint),
    ("mask", c_uint),
    ("instanceShaderBindingTableRecordOffset", c_uint),
    ("flags", c_uint),
    ("accelerationStructureReference", c_ulong)
    ]

class VkAccelerationStructureMotionInstanceDataNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("staticInstance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.staticInstance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("matrixMotionInstance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.matrixMotionInstance))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srtMotionInstance"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srtMotionInstance))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureMotionInstanceDataNV._fields_ = [
    ("staticInstance", VkAccelerationStructureInstanceKHR),
    ("matrixMotionInstance", VkAccelerationStructureMatrixMotionInstanceNV),
    ("srtMotionInstance", VkAccelerationStructureSRTMotionInstanceNV)
    ]

class VkAccelerationStructureMotionInstanceNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("data"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.data))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureMotionInstanceNV._fields_ = [
    ("type", c_int),
    ("flags", c_uint),
    ("data", VkAccelerationStructureMotionInstanceDataNV)
    ]

class VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTracingMotionBlur"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTracingMotionBlur))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTracingMotionBlurPipelineTraceRaysIndirect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTracingMotionBlurPipelineTraceRaysIndirect))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRayTracingMotionBlurFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("rayTracingMotionBlur", c_uint),
    ("rayTracingMotionBlurPipelineTraceRaysIndirect", c_uint)
    ]

class VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ycbcr2plane444Formats"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ycbcr2plane444Formats))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("ycbcr2plane444Formats", c_uint)
    ]

class VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityMapDeferred"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityMapDeferred))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentDensityMap2FeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentDensityMapDeferred", c_uint)
    ]

class VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subsampledLoads"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subsampledLoads))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subsampledCoarseReconstructionEarlyAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subsampledCoarseReconstructionEarlyAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSubsampledArrayLayers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSubsampledArrayLayers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetSubsampledSamplers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetSubsampledSamplers))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentDensityMap2PropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("subsampledLoads", c_uint),
    ("subsampledCoarseReconstructionEarlyAccess", c_uint),
    ("maxSubsampledArrayLayers", c_uint),
    ("maxDescriptorSetSubsampledSamplers", c_uint)
    ]

class VkCopyCommandTransformInfoQCOM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transform"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transform))
            except: 
                pass
        self.JKEY = modval
VkCopyCommandTransformInfoQCOM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("transform", c_int)
    ]

class VkPhysicalDevice4444FormatsFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("formatA4R4G4B4"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.formatA4R4G4B4))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("formatA4B4G4R4"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.formatA4B4G4R4))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevice4444FormatsFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("formatA4R4G4B4", c_uint),
    ("formatA4B4G4R4", c_uint)
    ]

class VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationOrderColorAttachmentAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationOrderColorAttachmentAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationOrderDepthAttachmentAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationOrderDepthAttachmentAccess))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rasterizationOrderStencilAttachmentAccess"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rasterizationOrderStencilAttachmentAccess))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("rasterizationOrderColorAttachmentAccess", c_uint),
    ("rasterizationOrderDepthAttachmentAccess", c_uint),
    ("rasterizationOrderStencilAttachmentAccess", c_uint)
    ]

class VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("formatRgba10x6WithoutYCbCrSampler"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.formatRgba10x6WithoutYCbCrSampler))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("formatRgba10x6WithoutYCbCrSampler", c_uint)
    ]

class VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mutableDescriptorType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mutableDescriptorType))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("mutableDescriptorType", c_uint)
    ]

class VkMutableDescriptorTypeListVALVE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("descriptorTypeCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorTypeCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDescriptorTypes"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDescriptorTypes))
            except: 
                pass
        self.JKEY = modval
VkMutableDescriptorTypeListVALVE._fields_ = [
    ("descriptorTypeCount", c_uint),
    ("pDescriptorTypes", POINTER(c_int))
    ]

class VkMutableDescriptorTypeCreateInfoVALVE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mutableDescriptorTypeListCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mutableDescriptorTypeListCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pMutableDescriptorTypeLists"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pMutableDescriptorTypeLists))
            except: 
                pass
        self.JKEY = modval
VkMutableDescriptorTypeCreateInfoVALVE._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("mutableDescriptorTypeListCount", c_uint),
    ("pMutableDescriptorTypeLists", VkMutableDescriptorTypeListVALVE)
    ]

class VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexInputDynamicState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexInputDynamicState))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vertexInputDynamicState", c_uint)
    ]

class VkVertexInputBindingDescription2EXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("inputRate"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.inputRate))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("divisor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.divisor))
            except: 
                pass
        self.JKEY = modval
VkVertexInputBindingDescription2EXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("binding", c_uint),
    ("stride", c_uint),
    ("inputRate", c_int),
    ("divisor", c_uint)
    ]

class VkVertexInputAttributeDescription2EXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("location"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.location))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("format"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.format))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
VkVertexInputAttributeDescription2EXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("location", c_uint),
    ("binding", c_uint),
    ("format", c_int),
    ("offset", c_uint)
    ]

class VkPhysicalDeviceDrmPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("hasPrimary"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.hasPrimary))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("hasRender"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.hasRender))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primaryMajor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primaryMajor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primaryMinor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primaryMinor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderMajor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderMajor))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderMinor"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderMinor))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDrmPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("hasPrimary", c_uint),
    ("hasRender", c_uint),
    ("primaryMajor", c_long),
    ("primaryMinor", c_long),
    ("renderMajor", c_long),
    ("renderMinor", c_long)
    ]

class VkPhysicalDeviceDepthClipControlFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depthClipControl"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depthClipControl))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDepthClipControlFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("depthClipControl", c_uint)
    ]

class VkPipelineViewportDepthClipControlCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("negativeOneToOne"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.negativeOneToOne))
            except: 
                pass
        self.JKEY = modval
VkPipelineViewportDepthClipControlCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("negativeOneToOne", c_uint)
    ]

class VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveTopologyListRestart"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveTopologyListRestart))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveTopologyPatchListRestart"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveTopologyPatchListRestart))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("primitiveTopologyListRestart", c_uint),
    ("primitiveTopologyPatchListRestart", c_uint)
    ]

class VkSubpassShadingPipelineCreateInfoHUAWEI(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("renderPass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.renderPass))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpass"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpass))
            except: 
                pass
        self.JKEY = modval
VkSubpassShadingPipelineCreateInfoHUAWEI._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("renderPass", VkRenderPass_T),
    ("subpass", c_uint)
    ]

class VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("subpassShading"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.subpassShading))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSubpassShadingFeaturesHUAWEI._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("subpassShading", c_uint)
    ]

class VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxSubpassShadingWorkgroupSizeAspectRatio"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxSubpassShadingWorkgroupSizeAspectRatio))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceSubpassShadingPropertiesHUAWEI._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxSubpassShadingWorkgroupSizeAspectRatio", c_uint)
    ]

class VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("invocationMask"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.invocationMask))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceInvocationMaskFeaturesHUAWEI._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("invocationMask", c_uint)
    ]

class VkMemoryGetRemoteAddressInfoNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("memory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.memory))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("handleType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.handleType))
            except: 
                pass
        self.JKEY = modval
VkMemoryGetRemoteAddressInfoNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("memory", VkDeviceMemory_T),
    ("handleType", c_int)
    ]

class VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("externalMemoryRDMA"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.externalMemoryRDMA))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExternalMemoryRDMAFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("externalMemoryRDMA", c_uint)
    ]

class VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extendedDynamicState2"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extendedDynamicState2))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extendedDynamicState2LogicOp"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extendedDynamicState2LogicOp))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("extendedDynamicState2PatchControlPoints"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.extendedDynamicState2PatchControlPoints))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceExtendedDynamicState2FeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("extendedDynamicState2", c_uint),
    ("extendedDynamicState2LogicOp", c_uint),
    ("extendedDynamicState2PatchControlPoints", c_uint)
    ]

class VkPhysicalDeviceColorWriteEnableFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("colorWriteEnable"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.colorWriteEnable))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceColorWriteEnableFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("colorWriteEnable", c_uint)
    ]

class VkPipelineColorWriteCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("attachmentCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.attachmentCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pColorWriteEnables"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pColorWriteEnables))
            except: 
                pass
        self.JKEY = modval
VkPipelineColorWriteCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("attachmentCount", c_uint),
    ("pColorWriteEnables", POINTER(c_uint))
    ]

class VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitivesGeneratedQuery"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitivesGeneratedQuery))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitivesGeneratedQueryWithRasterizerDiscard"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitivesGeneratedQueryWithRasterizerDiscard))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitivesGeneratedQueryWithNonZeroStreams"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitivesGeneratedQueryWithNonZeroStreams))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("primitivesGeneratedQuery", c_uint),
    ("primitivesGeneratedQueryWithRasterizerDiscard", c_uint),
    ("primitivesGeneratedQueryWithNonZeroStreams", c_uint)
    ]

class VkPhysicalDeviceImageViewMinLodFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minLod))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImageViewMinLodFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minLod", c_uint)
    ]

class VkImageViewMinLodCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minLod"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minLod))
            except: 
                pass
        self.JKEY = modval
VkImageViewMinLodCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("minLod", c_float)
    ]

class VkPhysicalDeviceMultiDrawFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("multiDraw"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.multiDraw))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMultiDrawFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("multiDraw", c_uint)
    ]

class VkPhysicalDeviceMultiDrawPropertiesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxMultiDrawCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxMultiDrawCount))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceMultiDrawPropertiesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxMultiDrawCount", c_uint)
    ]

class VkMultiDrawInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("firstVertex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstVertex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexCount))
            except: 
                pass
        self.JKEY = modval
VkMultiDrawInfoEXT._fields_ = [
    ("firstVertex", c_uint),
    ("vertexCount", c_uint)
    ]

class VkMultiDrawIndexedInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("firstIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstIndex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexOffset))
            except: 
                pass
        self.JKEY = modval
VkMultiDrawIndexedInfoEXT._fields_ = [
    ("firstIndex", c_uint),
    ("indexCount", c_uint),
    ("vertexOffset", c_int)
    ]

class VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("image2DViewOf3D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.image2DViewOf3D))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("sampler2DViewOf3D"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sampler2DViewOf3D))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceImage2DViewOf3DFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("image2DViewOf3D", c_uint),
    ("sampler2DViewOf3D", c_uint)
    ]

class VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("borderColorSwizzle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.borderColorSwizzle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("borderColorSwizzleFromImage"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.borderColorSwizzleFromImage))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceBorderColorSwizzleFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("borderColorSwizzle", c_uint),
    ("borderColorSwizzleFromImage", c_uint)
    ]

class VkSamplerBorderColorComponentMappingCreateInfoEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("components"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.components))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srgb"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srgb))
            except: 
                pass
        self.JKEY = modval
VkSamplerBorderColorComponentMappingCreateInfoEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("components", VkComponentMapping),
    ("srgb", c_uint)
    ]

class VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pageableDeviceLocalMemory"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pageableDeviceLocalMemory))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pageableDeviceLocalMemory", c_uint)
    ]

class VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorSetHostMapping"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorSetHostMapping))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("descriptorSetHostMapping", c_uint)
    ]

class VkDescriptorSetBindingReferenceVALVE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorSetLayout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorSetLayout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("binding"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.binding))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetBindingReferenceVALVE._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("descriptorSetLayout", VkDescriptorSetLayout_T),
    ("binding", c_uint)
    ]

class VkDescriptorSetLayoutHostMappingInfoVALVE(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorSize))
            except: 
                pass
        self.JKEY = modval
VkDescriptorSetLayoutHostMappingInfoVALVE._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("descriptorOffset", c_ulong),
    ("descriptorSize", c_uint)
    ]

class VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityMapOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityMapOffset))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentDensityMapOffset", c_uint)
    ]

class VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityOffsetGranularity"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityOffsetGranularity))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentDensityOffsetGranularity", VkExtent2D)
    ]

class VkSubpassFragmentDensityMapOffsetEndInfoQCOM(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("fragmentDensityOffsetCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.fragmentDensityOffsetCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pFragmentDensityOffsets"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pFragmentDensityOffsets))
            except: 
                pass
        self.JKEY = modval
VkSubpassFragmentDensityMapOffsetEndInfoQCOM._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("fragmentDensityOffsetCount", c_uint),
    ("pFragmentDensityOffsets", VkOffset2D)
    ]

class VkPhysicalDeviceLinearColorAttachmentFeaturesNV(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("linearColorAttachment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.linearColorAttachment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceLinearColorAttachmentFeaturesNV._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("linearColorAttachment", c_uint)
    ]

class VkDeviceOrHostAddressKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("deviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("hostAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.hostAddress))
            except: 
                pass
        self.JKEY = modval
VkDeviceOrHostAddressKHR._fields_ = [
    ("deviceAddress", c_ulong),
    ("hostAddress", c_void_p)
    ]

class VkAccelerationStructureBuildRangeInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("primitiveCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("primitiveOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.primitiveOffset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("firstVertex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.firstVertex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformOffset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformOffset))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureBuildRangeInfoKHR._fields_ = [
    ("primitiveCount", c_uint),
    ("primitiveOffset", c_uint),
    ("firstVertex", c_uint),
    ("transformOffset", c_uint)
    ]

class VkAccelerationStructureGeometryTrianglesDataKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexFormat"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexFormat))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("vertexStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.vertexStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxVertex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxVertex))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("indexData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.indexData))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("transformData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.transformData))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureGeometryTrianglesDataKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("vertexFormat", c_int),
    ("vertexData", VkDeviceOrHostAddressConstKHR),
    ("vertexStride", c_ulong),
    ("maxVertex", c_uint),
    ("indexType", c_int),
    ("indexData", VkDeviceOrHostAddressConstKHR),
    ("transformData", VkDeviceOrHostAddressConstKHR)
    ]

class VkAccelerationStructureGeometryAabbsDataKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("data"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.data))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureGeometryAabbsDataKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("data", VkDeviceOrHostAddressConstKHR),
    ("stride", c_ulong)
    ]

class VkAccelerationStructureGeometryInstancesDataKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("arrayOfPointers"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.arrayOfPointers))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("data"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.data))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureGeometryInstancesDataKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("arrayOfPointers", c_uint),
    ("data", VkDeviceOrHostAddressConstKHR)
    ]

class VkAccelerationStructureGeometryDataKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("triangles"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.triangles))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("aabbs"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.aabbs))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("instances"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.instances))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureGeometryDataKHR._fields_ = [
    ("triangles", VkAccelerationStructureGeometryTrianglesDataKHR),
    ("aabbs", VkAccelerationStructureGeometryAabbsDataKHR),
    ("instances", VkAccelerationStructureGeometryInstancesDataKHR)
    ]

class VkAccelerationStructureGeometryKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometryType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometryType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometry"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometry))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureGeometryKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("geometryType", c_int),
    ("geometry", VkAccelerationStructureGeometryDataKHR),
    ("flags", c_uint)
    ]

class VkAccelerationStructureBuildGeometryInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mode))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("srcAccelerationStructure"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.srcAccelerationStructure))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dstAccelerationStructure"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dstAccelerationStructure))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("geometryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.geometryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pGeometries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pGeometries))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("ppGeometries"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.ppGeometries))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("scratchData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.scratchData))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureBuildGeometryInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int),
    ("flags", c_uint),
    ("mode", c_int),
    ("srcAccelerationStructure", VkAccelerationStructureKHR_T),
    ("dstAccelerationStructure", VkAccelerationStructureKHR_T),
    ("geometryCount", c_uint),
    ("pGeometries", VkAccelerationStructureGeometryKHR),
    ("ppGeometries", VkAccelerationStructureGeometryKHR),
    ("scratchData", VkDeviceOrHostAddressKHR)
    ]

class VkAccelerationStructureCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("createFlags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.createFlags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buffer"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buffer))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("offset"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.offset))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("deviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceAddress))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("createFlags", c_uint),
    ("buffer", VkBuffer_T),
    ("offset", c_ulong),
    ("size", c_ulong),
    ("type", c_int),
    ("deviceAddress", c_ulong)
    ]

class VkWriteDescriptorSetAccelerationStructureKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
VkWriteDescriptorSetAccelerationStructureKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("accelerationStructureCount", c_uint),
    ("pAccelerationStructures", POINTER(VkAccelerationStructureKHR_T))
    ]

class VkPhysicalDeviceAccelerationStructureFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructure"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructure))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureCaptureReplay"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureCaptureReplay))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureIndirectBuild"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureIndirectBuild))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureHostCommands"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureHostCommands))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("descriptorBindingAccelerationStructureUpdateAfterBind"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.descriptorBindingAccelerationStructureUpdateAfterBind))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceAccelerationStructureFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("accelerationStructure", c_uint),
    ("accelerationStructureCaptureReplay", c_uint),
    ("accelerationStructureIndirectBuild", c_uint),
    ("accelerationStructureHostCommands", c_uint),
    ("descriptorBindingAccelerationStructureUpdateAfterBind", c_uint)
    ]

class VkPhysicalDeviceAccelerationStructurePropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxGeometryCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxGeometryCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxInstanceCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxInstanceCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPrimitiveCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPrimitiveCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPerStageDescriptorUpdateAfterBindAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPerStageDescriptorUpdateAfterBindAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxDescriptorSetUpdateAfterBindAccelerationStructures"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxDescriptorSetUpdateAfterBindAccelerationStructures))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("minAccelerationStructureScratchOffsetAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.minAccelerationStructureScratchOffsetAlignment))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceAccelerationStructurePropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxGeometryCount", c_ulong),
    ("maxInstanceCount", c_ulong),
    ("maxPrimitiveCount", c_ulong),
    ("maxPerStageDescriptorAccelerationStructures", c_uint),
    ("maxPerStageDescriptorUpdateAfterBindAccelerationStructures", c_uint),
    ("maxDescriptorSetAccelerationStructures", c_uint),
    ("maxDescriptorSetUpdateAfterBindAccelerationStructures", c_uint),
    ("minAccelerationStructureScratchOffsetAlignment", c_uint)
    ]

class VkAccelerationStructureDeviceAddressInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructure"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructure))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureDeviceAddressInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("accelerationStructure", VkAccelerationStructureKHR_T)
    ]

class VkAccelerationStructureVersionInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pVersionData"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pVersionData))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureVersionInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("pVersionData", POINTER(c_ubyte))
    ]

class VkCopyAccelerationStructureToMemoryInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("src"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.src))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dst"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dst))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mode))
            except: 
                pass
        self.JKEY = modval
VkCopyAccelerationStructureToMemoryInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("src", VkAccelerationStructureKHR_T),
    ("dst", VkDeviceOrHostAddressKHR),
    ("mode", c_int)
    ]

class VkCopyMemoryToAccelerationStructureInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("src"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.src))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dst"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dst))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mode))
            except: 
                pass
        self.JKEY = modval
VkCopyMemoryToAccelerationStructureInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("src", VkDeviceOrHostAddressConstKHR),
    ("dst", VkAccelerationStructureKHR_T),
    ("mode", c_int)
    ]

class VkCopyAccelerationStructureInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("src"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.src))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("dst"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.dst))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("mode"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.mode))
            except: 
                pass
        self.JKEY = modval
VkCopyAccelerationStructureInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("src", VkAccelerationStructureKHR_T),
    ("dst", VkAccelerationStructureKHR_T),
    ("mode", c_int)
    ]

class VkAccelerationStructureBuildSizesInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("accelerationStructureSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.accelerationStructureSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("updateScratchSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.updateScratchSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("buildScratchSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.buildScratchSize))
            except: 
                pass
        self.JKEY = modval
VkAccelerationStructureBuildSizesInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("accelerationStructureSize", c_ulong),
    ("updateScratchSize", c_ulong),
    ("buildScratchSize", c_ulong)
    ]

class VkRayTracingShaderGroupCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("type"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.type))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("generalShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.generalShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("closestHitShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.closestHitShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("anyHitShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.anyHitShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("intersectionShader"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.intersectionShader))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pShaderGroupCaptureReplayHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pShaderGroupCaptureReplayHandle))
            except: 
                pass
        self.JKEY = modval
VkRayTracingShaderGroupCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("type", c_int),
    ("generalShader", c_uint),
    ("closestHitShader", c_uint),
    ("anyHitShader", c_uint),
    ("intersectionShader", c_uint),
    ("pShaderGroupCaptureReplayHandle", c_void_p)
    ]

class VkRayTracingPipelineInterfaceCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPipelineRayPayloadSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPipelineRayPayloadSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPipelineRayHitAttributeSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPipelineRayHitAttributeSize))
            except: 
                pass
        self.JKEY = modval
VkRayTracingPipelineInterfaceCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("maxPipelineRayPayloadSize", c_uint),
    ("maxPipelineRayHitAttributeSize", c_uint)
    ]

class VkRayTracingPipelineCreateInfoKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("flags"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.flags))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stageCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stageCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pStages"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pStages))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("groupCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.groupCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pGroups"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pGroups))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxPipelineRayRecursionDepth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxPipelineRayRecursionDepth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pLibraryInfo"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pLibraryInfo))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pLibraryInterface"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pLibraryInterface))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pDynamicState"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pDynamicState))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("layout"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.layout))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineHandle"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineHandle))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("basePipelineIndex"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.basePipelineIndex))
            except: 
                pass
        self.JKEY = modval
VkRayTracingPipelineCreateInfoKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("flags", c_uint),
    ("stageCount", c_uint),
    ("pStages", VkPipelineShaderStageCreateInfo),
    ("groupCount", c_uint),
    ("pGroups", VkRayTracingShaderGroupCreateInfoKHR),
    ("maxPipelineRayRecursionDepth", c_uint),
    ("pLibraryInfo", VkPipelineLibraryCreateInfoKHR),
    ("pLibraryInterface", VkRayTracingPipelineInterfaceCreateInfoKHR),
    ("pDynamicState", VkPipelineDynamicStateCreateInfo),
    ("layout", VkPipelineLayout_T),
    ("basePipelineHandle", VkPipeline_T),
    ("basePipelineIndex", c_int)
    ]

class VkPhysicalDeviceRayTracingPipelineFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTracingPipeline"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTracingPipeline))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTracingPipelineShaderGroupHandleCaptureReplay"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTracingPipelineShaderGroupHandleCaptureReplay))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTracingPipelineShaderGroupHandleCaptureReplayMixed"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTracingPipelineShaderGroupHandleCaptureReplayMixed))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTracingPipelineTraceRaysIndirect"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTracingPipelineTraceRaysIndirect))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayTraversalPrimitiveCulling"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayTraversalPrimitiveCulling))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRayTracingPipelineFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("rayTracingPipeline", c_uint),
    ("rayTracingPipelineShaderGroupHandleCaptureReplay", c_uint),
    ("rayTracingPipelineShaderGroupHandleCaptureReplayMixed", c_uint),
    ("rayTracingPipelineTraceRaysIndirect", c_uint),
    ("rayTraversalPrimitiveCulling", c_uint)
    ]

class VkPhysicalDeviceRayTracingPipelinePropertiesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderGroupHandleSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderGroupHandleSize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxRayRecursionDepth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxRayRecursionDepth))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxShaderGroupStride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxShaderGroupStride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderGroupBaseAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderGroupBaseAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderGroupHandleCaptureReplaySize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderGroupHandleCaptureReplaySize))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxRayDispatchInvocationCount"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxRayDispatchInvocationCount))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("shaderGroupHandleAlignment"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.shaderGroupHandleAlignment))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("maxRayHitAttributeSize"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.maxRayHitAttributeSize))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRayTracingPipelinePropertiesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("shaderGroupHandleSize", c_uint),
    ("maxRayRecursionDepth", c_uint),
    ("maxShaderGroupStride", c_uint),
    ("shaderGroupBaseAlignment", c_uint),
    ("shaderGroupHandleCaptureReplaySize", c_uint),
    ("maxRayDispatchInvocationCount", c_uint),
    ("shaderGroupHandleAlignment", c_uint),
    ("maxRayHitAttributeSize", c_uint)
    ]

class VkStridedDeviceAddressRegionKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("deviceAddress"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.deviceAddress))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("stride"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.stride))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("size"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.size))
            except: 
                pass
        self.JKEY = modval
VkStridedDeviceAddressRegionKHR._fields_ = [
    ("deviceAddress", c_ulong),
    ("stride", c_ulong),
    ("size", c_ulong)
    ]

class VkTraceRaysIndirectCommandKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("width"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.width))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("height"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.height))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("depth"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.depth))
            except: 
                pass
        self.JKEY = modval
VkTraceRaysIndirectCommandKHR._fields_ = [
    ("width", c_uint),
    ("height", c_uint),
    ("depth", c_uint)
    ]

class VkPhysicalDeviceRayQueryFeaturesKHR(Structure):
    def __init__(self, indict):
        modval = preprocess(indict.get("sType"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.sType))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("pNext"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.pNext))
            except: 
                pass
        self.JKEY = modval
        modval = preprocess(indict.get("rayQuery"))
        if "cast" in indict.keys(): 
            try: 
                modval = cast(modval, type(self.rayQuery))
            except: 
                pass
        self.JKEY = modval
VkPhysicalDeviceRayQueryFeaturesKHR._fields_ = [
    ("sType", c_int),
    ("pNext", c_void_p),
    ("rayQuery", c_uint)
    ]

def vkCreateInstance(indict):
    indict = preprocess(indict)
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkInstanceCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pInstance" in indict.keys():
         pInstance = indict["pInstance"]
    else: 
         pInstance = pointer(VkInstance_T())
    print(jvulkanLib.vkCreateInstance)
    retval = jvulkanLib.vkCreateInstance(pCreateInfo, pAllocator, pInstance)
    if retval:
       raise(BaseException(str(retval)))
    return {"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pInstance" : pInstance,"retval" : retval}
def vkDestroyInstance(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyInstance)
    retval = jvulkanLib.vkDestroyInstance(instance, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pAllocator" : pAllocator,"retval" : retval}
def vkEnumeratePhysicalDevices(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pPhysicalDeviceCount" in indict.keys():
         pPhysicalDeviceCount = indict["pPhysicalDeviceCount"]
    else: 
         pPhysicalDeviceCount = pointer(c_uint())
    if "pPhysicalDevices" in indict.keys():
         pPhysicalDevices = indict["pPhysicalDevices"]
    else: 
         pPhysicalDevices = pointer(VkPhysicalDevice_T())
    print(jvulkanLib.vkEnumeratePhysicalDevices)
    retval = jvulkanLib.vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pPhysicalDeviceCount" : pPhysicalDeviceCount,"pPhysicalDevices" : pPhysicalDevices,"retval" : retval}
def vkGetPhysicalDeviceFeatures(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pFeatures" in indict.keys():
         pFeatures = indict["pFeatures"]
    else: 
         pFeatures = VkPhysicalDeviceFeatures()
    print(jvulkanLib.vkGetPhysicalDeviceFeatures)
    retval = jvulkanLib.vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pFeatures" : pFeatures,"retval" : retval}
def vkGetPhysicalDeviceFormatProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "format" in indict.keys():
         format = indict["format"]
    else: 
         format = c_int()
    if "pFormatProperties" in indict.keys():
         pFormatProperties = indict["pFormatProperties"]
    else: 
         pFormatProperties = VkFormatProperties()
    print(jvulkanLib.vkGetPhysicalDeviceFormatProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"format" : format,"pFormatProperties" : pFormatProperties,"retval" : retval}
def vkGetPhysicalDeviceImageFormatProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "format" in indict.keys():
         format = indict["format"]
    else: 
         format = c_int()
    if "type" in indict.keys():
         type = indict["type"]
    else: 
         type = c_int()
    if "tiling" in indict.keys():
         tiling = indict["tiling"]
    else: 
         tiling = c_int()
    if "usage" in indict.keys():
         usage = indict["usage"]
    else: 
         usage = c_uint()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    if "pImageFormatProperties" in indict.keys():
         pImageFormatProperties = indict["pImageFormatProperties"]
    else: 
         pImageFormatProperties = VkImageFormatProperties()
    print(jvulkanLib.vkGetPhysicalDeviceImageFormatProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"format" : format,"type" : type,"tiling" : tiling,"usage" : usage,"flags" : flags,"pImageFormatProperties" : pImageFormatProperties,"retval" : retval}
def vkGetPhysicalDeviceProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkPhysicalDeviceProperties()
    print(jvulkanLib.vkGetPhysicalDeviceProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceProperties(physicalDevice, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pProperties" : pProperties,"retval" : retval}
def vkGetPhysicalDeviceQueueFamilyProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pQueueFamilyPropertyCount" in indict.keys():
         pQueueFamilyPropertyCount = indict["pQueueFamilyPropertyCount"]
    else: 
         pQueueFamilyPropertyCount = pointer(c_uint())
    if "pQueueFamilyProperties" in indict.keys():
         pQueueFamilyProperties = indict["pQueueFamilyProperties"]
    else: 
         pQueueFamilyProperties = VkQueueFamilyProperties()
    print(jvulkanLib.vkGetPhysicalDeviceQueueFamilyProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pQueueFamilyPropertyCount" : pQueueFamilyPropertyCount,"pQueueFamilyProperties" : pQueueFamilyProperties,"retval" : retval}
def vkGetPhysicalDeviceMemoryProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pMemoryProperties" in indict.keys():
         pMemoryProperties = indict["pMemoryProperties"]
    else: 
         pMemoryProperties = VkPhysicalDeviceMemoryProperties()
    print(jvulkanLib.vkGetPhysicalDeviceMemoryProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pMemoryProperties" : pMemoryProperties,"retval" : retval}
def vkGetInstanceProcAddr(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pName" in indict.keys():
         pName = indict["pName"]
    else: 
         pName = c_char_p()
    print(jvulkanLib.vkGetInstanceProcAddr)
    retval = jvulkanLib.vkGetInstanceProcAddr(instance, pName)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pName" : pName,"retval" : retval}
def vkGetDeviceProcAddr(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pName" in indict.keys():
         pName = indict["pName"]
    else: 
         pName = c_char_p()
    print(jvulkanLib.vkGetDeviceProcAddr)
    retval = jvulkanLib.vkGetDeviceProcAddr(device, pName)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pName" : pName,"retval" : retval}
def vkCreateDevice(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDeviceCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pDevice" in indict.keys():
         pDevice = indict["pDevice"]
    else: 
         pDevice = pointer(VkDevice_T())
    print(jvulkanLib.vkCreateDevice)
    retval = jvulkanLib.vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pDevice" : pDevice,"retval" : retval}
def vkDestroyDevice(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDevice)
    retval = jvulkanLib.vkDestroyDevice(device, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAllocator" : pAllocator,"retval" : retval}
def vkEnumerateInstanceExtensionProperties(indict):
    indict = preprocess(indict)
    if "pLayerName" in indict.keys():
         pLayerName = indict["pLayerName"]
    else: 
         pLayerName = c_char_p()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkExtensionProperties()
    print(jvulkanLib.vkEnumerateInstanceExtensionProperties)
    retval = jvulkanLib.vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"pLayerName" : pLayerName,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkEnumerateDeviceExtensionProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pLayerName" in indict.keys():
         pLayerName = indict["pLayerName"]
    else: 
         pLayerName = c_char_p()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkExtensionProperties()
    print(jvulkanLib.vkEnumerateDeviceExtensionProperties)
    retval = jvulkanLib.vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pLayerName" : pLayerName,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkEnumerateInstanceLayerProperties(indict):
    indict = preprocess(indict)
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkLayerProperties()
    print(jvulkanLib.vkEnumerateInstanceLayerProperties)
    retval = jvulkanLib.vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkEnumerateDeviceLayerProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkLayerProperties()
    print(jvulkanLib.vkEnumerateDeviceLayerProperties)
    retval = jvulkanLib.vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetDeviceQueue(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "queueFamilyIndex" in indict.keys():
         queueFamilyIndex = indict["queueFamilyIndex"]
    else: 
         queueFamilyIndex = c_uint()
    if "queueIndex" in indict.keys():
         queueIndex = indict["queueIndex"]
    else: 
         queueIndex = c_uint()
    if "pQueue" in indict.keys():
         pQueue = indict["pQueue"]
    else: 
         pQueue = pointer(VkQueue_T())
    print(jvulkanLib.vkGetDeviceQueue)
    retval = jvulkanLib.vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"queueFamilyIndex" : queueFamilyIndex,"queueIndex" : queueIndex,"pQueue" : pQueue,"retval" : retval}
def vkQueueSubmit(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "submitCount" in indict.keys():
         submitCount = indict["submitCount"]
    else: 
         submitCount = c_uint()
    if "pSubmits" in indict.keys():
         pSubmits = indict["pSubmits"]
    else: 
         pSubmits = VkSubmitInfo()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    print(jvulkanLib.vkQueueSubmit)
    retval = jvulkanLib.vkQueueSubmit(queue, submitCount, pSubmits, fence)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"submitCount" : submitCount,"pSubmits" : pSubmits,"fence" : fence,"retval" : retval}
def vkQueueWaitIdle(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    print(jvulkanLib.vkQueueWaitIdle)
    retval = jvulkanLib.vkQueueWaitIdle(queue)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"retval" : retval}
def vkDeviceWaitIdle(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    print(jvulkanLib.vkDeviceWaitIdle)
    retval = jvulkanLib.vkDeviceWaitIdle(device)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"retval" : retval}
def vkAllocateMemory(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAllocateInfo" in indict.keys():
         pAllocateInfo = indict["pAllocateInfo"]
    else: 
         pAllocateInfo = VkMemoryAllocateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pMemory" in indict.keys():
         pMemory = indict["pMemory"]
    else: 
         pMemory = pointer(VkDeviceMemory_T())
    print(jvulkanLib.vkAllocateMemory)
    retval = jvulkanLib.vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAllocateInfo" : pAllocateInfo,"pAllocator" : pAllocator,"pMemory" : pMemory,"retval" : retval}
def vkFreeMemory(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkFreeMemory)
    retval = jvulkanLib.vkFreeMemory(device, memory, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memory" : memory,"pAllocator" : pAllocator,"retval" : retval}
def vkMapMemory(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "size" in indict.keys():
         size = indict["size"]
    else: 
         size = c_ulong()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    if "ppData" in indict.keys():
         ppData = indict["ppData"]
    else: 
         ppData = POINTER(c_void_p)()
    print(jvulkanLib.vkMapMemory)
    retval = jvulkanLib.vkMapMemory(device, memory, offset, size, flags, ppData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memory" : memory,"offset" : offset,"size" : size,"flags" : flags,"ppData" : ppData,"retval" : retval}
def vkUnmapMemory(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    print(jvulkanLib.vkUnmapMemory)
    retval = jvulkanLib.vkUnmapMemory(device, memory)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memory" : memory,"retval" : retval}
def vkFlushMappedMemoryRanges(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memoryRangeCount" in indict.keys():
         memoryRangeCount = indict["memoryRangeCount"]
    else: 
         memoryRangeCount = c_uint()
    if "pMemoryRanges" in indict.keys():
         pMemoryRanges = indict["pMemoryRanges"]
    else: 
         pMemoryRanges = VkMappedMemoryRange()
    print(jvulkanLib.vkFlushMappedMemoryRanges)
    retval = jvulkanLib.vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memoryRangeCount" : memoryRangeCount,"pMemoryRanges" : pMemoryRanges,"retval" : retval}
def vkInvalidateMappedMemoryRanges(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memoryRangeCount" in indict.keys():
         memoryRangeCount = indict["memoryRangeCount"]
    else: 
         memoryRangeCount = c_uint()
    if "pMemoryRanges" in indict.keys():
         pMemoryRanges = indict["pMemoryRanges"]
    else: 
         pMemoryRanges = VkMappedMemoryRange()
    print(jvulkanLib.vkInvalidateMappedMemoryRanges)
    retval = jvulkanLib.vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memoryRangeCount" : memoryRangeCount,"pMemoryRanges" : pMemoryRanges,"retval" : retval}
def vkGetDeviceMemoryCommitment(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    if "pCommittedMemoryInBytes" in indict.keys():
         pCommittedMemoryInBytes = indict["pCommittedMemoryInBytes"]
    else: 
         pCommittedMemoryInBytes = pointer(c_ulong())
    print(jvulkanLib.vkGetDeviceMemoryCommitment)
    retval = jvulkanLib.vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memory" : memory,"pCommittedMemoryInBytes" : pCommittedMemoryInBytes,"retval" : retval}
def vkBindBufferMemory(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    if "memoryOffset" in indict.keys():
         memoryOffset = indict["memoryOffset"]
    else: 
         memoryOffset = c_ulong()
    print(jvulkanLib.vkBindBufferMemory)
    retval = jvulkanLib.vkBindBufferMemory(device, buffer, memory, memoryOffset)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"buffer" : buffer,"memory" : memory,"memoryOffset" : memoryOffset,"retval" : retval}
def vkBindImageMemory(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    if "memoryOffset" in indict.keys():
         memoryOffset = indict["memoryOffset"]
    else: 
         memoryOffset = c_ulong()
    print(jvulkanLib.vkBindImageMemory)
    retval = jvulkanLib.vkBindImageMemory(device, image, memory, memoryOffset)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"image" : image,"memory" : memory,"memoryOffset" : memoryOffset,"retval" : retval}
def vkGetBufferMemoryRequirements(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements()
    print(jvulkanLib.vkGetBufferMemoryRequirements)
    retval = jvulkanLib.vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"buffer" : buffer,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetImageMemoryRequirements(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements()
    print(jvulkanLib.vkGetImageMemoryRequirements)
    retval = jvulkanLib.vkGetImageMemoryRequirements(device, image, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"image" : image,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetImageSparseMemoryRequirements(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "pSparseMemoryRequirementCount" in indict.keys():
         pSparseMemoryRequirementCount = indict["pSparseMemoryRequirementCount"]
    else: 
         pSparseMemoryRequirementCount = pointer(c_uint())
    if "pSparseMemoryRequirements" in indict.keys():
         pSparseMemoryRequirements = indict["pSparseMemoryRequirements"]
    else: 
         pSparseMemoryRequirements = VkSparseImageMemoryRequirements()
    print(jvulkanLib.vkGetImageSparseMemoryRequirements)
    retval = jvulkanLib.vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"image" : image,"pSparseMemoryRequirementCount" : pSparseMemoryRequirementCount,"pSparseMemoryRequirements" : pSparseMemoryRequirements,"retval" : retval}
def vkGetPhysicalDeviceSparseImageFormatProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "format" in indict.keys():
         format = indict["format"]
    else: 
         format = c_int()
    if "type" in indict.keys():
         type = indict["type"]
    else: 
         type = c_int()
    if "samples" in indict.keys():
         samples = indict["samples"]
    else: 
         samples = c_int()
    if "usage" in indict.keys():
         usage = indict["usage"]
    else: 
         usage = c_uint()
    if "tiling" in indict.keys():
         tiling = indict["tiling"]
    else: 
         tiling = c_int()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkSparseImageFormatProperties()
    print(jvulkanLib.vkGetPhysicalDeviceSparseImageFormatProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"format" : format,"type" : type,"samples" : samples,"usage" : usage,"tiling" : tiling,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkQueueBindSparse(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "bindInfoCount" in indict.keys():
         bindInfoCount = indict["bindInfoCount"]
    else: 
         bindInfoCount = c_uint()
    if "pBindInfo" in indict.keys():
         pBindInfo = indict["pBindInfo"]
    else: 
         pBindInfo = VkBindSparseInfo()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    print(jvulkanLib.vkQueueBindSparse)
    retval = jvulkanLib.vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"bindInfoCount" : bindInfoCount,"pBindInfo" : pBindInfo,"fence" : fence,"retval" : retval}
def vkCreateFence(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkFenceCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pFence" in indict.keys():
         pFence = indict["pFence"]
    else: 
         pFence = pointer(VkFence_T())
    print(jvulkanLib.vkCreateFence)
    retval = jvulkanLib.vkCreateFence(device, pCreateInfo, pAllocator, pFence)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pFence" : pFence,"retval" : retval}
def vkDestroyFence(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyFence)
    retval = jvulkanLib.vkDestroyFence(device, fence, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"fence" : fence,"pAllocator" : pAllocator,"retval" : retval}
def vkResetFences(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "fenceCount" in indict.keys():
         fenceCount = indict["fenceCount"]
    else: 
         fenceCount = c_uint()
    if "pFences" in indict.keys():
         pFences = indict["pFences"]
    else: 
         pFences = pointer(VkFence_T())
    print(jvulkanLib.vkResetFences)
    retval = jvulkanLib.vkResetFences(device, fenceCount, pFences)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"fenceCount" : fenceCount,"pFences" : pFences,"retval" : retval}
def vkGetFenceStatus(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    print(jvulkanLib.vkGetFenceStatus)
    retval = jvulkanLib.vkGetFenceStatus(device, fence)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"fence" : fence,"retval" : retval}
def vkWaitForFences(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "fenceCount" in indict.keys():
         fenceCount = indict["fenceCount"]
    else: 
         fenceCount = c_uint()
    if "pFences" in indict.keys():
         pFences = indict["pFences"]
    else: 
         pFences = pointer(VkFence_T())
    if "waitAll" in indict.keys():
         waitAll = indict["waitAll"]
    else: 
         waitAll = c_uint()
    if "timeout" in indict.keys():
         timeout = indict["timeout"]
    else: 
         timeout = c_ulong()
    print(jvulkanLib.vkWaitForFences)
    retval = jvulkanLib.vkWaitForFences(device, fenceCount, pFences, waitAll, timeout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"fenceCount" : fenceCount,"pFences" : pFences,"waitAll" : waitAll,"timeout" : timeout,"retval" : retval}
def vkCreateSemaphore(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkSemaphoreCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSemaphore" in indict.keys():
         pSemaphore = indict["pSemaphore"]
    else: 
         pSemaphore = pointer(VkSemaphore_T())
    print(jvulkanLib.vkCreateSemaphore)
    retval = jvulkanLib.vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pSemaphore" : pSemaphore,"retval" : retval}
def vkDestroySemaphore(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "semaphore" in indict.keys():
         semaphore = indict["semaphore"]
    else: 
         semaphore = VkSemaphore_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroySemaphore)
    retval = jvulkanLib.vkDestroySemaphore(device, semaphore, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"semaphore" : semaphore,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateEvent(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkEventCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pEvent" in indict.keys():
         pEvent = indict["pEvent"]
    else: 
         pEvent = pointer(VkEvent_T())
    print(jvulkanLib.vkCreateEvent)
    retval = jvulkanLib.vkCreateEvent(device, pCreateInfo, pAllocator, pEvent)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pEvent" : pEvent,"retval" : retval}
def vkDestroyEvent(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyEvent)
    retval = jvulkanLib.vkDestroyEvent(device, event, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"event" : event,"pAllocator" : pAllocator,"retval" : retval}
def vkGetEventStatus(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    print(jvulkanLib.vkGetEventStatus)
    retval = jvulkanLib.vkGetEventStatus(device, event)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"event" : event,"retval" : retval}
def vkSetEvent(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    print(jvulkanLib.vkSetEvent)
    retval = jvulkanLib.vkSetEvent(device, event)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"event" : event,"retval" : retval}
def vkResetEvent(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    print(jvulkanLib.vkResetEvent)
    retval = jvulkanLib.vkResetEvent(device, event)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"event" : event,"retval" : retval}
def vkCreateQueryPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkQueryPoolCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pQueryPool" in indict.keys():
         pQueryPool = indict["pQueryPool"]
    else: 
         pQueryPool = pointer(VkQueryPool_T())
    print(jvulkanLib.vkCreateQueryPool)
    retval = jvulkanLib.vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pQueryPool" : pQueryPool,"retval" : retval}
def vkDestroyQueryPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyQueryPool)
    retval = jvulkanLib.vkDestroyQueryPool(device, queryPool, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"queryPool" : queryPool,"pAllocator" : pAllocator,"retval" : retval}
def vkGetQueryPoolResults(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    if "queryCount" in indict.keys():
         queryCount = indict["queryCount"]
    else: 
         queryCount = c_uint()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_ulong()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkGetQueryPoolResults)
    retval = jvulkanLib.vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"queryPool" : queryPool,"firstQuery" : firstQuery,"queryCount" : queryCount,"dataSize" : dataSize,"pData" : pData,"stride" : stride,"flags" : flags,"retval" : retval}
def vkCreateBuffer(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkBufferCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pBuffer" in indict.keys():
         pBuffer = indict["pBuffer"]
    else: 
         pBuffer = pointer(VkBuffer_T())
    print(jvulkanLib.vkCreateBuffer)
    retval = jvulkanLib.vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pBuffer" : pBuffer,"retval" : retval}
def vkDestroyBuffer(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyBuffer)
    retval = jvulkanLib.vkDestroyBuffer(device, buffer, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"buffer" : buffer,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateBufferView(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkBufferViewCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pView" in indict.keys():
         pView = indict["pView"]
    else: 
         pView = pointer(VkBufferView_T())
    print(jvulkanLib.vkCreateBufferView)
    retval = jvulkanLib.vkCreateBufferView(device, pCreateInfo, pAllocator, pView)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pView" : pView,"retval" : retval}
def vkDestroyBufferView(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "bufferView" in indict.keys():
         bufferView = indict["bufferView"]
    else: 
         bufferView = VkBufferView_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyBufferView)
    retval = jvulkanLib.vkDestroyBufferView(device, bufferView, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"bufferView" : bufferView,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateImage(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkImageCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pImage" in indict.keys():
         pImage = indict["pImage"]
    else: 
         pImage = pointer(VkImage_T())
    print(jvulkanLib.vkCreateImage)
    retval = jvulkanLib.vkCreateImage(device, pCreateInfo, pAllocator, pImage)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pImage" : pImage,"retval" : retval}
def vkDestroyImage(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyImage)
    retval = jvulkanLib.vkDestroyImage(device, image, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"image" : image,"pAllocator" : pAllocator,"retval" : retval}
def vkGetImageSubresourceLayout(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "pSubresource" in indict.keys():
         pSubresource = indict["pSubresource"]
    else: 
         pSubresource = VkImageSubresource()
    if "pLayout" in indict.keys():
         pLayout = indict["pLayout"]
    else: 
         pLayout = VkSubresourceLayout()
    print(jvulkanLib.vkGetImageSubresourceLayout)
    retval = jvulkanLib.vkGetImageSubresourceLayout(device, image, pSubresource, pLayout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"image" : image,"pSubresource" : pSubresource,"pLayout" : pLayout,"retval" : retval}
def vkCreateImageView(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkImageViewCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pView" in indict.keys():
         pView = indict["pView"]
    else: 
         pView = pointer(VkImageView_T())
    print(jvulkanLib.vkCreateImageView)
    retval = jvulkanLib.vkCreateImageView(device, pCreateInfo, pAllocator, pView)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pView" : pView,"retval" : retval}
def vkDestroyImageView(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "imageView" in indict.keys():
         imageView = indict["imageView"]
    else: 
         imageView = VkImageView_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyImageView)
    retval = jvulkanLib.vkDestroyImageView(device, imageView, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"imageView" : imageView,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateShaderModule(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkShaderModuleCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pShaderModule" in indict.keys():
         pShaderModule = indict["pShaderModule"]
    else: 
         pShaderModule = pointer(VkShaderModule_T())
    print(jvulkanLib.vkCreateShaderModule)
    retval = jvulkanLib.vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pShaderModule" : pShaderModule,"retval" : retval}
def vkDestroyShaderModule(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "shaderModule" in indict.keys():
         shaderModule = indict["shaderModule"]
    else: 
         shaderModule = VkShaderModule_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyShaderModule)
    retval = jvulkanLib.vkDestroyShaderModule(device, shaderModule, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"shaderModule" : shaderModule,"pAllocator" : pAllocator,"retval" : retval}
def vkCreatePipelineCache(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkPipelineCacheCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPipelineCache" in indict.keys():
         pPipelineCache = indict["pPipelineCache"]
    else: 
         pPipelineCache = pointer(VkPipelineCache_T())
    print(jvulkanLib.vkCreatePipelineCache)
    retval = jvulkanLib.vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pPipelineCache" : pPipelineCache,"retval" : retval}
def vkDestroyPipelineCache(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipelineCache" in indict.keys():
         pipelineCache = indict["pipelineCache"]
    else: 
         pipelineCache = VkPipelineCache_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyPipelineCache)
    retval = jvulkanLib.vkDestroyPipelineCache(device, pipelineCache, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipelineCache" : pipelineCache,"pAllocator" : pAllocator,"retval" : retval}
def vkGetPipelineCacheData(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipelineCache" in indict.keys():
         pipelineCache = indict["pipelineCache"]
    else: 
         pipelineCache = VkPipelineCache_T()
    if "pDataSize" in indict.keys():
         pDataSize = indict["pDataSize"]
    else: 
         pDataSize = pointer(c_ulong())
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkGetPipelineCacheData)
    retval = jvulkanLib.vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipelineCache" : pipelineCache,"pDataSize" : pDataSize,"pData" : pData,"retval" : retval}
def vkMergePipelineCaches(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "dstCache" in indict.keys():
         dstCache = indict["dstCache"]
    else: 
         dstCache = VkPipelineCache_T()
    if "srcCacheCount" in indict.keys():
         srcCacheCount = indict["srcCacheCount"]
    else: 
         srcCacheCount = c_uint()
    if "pSrcCaches" in indict.keys():
         pSrcCaches = indict["pSrcCaches"]
    else: 
         pSrcCaches = pointer(VkPipelineCache_T())
    print(jvulkanLib.vkMergePipelineCaches)
    retval = jvulkanLib.vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"dstCache" : dstCache,"srcCacheCount" : srcCacheCount,"pSrcCaches" : pSrcCaches,"retval" : retval}
def vkCreateGraphicsPipelines(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipelineCache" in indict.keys():
         pipelineCache = indict["pipelineCache"]
    else: 
         pipelineCache = VkPipelineCache_T()
    if "createInfoCount" in indict.keys():
         createInfoCount = indict["createInfoCount"]
    else: 
         createInfoCount = c_uint()
    if "pCreateInfos" in indict.keys():
         pCreateInfos = indict["pCreateInfos"]
    else: 
         pCreateInfos = VkGraphicsPipelineCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPipelines" in indict.keys():
         pPipelines = indict["pPipelines"]
    else: 
         pPipelines = pointer(VkPipeline_T())
    print(jvulkanLib.vkCreateGraphicsPipelines)
    retval = jvulkanLib.vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipelineCache" : pipelineCache,"createInfoCount" : createInfoCount,"pCreateInfos" : pCreateInfos,"pAllocator" : pAllocator,"pPipelines" : pPipelines,"retval" : retval}
def vkCreateComputePipelines(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipelineCache" in indict.keys():
         pipelineCache = indict["pipelineCache"]
    else: 
         pipelineCache = VkPipelineCache_T()
    if "createInfoCount" in indict.keys():
         createInfoCount = indict["createInfoCount"]
    else: 
         createInfoCount = c_uint()
    if "pCreateInfos" in indict.keys():
         pCreateInfos = indict["pCreateInfos"]
    else: 
         pCreateInfos = VkComputePipelineCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPipelines" in indict.keys():
         pPipelines = indict["pPipelines"]
    else: 
         pPipelines = pointer(VkPipeline_T())
    print(jvulkanLib.vkCreateComputePipelines)
    retval = jvulkanLib.vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipelineCache" : pipelineCache,"createInfoCount" : createInfoCount,"pCreateInfos" : pCreateInfos,"pAllocator" : pAllocator,"pPipelines" : pPipelines,"retval" : retval}
def vkDestroyPipeline(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyPipeline)
    retval = jvulkanLib.vkDestroyPipeline(device, pipeline, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"pAllocator" : pAllocator,"retval" : retval}
def vkCreatePipelineLayout(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkPipelineLayoutCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPipelineLayout" in indict.keys():
         pPipelineLayout = indict["pPipelineLayout"]
    else: 
         pPipelineLayout = pointer(VkPipelineLayout_T())
    print(jvulkanLib.vkCreatePipelineLayout)
    retval = jvulkanLib.vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pPipelineLayout" : pPipelineLayout,"retval" : retval}
def vkDestroyPipelineLayout(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipelineLayout" in indict.keys():
         pipelineLayout = indict["pipelineLayout"]
    else: 
         pipelineLayout = VkPipelineLayout_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyPipelineLayout)
    retval = jvulkanLib.vkDestroyPipelineLayout(device, pipelineLayout, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipelineLayout" : pipelineLayout,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateSampler(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkSamplerCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSampler" in indict.keys():
         pSampler = indict["pSampler"]
    else: 
         pSampler = pointer(VkSampler_T())
    print(jvulkanLib.vkCreateSampler)
    retval = jvulkanLib.vkCreateSampler(device, pCreateInfo, pAllocator, pSampler)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pSampler" : pSampler,"retval" : retval}
def vkDestroySampler(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "sampler" in indict.keys():
         sampler = indict["sampler"]
    else: 
         sampler = VkSampler_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroySampler)
    retval = jvulkanLib.vkDestroySampler(device, sampler, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"sampler" : sampler,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateDescriptorSetLayout(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDescriptorSetLayoutCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSetLayout" in indict.keys():
         pSetLayout = indict["pSetLayout"]
    else: 
         pSetLayout = pointer(VkDescriptorSetLayout_T())
    print(jvulkanLib.vkCreateDescriptorSetLayout)
    retval = jvulkanLib.vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pSetLayout" : pSetLayout,"retval" : retval}
def vkDestroyDescriptorSetLayout(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorSetLayout" in indict.keys():
         descriptorSetLayout = indict["descriptorSetLayout"]
    else: 
         descriptorSetLayout = VkDescriptorSetLayout_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDescriptorSetLayout)
    retval = jvulkanLib.vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorSetLayout" : descriptorSetLayout,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateDescriptorPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDescriptorPoolCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pDescriptorPool" in indict.keys():
         pDescriptorPool = indict["pDescriptorPool"]
    else: 
         pDescriptorPool = pointer(VkDescriptorPool_T())
    print(jvulkanLib.vkCreateDescriptorPool)
    retval = jvulkanLib.vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pDescriptorPool" : pDescriptorPool,"retval" : retval}
def vkDestroyDescriptorPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorPool" in indict.keys():
         descriptorPool = indict["descriptorPool"]
    else: 
         descriptorPool = VkDescriptorPool_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDescriptorPool)
    retval = jvulkanLib.vkDestroyDescriptorPool(device, descriptorPool, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorPool" : descriptorPool,"pAllocator" : pAllocator,"retval" : retval}
def vkResetDescriptorPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorPool" in indict.keys():
         descriptorPool = indict["descriptorPool"]
    else: 
         descriptorPool = VkDescriptorPool_T()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkResetDescriptorPool)
    retval = jvulkanLib.vkResetDescriptorPool(device, descriptorPool, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorPool" : descriptorPool,"flags" : flags,"retval" : retval}
def vkAllocateDescriptorSets(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAllocateInfo" in indict.keys():
         pAllocateInfo = indict["pAllocateInfo"]
    else: 
         pAllocateInfo = VkDescriptorSetAllocateInfo()
    if "pDescriptorSets" in indict.keys():
         pDescriptorSets = indict["pDescriptorSets"]
    else: 
         pDescriptorSets = pointer(VkDescriptorSet_T())
    print(jvulkanLib.vkAllocateDescriptorSets)
    retval = jvulkanLib.vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAllocateInfo" : pAllocateInfo,"pDescriptorSets" : pDescriptorSets,"retval" : retval}
def vkFreeDescriptorSets(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorPool" in indict.keys():
         descriptorPool = indict["descriptorPool"]
    else: 
         descriptorPool = VkDescriptorPool_T()
    if "descriptorSetCount" in indict.keys():
         descriptorSetCount = indict["descriptorSetCount"]
    else: 
         descriptorSetCount = c_uint()
    if "pDescriptorSets" in indict.keys():
         pDescriptorSets = indict["pDescriptorSets"]
    else: 
         pDescriptorSets = pointer(VkDescriptorSet_T())
    print(jvulkanLib.vkFreeDescriptorSets)
    retval = jvulkanLib.vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorPool" : descriptorPool,"descriptorSetCount" : descriptorSetCount,"pDescriptorSets" : pDescriptorSets,"retval" : retval}
def vkUpdateDescriptorSets(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorWriteCount" in indict.keys():
         descriptorWriteCount = indict["descriptorWriteCount"]
    else: 
         descriptorWriteCount = c_uint()
    if "pDescriptorWrites" in indict.keys():
         pDescriptorWrites = indict["pDescriptorWrites"]
    else: 
         pDescriptorWrites = VkWriteDescriptorSet()
    if "descriptorCopyCount" in indict.keys():
         descriptorCopyCount = indict["descriptorCopyCount"]
    else: 
         descriptorCopyCount = c_uint()
    if "pDescriptorCopies" in indict.keys():
         pDescriptorCopies = indict["pDescriptorCopies"]
    else: 
         pDescriptorCopies = VkCopyDescriptorSet()
    print(jvulkanLib.vkUpdateDescriptorSets)
    retval = jvulkanLib.vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorWriteCount" : descriptorWriteCount,"pDescriptorWrites" : pDescriptorWrites,"descriptorCopyCount" : descriptorCopyCount,"pDescriptorCopies" : pDescriptorCopies,"retval" : retval}
def vkCreateFramebuffer(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkFramebufferCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pFramebuffer" in indict.keys():
         pFramebuffer = indict["pFramebuffer"]
    else: 
         pFramebuffer = pointer(VkFramebuffer_T())
    print(jvulkanLib.vkCreateFramebuffer)
    retval = jvulkanLib.vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pFramebuffer" : pFramebuffer,"retval" : retval}
def vkDestroyFramebuffer(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "framebuffer" in indict.keys():
         framebuffer = indict["framebuffer"]
    else: 
         framebuffer = VkFramebuffer_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyFramebuffer)
    retval = jvulkanLib.vkDestroyFramebuffer(device, framebuffer, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"framebuffer" : framebuffer,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateRenderPass(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkRenderPassCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pRenderPass" in indict.keys():
         pRenderPass = indict["pRenderPass"]
    else: 
         pRenderPass = pointer(VkRenderPass_T())
    print(jvulkanLib.vkCreateRenderPass)
    retval = jvulkanLib.vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pRenderPass" : pRenderPass,"retval" : retval}
def vkDestroyRenderPass(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "renderPass" in indict.keys():
         renderPass = indict["renderPass"]
    else: 
         renderPass = VkRenderPass_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyRenderPass)
    retval = jvulkanLib.vkDestroyRenderPass(device, renderPass, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"renderPass" : renderPass,"pAllocator" : pAllocator,"retval" : retval}
def vkGetRenderAreaGranularity(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "renderPass" in indict.keys():
         renderPass = indict["renderPass"]
    else: 
         renderPass = VkRenderPass_T()
    if "pGranularity" in indict.keys():
         pGranularity = indict["pGranularity"]
    else: 
         pGranularity = VkExtent2D()
    print(jvulkanLib.vkGetRenderAreaGranularity)
    retval = jvulkanLib.vkGetRenderAreaGranularity(device, renderPass, pGranularity)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"renderPass" : renderPass,"pGranularity" : pGranularity,"retval" : retval}
def vkCreateCommandPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkCommandPoolCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pCommandPool" in indict.keys():
         pCommandPool = indict["pCommandPool"]
    else: 
         pCommandPool = pointer(VkCommandPool_T())
    print(jvulkanLib.vkCreateCommandPool)
    retval = jvulkanLib.vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pCommandPool" : pCommandPool,"retval" : retval}
def vkDestroyCommandPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "commandPool" in indict.keys():
         commandPool = indict["commandPool"]
    else: 
         commandPool = VkCommandPool_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyCommandPool)
    retval = jvulkanLib.vkDestroyCommandPool(device, commandPool, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"commandPool" : commandPool,"pAllocator" : pAllocator,"retval" : retval}
def vkResetCommandPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "commandPool" in indict.keys():
         commandPool = indict["commandPool"]
    else: 
         commandPool = VkCommandPool_T()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkResetCommandPool)
    retval = jvulkanLib.vkResetCommandPool(device, commandPool, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"commandPool" : commandPool,"flags" : flags,"retval" : retval}
def vkAllocateCommandBuffers(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAllocateInfo" in indict.keys():
         pAllocateInfo = indict["pAllocateInfo"]
    else: 
         pAllocateInfo = VkCommandBufferAllocateInfo()
    if "pCommandBuffers" in indict.keys():
         pCommandBuffers = indict["pCommandBuffers"]
    else: 
         pCommandBuffers = pointer(VkCommandBuffer_T())
    print(jvulkanLib.vkAllocateCommandBuffers)
    retval = jvulkanLib.vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAllocateInfo" : pAllocateInfo,"pCommandBuffers" : pCommandBuffers,"retval" : retval}
def vkFreeCommandBuffers(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "commandPool" in indict.keys():
         commandPool = indict["commandPool"]
    else: 
         commandPool = VkCommandPool_T()
    if "commandBufferCount" in indict.keys():
         commandBufferCount = indict["commandBufferCount"]
    else: 
         commandBufferCount = c_uint()
    if "pCommandBuffers" in indict.keys():
         pCommandBuffers = indict["pCommandBuffers"]
    else: 
         pCommandBuffers = pointer(VkCommandBuffer_T())
    print(jvulkanLib.vkFreeCommandBuffers)
    retval = jvulkanLib.vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"commandPool" : commandPool,"commandBufferCount" : commandBufferCount,"pCommandBuffers" : pCommandBuffers,"retval" : retval}
def vkBeginCommandBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pBeginInfo" in indict.keys():
         pBeginInfo = indict["pBeginInfo"]
    else: 
         pBeginInfo = VkCommandBufferBeginInfo()
    print(jvulkanLib.vkBeginCommandBuffer)
    retval = jvulkanLib.vkBeginCommandBuffer(commandBuffer, pBeginInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pBeginInfo" : pBeginInfo,"retval" : retval}
def vkEndCommandBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkEndCommandBuffer)
    retval = jvulkanLib.vkEndCommandBuffer(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkResetCommandBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkResetCommandBuffer)
    retval = jvulkanLib.vkResetCommandBuffer(commandBuffer, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"flags" : flags,"retval" : retval}
def vkCmdBindPipeline(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineBindPoint" in indict.keys():
         pipelineBindPoint = indict["pipelineBindPoint"]
    else: 
         pipelineBindPoint = c_int()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    print(jvulkanLib.vkCmdBindPipeline)
    retval = jvulkanLib.vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineBindPoint" : pipelineBindPoint,"pipeline" : pipeline,"retval" : retval}
def vkCmdSetViewport(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstViewport" in indict.keys():
         firstViewport = indict["firstViewport"]
    else: 
         firstViewport = c_uint()
    if "viewportCount" in indict.keys():
         viewportCount = indict["viewportCount"]
    else: 
         viewportCount = c_uint()
    if "pViewports" in indict.keys():
         pViewports = indict["pViewports"]
    else: 
         pViewports = VkViewport()
    print(jvulkanLib.vkCmdSetViewport)
    retval = jvulkanLib.vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstViewport" : firstViewport,"viewportCount" : viewportCount,"pViewports" : pViewports,"retval" : retval}
def vkCmdSetScissor(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstScissor" in indict.keys():
         firstScissor = indict["firstScissor"]
    else: 
         firstScissor = c_uint()
    if "scissorCount" in indict.keys():
         scissorCount = indict["scissorCount"]
    else: 
         scissorCount = c_uint()
    if "pScissors" in indict.keys():
         pScissors = indict["pScissors"]
    else: 
         pScissors = VkRect2D()
    print(jvulkanLib.vkCmdSetScissor)
    retval = jvulkanLib.vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstScissor" : firstScissor,"scissorCount" : scissorCount,"pScissors" : pScissors,"retval" : retval}
def vkCmdSetLineWidth(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "lineWidth" in indict.keys():
         lineWidth = indict["lineWidth"]
    else: 
         lineWidth = c_float()
    print(jvulkanLib.vkCmdSetLineWidth)
    retval = jvulkanLib.vkCmdSetLineWidth(commandBuffer, lineWidth)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"lineWidth" : lineWidth,"retval" : retval}
def vkCmdSetDepthBias(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthBiasConstantFactor" in indict.keys():
         depthBiasConstantFactor = indict["depthBiasConstantFactor"]
    else: 
         depthBiasConstantFactor = c_float()
    if "depthBiasClamp" in indict.keys():
         depthBiasClamp = indict["depthBiasClamp"]
    else: 
         depthBiasClamp = c_float()
    if "depthBiasSlopeFactor" in indict.keys():
         depthBiasSlopeFactor = indict["depthBiasSlopeFactor"]
    else: 
         depthBiasSlopeFactor = c_float()
    print(jvulkanLib.vkCmdSetDepthBias)
    retval = jvulkanLib.vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthBiasConstantFactor" : depthBiasConstantFactor,"depthBiasClamp" : depthBiasClamp,"depthBiasSlopeFactor" : depthBiasSlopeFactor,"retval" : retval}
def vkCmdSetBlendConstants(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "blendConstants" in indict.keys():
         blendConstants = indict["blendConstants"]
    else: 
         blendConstants = pointer(c_float())
    print(jvulkanLib.vkCmdSetBlendConstants)
    retval = jvulkanLib.vkCmdSetBlendConstants(commandBuffer, blendConstants)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"blendConstants" : blendConstants,"retval" : retval}
def vkCmdSetDepthBounds(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "minDepthBounds" in indict.keys():
         minDepthBounds = indict["minDepthBounds"]
    else: 
         minDepthBounds = c_float()
    if "maxDepthBounds" in indict.keys():
         maxDepthBounds = indict["maxDepthBounds"]
    else: 
         maxDepthBounds = c_float()
    print(jvulkanLib.vkCmdSetDepthBounds)
    retval = jvulkanLib.vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"minDepthBounds" : minDepthBounds,"maxDepthBounds" : maxDepthBounds,"retval" : retval}
def vkCmdSetStencilCompareMask(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "faceMask" in indict.keys():
         faceMask = indict["faceMask"]
    else: 
         faceMask = c_uint()
    if "compareMask" in indict.keys():
         compareMask = indict["compareMask"]
    else: 
         compareMask = c_uint()
    print(jvulkanLib.vkCmdSetStencilCompareMask)
    retval = jvulkanLib.vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"faceMask" : faceMask,"compareMask" : compareMask,"retval" : retval}
def vkCmdSetStencilWriteMask(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "faceMask" in indict.keys():
         faceMask = indict["faceMask"]
    else: 
         faceMask = c_uint()
    if "writeMask" in indict.keys():
         writeMask = indict["writeMask"]
    else: 
         writeMask = c_uint()
    print(jvulkanLib.vkCmdSetStencilWriteMask)
    retval = jvulkanLib.vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"faceMask" : faceMask,"writeMask" : writeMask,"retval" : retval}
def vkCmdSetStencilReference(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "faceMask" in indict.keys():
         faceMask = indict["faceMask"]
    else: 
         faceMask = c_uint()
    if "reference" in indict.keys():
         reference = indict["reference"]
    else: 
         reference = c_uint()
    print(jvulkanLib.vkCmdSetStencilReference)
    retval = jvulkanLib.vkCmdSetStencilReference(commandBuffer, faceMask, reference)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"faceMask" : faceMask,"reference" : reference,"retval" : retval}
def vkCmdBindDescriptorSets(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineBindPoint" in indict.keys():
         pipelineBindPoint = indict["pipelineBindPoint"]
    else: 
         pipelineBindPoint = c_int()
    if "layout" in indict.keys():
         layout = indict["layout"]
    else: 
         layout = VkPipelineLayout_T()
    if "firstSet" in indict.keys():
         firstSet = indict["firstSet"]
    else: 
         firstSet = c_uint()
    if "descriptorSetCount" in indict.keys():
         descriptorSetCount = indict["descriptorSetCount"]
    else: 
         descriptorSetCount = c_uint()
    if "pDescriptorSets" in indict.keys():
         pDescriptorSets = indict["pDescriptorSets"]
    else: 
         pDescriptorSets = pointer(VkDescriptorSet_T())
    if "dynamicOffsetCount" in indict.keys():
         dynamicOffsetCount = indict["dynamicOffsetCount"]
    else: 
         dynamicOffsetCount = c_uint()
    if "pDynamicOffsets" in indict.keys():
         pDynamicOffsets = indict["pDynamicOffsets"]
    else: 
         pDynamicOffsets = pointer(c_uint())
    print(jvulkanLib.vkCmdBindDescriptorSets)
    retval = jvulkanLib.vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineBindPoint" : pipelineBindPoint,"layout" : layout,"firstSet" : firstSet,"descriptorSetCount" : descriptorSetCount,"pDescriptorSets" : pDescriptorSets,"dynamicOffsetCount" : dynamicOffsetCount,"pDynamicOffsets" : pDynamicOffsets,"retval" : retval}
def vkCmdBindIndexBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "indexType" in indict.keys():
         indexType = indict["indexType"]
    else: 
         indexType = c_int()
    print(jvulkanLib.vkCmdBindIndexBuffer)
    retval = jvulkanLib.vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"indexType" : indexType,"retval" : retval}
def vkCmdBindVertexBuffers(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstBinding" in indict.keys():
         firstBinding = indict["firstBinding"]
    else: 
         firstBinding = c_uint()
    if "bindingCount" in indict.keys():
         bindingCount = indict["bindingCount"]
    else: 
         bindingCount = c_uint()
    if "pBuffers" in indict.keys():
         pBuffers = indict["pBuffers"]
    else: 
         pBuffers = pointer(VkBuffer_T())
    if "pOffsets" in indict.keys():
         pOffsets = indict["pOffsets"]
    else: 
         pOffsets = pointer(c_ulong())
    print(jvulkanLib.vkCmdBindVertexBuffers)
    retval = jvulkanLib.vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstBinding" : firstBinding,"bindingCount" : bindingCount,"pBuffers" : pBuffers,"pOffsets" : pOffsets,"retval" : retval}
def vkCmdDraw(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "vertexCount" in indict.keys():
         vertexCount = indict["vertexCount"]
    else: 
         vertexCount = c_uint()
    if "instanceCount" in indict.keys():
         instanceCount = indict["instanceCount"]
    else: 
         instanceCount = c_uint()
    if "firstVertex" in indict.keys():
         firstVertex = indict["firstVertex"]
    else: 
         firstVertex = c_uint()
    if "firstInstance" in indict.keys():
         firstInstance = indict["firstInstance"]
    else: 
         firstInstance = c_uint()
    print(jvulkanLib.vkCmdDraw)
    retval = jvulkanLib.vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"vertexCount" : vertexCount,"instanceCount" : instanceCount,"firstVertex" : firstVertex,"firstInstance" : firstInstance,"retval" : retval}
def vkCmdDrawIndexed(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "indexCount" in indict.keys():
         indexCount = indict["indexCount"]
    else: 
         indexCount = c_uint()
    if "instanceCount" in indict.keys():
         instanceCount = indict["instanceCount"]
    else: 
         instanceCount = c_uint()
    if "firstIndex" in indict.keys():
         firstIndex = indict["firstIndex"]
    else: 
         firstIndex = c_uint()
    if "vertexOffset" in indict.keys():
         vertexOffset = indict["vertexOffset"]
    else: 
         vertexOffset = c_int()
    if "firstInstance" in indict.keys():
         firstInstance = indict["firstInstance"]
    else: 
         firstInstance = c_uint()
    print(jvulkanLib.vkCmdDrawIndexed)
    retval = jvulkanLib.vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"indexCount" : indexCount,"instanceCount" : instanceCount,"firstIndex" : firstIndex,"vertexOffset" : vertexOffset,"firstInstance" : firstInstance,"retval" : retval}
def vkCmdDrawIndirect(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "drawCount" in indict.keys():
         drawCount = indict["drawCount"]
    else: 
         drawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndirect)
    retval = jvulkanLib.vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"drawCount" : drawCount,"stride" : stride,"retval" : retval}
def vkCmdDrawIndexedIndirect(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "drawCount" in indict.keys():
         drawCount = indict["drawCount"]
    else: 
         drawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndexedIndirect)
    retval = jvulkanLib.vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"drawCount" : drawCount,"stride" : stride,"retval" : retval}
def vkCmdDispatch(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "groupCountX" in indict.keys():
         groupCountX = indict["groupCountX"]
    else: 
         groupCountX = c_uint()
    if "groupCountY" in indict.keys():
         groupCountY = indict["groupCountY"]
    else: 
         groupCountY = c_uint()
    if "groupCountZ" in indict.keys():
         groupCountZ = indict["groupCountZ"]
    else: 
         groupCountZ = c_uint()
    print(jvulkanLib.vkCmdDispatch)
    retval = jvulkanLib.vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"groupCountX" : groupCountX,"groupCountY" : groupCountY,"groupCountZ" : groupCountZ,"retval" : retval}
def vkCmdDispatchIndirect(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    print(jvulkanLib.vkCmdDispatchIndirect)
    retval = jvulkanLib.vkCmdDispatchIndirect(commandBuffer, buffer, offset)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"retval" : retval}
def vkCmdCopyBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcBuffer" in indict.keys():
         srcBuffer = indict["srcBuffer"]
    else: 
         srcBuffer = VkBuffer_T()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "regionCount" in indict.keys():
         regionCount = indict["regionCount"]
    else: 
         regionCount = c_uint()
    if "pRegions" in indict.keys():
         pRegions = indict["pRegions"]
    else: 
         pRegions = VkBufferCopy()
    print(jvulkanLib.vkCmdCopyBuffer)
    retval = jvulkanLib.vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcBuffer" : srcBuffer,"dstBuffer" : dstBuffer,"regionCount" : regionCount,"pRegions" : pRegions,"retval" : retval}
def vkCmdCopyImage(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcImage" in indict.keys():
         srcImage = indict["srcImage"]
    else: 
         srcImage = VkImage_T()
    if "srcImageLayout" in indict.keys():
         srcImageLayout = indict["srcImageLayout"]
    else: 
         srcImageLayout = c_int()
    if "dstImage" in indict.keys():
         dstImage = indict["dstImage"]
    else: 
         dstImage = VkImage_T()
    if "dstImageLayout" in indict.keys():
         dstImageLayout = indict["dstImageLayout"]
    else: 
         dstImageLayout = c_int()
    if "regionCount" in indict.keys():
         regionCount = indict["regionCount"]
    else: 
         regionCount = c_uint()
    if "pRegions" in indict.keys():
         pRegions = indict["pRegions"]
    else: 
         pRegions = VkImageCopy()
    print(jvulkanLib.vkCmdCopyImage)
    retval = jvulkanLib.vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcImage" : srcImage,"srcImageLayout" : srcImageLayout,"dstImage" : dstImage,"dstImageLayout" : dstImageLayout,"regionCount" : regionCount,"pRegions" : pRegions,"retval" : retval}
def vkCmdBlitImage(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcImage" in indict.keys():
         srcImage = indict["srcImage"]
    else: 
         srcImage = VkImage_T()
    if "srcImageLayout" in indict.keys():
         srcImageLayout = indict["srcImageLayout"]
    else: 
         srcImageLayout = c_int()
    if "dstImage" in indict.keys():
         dstImage = indict["dstImage"]
    else: 
         dstImage = VkImage_T()
    if "dstImageLayout" in indict.keys():
         dstImageLayout = indict["dstImageLayout"]
    else: 
         dstImageLayout = c_int()
    if "regionCount" in indict.keys():
         regionCount = indict["regionCount"]
    else: 
         regionCount = c_uint()
    if "pRegions" in indict.keys():
         pRegions = indict["pRegions"]
    else: 
         pRegions = VkImageBlit()
    if "filter" in indict.keys():
         filter = indict["filter"]
    else: 
         filter = c_int()
    print(jvulkanLib.vkCmdBlitImage)
    retval = jvulkanLib.vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcImage" : srcImage,"srcImageLayout" : srcImageLayout,"dstImage" : dstImage,"dstImageLayout" : dstImageLayout,"regionCount" : regionCount,"pRegions" : pRegions,"filter" : filter,"retval" : retval}
def vkCmdCopyBufferToImage(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcBuffer" in indict.keys():
         srcBuffer = indict["srcBuffer"]
    else: 
         srcBuffer = VkBuffer_T()
    if "dstImage" in indict.keys():
         dstImage = indict["dstImage"]
    else: 
         dstImage = VkImage_T()
    if "dstImageLayout" in indict.keys():
         dstImageLayout = indict["dstImageLayout"]
    else: 
         dstImageLayout = c_int()
    if "regionCount" in indict.keys():
         regionCount = indict["regionCount"]
    else: 
         regionCount = c_uint()
    if "pRegions" in indict.keys():
         pRegions = indict["pRegions"]
    else: 
         pRegions = VkBufferImageCopy()
    print(jvulkanLib.vkCmdCopyBufferToImage)
    retval = jvulkanLib.vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcBuffer" : srcBuffer,"dstImage" : dstImage,"dstImageLayout" : dstImageLayout,"regionCount" : regionCount,"pRegions" : pRegions,"retval" : retval}
def vkCmdCopyImageToBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcImage" in indict.keys():
         srcImage = indict["srcImage"]
    else: 
         srcImage = VkImage_T()
    if "srcImageLayout" in indict.keys():
         srcImageLayout = indict["srcImageLayout"]
    else: 
         srcImageLayout = c_int()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "regionCount" in indict.keys():
         regionCount = indict["regionCount"]
    else: 
         regionCount = c_uint()
    if "pRegions" in indict.keys():
         pRegions = indict["pRegions"]
    else: 
         pRegions = VkBufferImageCopy()
    print(jvulkanLib.vkCmdCopyImageToBuffer)
    retval = jvulkanLib.vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcImage" : srcImage,"srcImageLayout" : srcImageLayout,"dstBuffer" : dstBuffer,"regionCount" : regionCount,"pRegions" : pRegions,"retval" : retval}
def vkCmdUpdateBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "dstOffset" in indict.keys():
         dstOffset = indict["dstOffset"]
    else: 
         dstOffset = c_ulong()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkCmdUpdateBuffer)
    retval = jvulkanLib.vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"dstBuffer" : dstBuffer,"dstOffset" : dstOffset,"dataSize" : dataSize,"pData" : pData,"retval" : retval}
def vkCmdFillBuffer(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "dstOffset" in indict.keys():
         dstOffset = indict["dstOffset"]
    else: 
         dstOffset = c_ulong()
    if "size" in indict.keys():
         size = indict["size"]
    else: 
         size = c_ulong()
    if "data" in indict.keys():
         data = indict["data"]
    else: 
         data = c_uint()
    print(jvulkanLib.vkCmdFillBuffer)
    retval = jvulkanLib.vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"dstBuffer" : dstBuffer,"dstOffset" : dstOffset,"size" : size,"data" : data,"retval" : retval}
def vkCmdClearColorImage(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "imageLayout" in indict.keys():
         imageLayout = indict["imageLayout"]
    else: 
         imageLayout = c_int()
    if "pColor" in indict.keys():
         pColor = indict["pColor"]
    else: 
         pColor = VkClearColorValue()
    if "rangeCount" in indict.keys():
         rangeCount = indict["rangeCount"]
    else: 
         rangeCount = c_uint()
    if "pRanges" in indict.keys():
         pRanges = indict["pRanges"]
    else: 
         pRanges = VkImageSubresourceRange()
    print(jvulkanLib.vkCmdClearColorImage)
    retval = jvulkanLib.vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"image" : image,"imageLayout" : imageLayout,"pColor" : pColor,"rangeCount" : rangeCount,"pRanges" : pRanges,"retval" : retval}
def vkCmdClearDepthStencilImage(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "imageLayout" in indict.keys():
         imageLayout = indict["imageLayout"]
    else: 
         imageLayout = c_int()
    if "pDepthStencil" in indict.keys():
         pDepthStencil = indict["pDepthStencil"]
    else: 
         pDepthStencil = VkClearDepthStencilValue()
    if "rangeCount" in indict.keys():
         rangeCount = indict["rangeCount"]
    else: 
         rangeCount = c_uint()
    if "pRanges" in indict.keys():
         pRanges = indict["pRanges"]
    else: 
         pRanges = VkImageSubresourceRange()
    print(jvulkanLib.vkCmdClearDepthStencilImage)
    retval = jvulkanLib.vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"image" : image,"imageLayout" : imageLayout,"pDepthStencil" : pDepthStencil,"rangeCount" : rangeCount,"pRanges" : pRanges,"retval" : retval}
def vkCmdClearAttachments(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "attachmentCount" in indict.keys():
         attachmentCount = indict["attachmentCount"]
    else: 
         attachmentCount = c_uint()
    if "pAttachments" in indict.keys():
         pAttachments = indict["pAttachments"]
    else: 
         pAttachments = VkClearAttachment()
    if "rectCount" in indict.keys():
         rectCount = indict["rectCount"]
    else: 
         rectCount = c_uint()
    if "pRects" in indict.keys():
         pRects = indict["pRects"]
    else: 
         pRects = VkClearRect()
    print(jvulkanLib.vkCmdClearAttachments)
    retval = jvulkanLib.vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"attachmentCount" : attachmentCount,"pAttachments" : pAttachments,"rectCount" : rectCount,"pRects" : pRects,"retval" : retval}
def vkCmdResolveImage(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcImage" in indict.keys():
         srcImage = indict["srcImage"]
    else: 
         srcImage = VkImage_T()
    if "srcImageLayout" in indict.keys():
         srcImageLayout = indict["srcImageLayout"]
    else: 
         srcImageLayout = c_int()
    if "dstImage" in indict.keys():
         dstImage = indict["dstImage"]
    else: 
         dstImage = VkImage_T()
    if "dstImageLayout" in indict.keys():
         dstImageLayout = indict["dstImageLayout"]
    else: 
         dstImageLayout = c_int()
    if "regionCount" in indict.keys():
         regionCount = indict["regionCount"]
    else: 
         regionCount = c_uint()
    if "pRegions" in indict.keys():
         pRegions = indict["pRegions"]
    else: 
         pRegions = VkImageResolve()
    print(jvulkanLib.vkCmdResolveImage)
    retval = jvulkanLib.vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcImage" : srcImage,"srcImageLayout" : srcImageLayout,"dstImage" : dstImage,"dstImageLayout" : dstImageLayout,"regionCount" : regionCount,"pRegions" : pRegions,"retval" : retval}
def vkCmdSetEvent(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "stageMask" in indict.keys():
         stageMask = indict["stageMask"]
    else: 
         stageMask = c_uint()
    print(jvulkanLib.vkCmdSetEvent)
    retval = jvulkanLib.vkCmdSetEvent(commandBuffer, event, stageMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"event" : event,"stageMask" : stageMask,"retval" : retval}
def vkCmdResetEvent(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "stageMask" in indict.keys():
         stageMask = indict["stageMask"]
    else: 
         stageMask = c_uint()
    print(jvulkanLib.vkCmdResetEvent)
    retval = jvulkanLib.vkCmdResetEvent(commandBuffer, event, stageMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"event" : event,"stageMask" : stageMask,"retval" : retval}
def vkCmdWaitEvents(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "eventCount" in indict.keys():
         eventCount = indict["eventCount"]
    else: 
         eventCount = c_uint()
    if "pEvents" in indict.keys():
         pEvents = indict["pEvents"]
    else: 
         pEvents = pointer(VkEvent_T())
    if "srcStageMask" in indict.keys():
         srcStageMask = indict["srcStageMask"]
    else: 
         srcStageMask = c_uint()
    if "dstStageMask" in indict.keys():
         dstStageMask = indict["dstStageMask"]
    else: 
         dstStageMask = c_uint()
    if "memoryBarrierCount" in indict.keys():
         memoryBarrierCount = indict["memoryBarrierCount"]
    else: 
         memoryBarrierCount = c_uint()
    if "pMemoryBarriers" in indict.keys():
         pMemoryBarriers = indict["pMemoryBarriers"]
    else: 
         pMemoryBarriers = VkMemoryBarrier()
    if "bufferMemoryBarrierCount" in indict.keys():
         bufferMemoryBarrierCount = indict["bufferMemoryBarrierCount"]
    else: 
         bufferMemoryBarrierCount = c_uint()
    if "pBufferMemoryBarriers" in indict.keys():
         pBufferMemoryBarriers = indict["pBufferMemoryBarriers"]
    else: 
         pBufferMemoryBarriers = VkBufferMemoryBarrier()
    if "imageMemoryBarrierCount" in indict.keys():
         imageMemoryBarrierCount = indict["imageMemoryBarrierCount"]
    else: 
         imageMemoryBarrierCount = c_uint()
    if "pImageMemoryBarriers" in indict.keys():
         pImageMemoryBarriers = indict["pImageMemoryBarriers"]
    else: 
         pImageMemoryBarriers = VkImageMemoryBarrier()
    print(jvulkanLib.vkCmdWaitEvents)
    retval = jvulkanLib.vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"eventCount" : eventCount,"pEvents" : pEvents,"srcStageMask" : srcStageMask,"dstStageMask" : dstStageMask,"memoryBarrierCount" : memoryBarrierCount,"pMemoryBarriers" : pMemoryBarriers,"bufferMemoryBarrierCount" : bufferMemoryBarrierCount,"pBufferMemoryBarriers" : pBufferMemoryBarriers,"imageMemoryBarrierCount" : imageMemoryBarrierCount,"pImageMemoryBarriers" : pImageMemoryBarriers,"retval" : retval}
def vkCmdPipelineBarrier(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "srcStageMask" in indict.keys():
         srcStageMask = indict["srcStageMask"]
    else: 
         srcStageMask = c_uint()
    if "dstStageMask" in indict.keys():
         dstStageMask = indict["dstStageMask"]
    else: 
         dstStageMask = c_uint()
    if "dependencyFlags" in indict.keys():
         dependencyFlags = indict["dependencyFlags"]
    else: 
         dependencyFlags = c_uint()
    if "memoryBarrierCount" in indict.keys():
         memoryBarrierCount = indict["memoryBarrierCount"]
    else: 
         memoryBarrierCount = c_uint()
    if "pMemoryBarriers" in indict.keys():
         pMemoryBarriers = indict["pMemoryBarriers"]
    else: 
         pMemoryBarriers = VkMemoryBarrier()
    if "bufferMemoryBarrierCount" in indict.keys():
         bufferMemoryBarrierCount = indict["bufferMemoryBarrierCount"]
    else: 
         bufferMemoryBarrierCount = c_uint()
    if "pBufferMemoryBarriers" in indict.keys():
         pBufferMemoryBarriers = indict["pBufferMemoryBarriers"]
    else: 
         pBufferMemoryBarriers = VkBufferMemoryBarrier()
    if "imageMemoryBarrierCount" in indict.keys():
         imageMemoryBarrierCount = indict["imageMemoryBarrierCount"]
    else: 
         imageMemoryBarrierCount = c_uint()
    if "pImageMemoryBarriers" in indict.keys():
         pImageMemoryBarriers = indict["pImageMemoryBarriers"]
    else: 
         pImageMemoryBarriers = VkImageMemoryBarrier()
    print(jvulkanLib.vkCmdPipelineBarrier)
    retval = jvulkanLib.vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"srcStageMask" : srcStageMask,"dstStageMask" : dstStageMask,"dependencyFlags" : dependencyFlags,"memoryBarrierCount" : memoryBarrierCount,"pMemoryBarriers" : pMemoryBarriers,"bufferMemoryBarrierCount" : bufferMemoryBarrierCount,"pBufferMemoryBarriers" : pBufferMemoryBarriers,"imageMemoryBarrierCount" : imageMemoryBarrierCount,"pImageMemoryBarriers" : pImageMemoryBarriers,"retval" : retval}
def vkCmdBeginQuery(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkCmdBeginQuery)
    retval = jvulkanLib.vkCmdBeginQuery(commandBuffer, queryPool, query, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"queryPool" : queryPool,"query" : query,"flags" : flags,"retval" : retval}
def vkCmdEndQuery(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    print(jvulkanLib.vkCmdEndQuery)
    retval = jvulkanLib.vkCmdEndQuery(commandBuffer, queryPool, query)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"queryPool" : queryPool,"query" : query,"retval" : retval}
def vkCmdResetQueryPool(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    if "queryCount" in indict.keys():
         queryCount = indict["queryCount"]
    else: 
         queryCount = c_uint()
    print(jvulkanLib.vkCmdResetQueryPool)
    retval = jvulkanLib.vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"queryPool" : queryPool,"firstQuery" : firstQuery,"queryCount" : queryCount,"retval" : retval}
def vkCmdWriteTimestamp(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineStage" in indict.keys():
         pipelineStage = indict["pipelineStage"]
    else: 
         pipelineStage = c_int()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    print(jvulkanLib.vkCmdWriteTimestamp)
    retval = jvulkanLib.vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineStage" : pipelineStage,"queryPool" : queryPool,"query" : query,"retval" : retval}
def vkCmdCopyQueryPoolResults(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    if "queryCount" in indict.keys():
         queryCount = indict["queryCount"]
    else: 
         queryCount = c_uint()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "dstOffset" in indict.keys():
         dstOffset = indict["dstOffset"]
    else: 
         dstOffset = c_ulong()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_ulong()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkCmdCopyQueryPoolResults)
    retval = jvulkanLib.vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"queryPool" : queryPool,"firstQuery" : firstQuery,"queryCount" : queryCount,"dstBuffer" : dstBuffer,"dstOffset" : dstOffset,"stride" : stride,"flags" : flags,"retval" : retval}
def vkCmdPushConstants(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "layout" in indict.keys():
         layout = indict["layout"]
    else: 
         layout = VkPipelineLayout_T()
    if "stageFlags" in indict.keys():
         stageFlags = indict["stageFlags"]
    else: 
         stageFlags = c_uint()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_uint()
    if "size" in indict.keys():
         size = indict["size"]
    else: 
         size = c_uint()
    if "pValues" in indict.keys():
         pValues = indict["pValues"]
    else: 
         pValues = c_void_p()
    print(jvulkanLib.vkCmdPushConstants)
    retval = jvulkanLib.vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"layout" : layout,"stageFlags" : stageFlags,"offset" : offset,"size" : size,"pValues" : pValues,"retval" : retval}
def vkCmdBeginRenderPass(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRenderPassBegin" in indict.keys():
         pRenderPassBegin = indict["pRenderPassBegin"]
    else: 
         pRenderPassBegin = VkRenderPassBeginInfo()
    if "contents" in indict.keys():
         contents = indict["contents"]
    else: 
         contents = c_int()
    print(jvulkanLib.vkCmdBeginRenderPass)
    retval = jvulkanLib.vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRenderPassBegin" : pRenderPassBegin,"contents" : contents,"retval" : retval}
def vkCmdNextSubpass(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "contents" in indict.keys():
         contents = indict["contents"]
    else: 
         contents = c_int()
    print(jvulkanLib.vkCmdNextSubpass)
    retval = jvulkanLib.vkCmdNextSubpass(commandBuffer, contents)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"contents" : contents,"retval" : retval}
def vkCmdEndRenderPass(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdEndRenderPass)
    retval = jvulkanLib.vkCmdEndRenderPass(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkCmdExecuteCommands(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "commandBufferCount" in indict.keys():
         commandBufferCount = indict["commandBufferCount"]
    else: 
         commandBufferCount = c_uint()
    if "pCommandBuffers" in indict.keys():
         pCommandBuffers = indict["pCommandBuffers"]
    else: 
         pCommandBuffers = pointer(VkCommandBuffer_T())
    print(jvulkanLib.vkCmdExecuteCommands)
    retval = jvulkanLib.vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"commandBufferCount" : commandBufferCount,"pCommandBuffers" : pCommandBuffers,"retval" : retval}
def vkEnumerateInstanceVersion(indict):
    indict = preprocess(indict)
    if "pApiVersion" in indict.keys():
         pApiVersion = indict["pApiVersion"]
    else: 
         pApiVersion = pointer(c_uint())
    print(jvulkanLib.vkEnumerateInstanceVersion)
    retval = jvulkanLib.vkEnumerateInstanceVersion(pApiVersion)
    if retval:
       raise(BaseException(str(retval)))
    return {"pApiVersion" : pApiVersion,"retval" : retval}
def vkBindBufferMemory2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "bindInfoCount" in indict.keys():
         bindInfoCount = indict["bindInfoCount"]
    else: 
         bindInfoCount = c_uint()
    if "pBindInfos" in indict.keys():
         pBindInfos = indict["pBindInfos"]
    else: 
         pBindInfos = VkBindBufferMemoryInfo()
    print(jvulkanLib.vkBindBufferMemory2)
    retval = jvulkanLib.vkBindBufferMemory2(device, bindInfoCount, pBindInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"bindInfoCount" : bindInfoCount,"pBindInfos" : pBindInfos,"retval" : retval}
def vkBindImageMemory2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "bindInfoCount" in indict.keys():
         bindInfoCount = indict["bindInfoCount"]
    else: 
         bindInfoCount = c_uint()
    if "pBindInfos" in indict.keys():
         pBindInfos = indict["pBindInfos"]
    else: 
         pBindInfos = VkBindImageMemoryInfo()
    print(jvulkanLib.vkBindImageMemory2)
    retval = jvulkanLib.vkBindImageMemory2(device, bindInfoCount, pBindInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"bindInfoCount" : bindInfoCount,"pBindInfos" : pBindInfos,"retval" : retval}
def vkGetDeviceGroupPeerMemoryFeatures(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "heapIndex" in indict.keys():
         heapIndex = indict["heapIndex"]
    else: 
         heapIndex = c_uint()
    if "localDeviceIndex" in indict.keys():
         localDeviceIndex = indict["localDeviceIndex"]
    else: 
         localDeviceIndex = c_uint()
    if "remoteDeviceIndex" in indict.keys():
         remoteDeviceIndex = indict["remoteDeviceIndex"]
    else: 
         remoteDeviceIndex = c_uint()
    if "pPeerMemoryFeatures" in indict.keys():
         pPeerMemoryFeatures = indict["pPeerMemoryFeatures"]
    else: 
         pPeerMemoryFeatures = pointer(c_uint())
    print(jvulkanLib.vkGetDeviceGroupPeerMemoryFeatures)
    retval = jvulkanLib.vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"heapIndex" : heapIndex,"localDeviceIndex" : localDeviceIndex,"remoteDeviceIndex" : remoteDeviceIndex,"pPeerMemoryFeatures" : pPeerMemoryFeatures,"retval" : retval}
def vkCmdSetDeviceMask(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "deviceMask" in indict.keys():
         deviceMask = indict["deviceMask"]
    else: 
         deviceMask = c_uint()
    print(jvulkanLib.vkCmdSetDeviceMask)
    retval = jvulkanLib.vkCmdSetDeviceMask(commandBuffer, deviceMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"deviceMask" : deviceMask,"retval" : retval}
def vkCmdDispatchBase(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "baseGroupX" in indict.keys():
         baseGroupX = indict["baseGroupX"]
    else: 
         baseGroupX = c_uint()
    if "baseGroupY" in indict.keys():
         baseGroupY = indict["baseGroupY"]
    else: 
         baseGroupY = c_uint()
    if "baseGroupZ" in indict.keys():
         baseGroupZ = indict["baseGroupZ"]
    else: 
         baseGroupZ = c_uint()
    if "groupCountX" in indict.keys():
         groupCountX = indict["groupCountX"]
    else: 
         groupCountX = c_uint()
    if "groupCountY" in indict.keys():
         groupCountY = indict["groupCountY"]
    else: 
         groupCountY = c_uint()
    if "groupCountZ" in indict.keys():
         groupCountZ = indict["groupCountZ"]
    else: 
         groupCountZ = c_uint()
    print(jvulkanLib.vkCmdDispatchBase)
    retval = jvulkanLib.vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"baseGroupX" : baseGroupX,"baseGroupY" : baseGroupY,"baseGroupZ" : baseGroupZ,"groupCountX" : groupCountX,"groupCountY" : groupCountY,"groupCountZ" : groupCountZ,"retval" : retval}
def vkEnumeratePhysicalDeviceGroups(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pPhysicalDeviceGroupCount" in indict.keys():
         pPhysicalDeviceGroupCount = indict["pPhysicalDeviceGroupCount"]
    else: 
         pPhysicalDeviceGroupCount = pointer(c_uint())
    if "pPhysicalDeviceGroupProperties" in indict.keys():
         pPhysicalDeviceGroupProperties = indict["pPhysicalDeviceGroupProperties"]
    else: 
         pPhysicalDeviceGroupProperties = VkPhysicalDeviceGroupProperties()
    print(jvulkanLib.vkEnumeratePhysicalDeviceGroups)
    retval = jvulkanLib.vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pPhysicalDeviceGroupCount" : pPhysicalDeviceGroupCount,"pPhysicalDeviceGroupProperties" : pPhysicalDeviceGroupProperties,"retval" : retval}
def vkGetImageMemoryRequirements2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkImageMemoryRequirementsInfo2()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetImageMemoryRequirements2)
    retval = jvulkanLib.vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetBufferMemoryRequirements2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferMemoryRequirementsInfo2()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetBufferMemoryRequirements2)
    retval = jvulkanLib.vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetImageSparseMemoryRequirements2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkImageSparseMemoryRequirementsInfo2()
    if "pSparseMemoryRequirementCount" in indict.keys():
         pSparseMemoryRequirementCount = indict["pSparseMemoryRequirementCount"]
    else: 
         pSparseMemoryRequirementCount = pointer(c_uint())
    if "pSparseMemoryRequirements" in indict.keys():
         pSparseMemoryRequirements = indict["pSparseMemoryRequirements"]
    else: 
         pSparseMemoryRequirements = VkSparseImageMemoryRequirements2()
    print(jvulkanLib.vkGetImageSparseMemoryRequirements2)
    retval = jvulkanLib.vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pSparseMemoryRequirementCount" : pSparseMemoryRequirementCount,"pSparseMemoryRequirements" : pSparseMemoryRequirements,"retval" : retval}
def vkGetPhysicalDeviceFeatures2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pFeatures" in indict.keys():
         pFeatures = indict["pFeatures"]
    else: 
         pFeatures = VkPhysicalDeviceFeatures2()
    print(jvulkanLib.vkGetPhysicalDeviceFeatures2)
    retval = jvulkanLib.vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pFeatures" : pFeatures,"retval" : retval}
def vkGetPhysicalDeviceProperties2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkPhysicalDeviceProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceProperties2)
    retval = jvulkanLib.vkGetPhysicalDeviceProperties2(physicalDevice, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pProperties" : pProperties,"retval" : retval}
def vkGetPhysicalDeviceFormatProperties2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "format" in indict.keys():
         format = indict["format"]
    else: 
         format = c_int()
    if "pFormatProperties" in indict.keys():
         pFormatProperties = indict["pFormatProperties"]
    else: 
         pFormatProperties = VkFormatProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceFormatProperties2)
    retval = jvulkanLib.vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"format" : format,"pFormatProperties" : pFormatProperties,"retval" : retval}
def vkGetPhysicalDeviceImageFormatProperties2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pImageFormatInfo" in indict.keys():
         pImageFormatInfo = indict["pImageFormatInfo"]
    else: 
         pImageFormatInfo = VkPhysicalDeviceImageFormatInfo2()
    if "pImageFormatProperties" in indict.keys():
         pImageFormatProperties = indict["pImageFormatProperties"]
    else: 
         pImageFormatProperties = VkImageFormatProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceImageFormatProperties2)
    retval = jvulkanLib.vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pImageFormatInfo" : pImageFormatInfo,"pImageFormatProperties" : pImageFormatProperties,"retval" : retval}
def vkGetPhysicalDeviceQueueFamilyProperties2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pQueueFamilyPropertyCount" in indict.keys():
         pQueueFamilyPropertyCount = indict["pQueueFamilyPropertyCount"]
    else: 
         pQueueFamilyPropertyCount = pointer(c_uint())
    if "pQueueFamilyProperties" in indict.keys():
         pQueueFamilyProperties = indict["pQueueFamilyProperties"]
    else: 
         pQueueFamilyProperties = VkQueueFamilyProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceQueueFamilyProperties2)
    retval = jvulkanLib.vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pQueueFamilyPropertyCount" : pQueueFamilyPropertyCount,"pQueueFamilyProperties" : pQueueFamilyProperties,"retval" : retval}
def vkGetPhysicalDeviceMemoryProperties2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pMemoryProperties" in indict.keys():
         pMemoryProperties = indict["pMemoryProperties"]
    else: 
         pMemoryProperties = VkPhysicalDeviceMemoryProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceMemoryProperties2)
    retval = jvulkanLib.vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pMemoryProperties" : pMemoryProperties,"retval" : retval}
def vkGetPhysicalDeviceSparseImageFormatProperties2(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pFormatInfo" in indict.keys():
         pFormatInfo = indict["pFormatInfo"]
    else: 
         pFormatInfo = VkPhysicalDeviceSparseImageFormatInfo2()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkSparseImageFormatProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceSparseImageFormatProperties2)
    retval = jvulkanLib.vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pFormatInfo" : pFormatInfo,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkTrimCommandPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "commandPool" in indict.keys():
         commandPool = indict["commandPool"]
    else: 
         commandPool = VkCommandPool_T()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkTrimCommandPool)
    retval = jvulkanLib.vkTrimCommandPool(device, commandPool, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"commandPool" : commandPool,"flags" : flags,"retval" : retval}
def vkGetDeviceQueue2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pQueueInfo" in indict.keys():
         pQueueInfo = indict["pQueueInfo"]
    else: 
         pQueueInfo = VkDeviceQueueInfo2()
    if "pQueue" in indict.keys():
         pQueue = indict["pQueue"]
    else: 
         pQueue = pointer(VkQueue_T())
    print(jvulkanLib.vkGetDeviceQueue2)
    retval = jvulkanLib.vkGetDeviceQueue2(device, pQueueInfo, pQueue)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pQueueInfo" : pQueueInfo,"pQueue" : pQueue,"retval" : retval}
def vkCreateSamplerYcbcrConversion(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkSamplerYcbcrConversionCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pYcbcrConversion" in indict.keys():
         pYcbcrConversion = indict["pYcbcrConversion"]
    else: 
         pYcbcrConversion = pointer(VkSamplerYcbcrConversion_T())
    print(jvulkanLib.vkCreateSamplerYcbcrConversion)
    retval = jvulkanLib.vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pYcbcrConversion" : pYcbcrConversion,"retval" : retval}
def vkDestroySamplerYcbcrConversion(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "ycbcrConversion" in indict.keys():
         ycbcrConversion = indict["ycbcrConversion"]
    else: 
         ycbcrConversion = VkSamplerYcbcrConversion_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroySamplerYcbcrConversion)
    retval = jvulkanLib.vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"ycbcrConversion" : ycbcrConversion,"pAllocator" : pAllocator,"retval" : retval}
def vkCreateDescriptorUpdateTemplate(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDescriptorUpdateTemplateCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pDescriptorUpdateTemplate" in indict.keys():
         pDescriptorUpdateTemplate = indict["pDescriptorUpdateTemplate"]
    else: 
         pDescriptorUpdateTemplate = pointer(VkDescriptorUpdateTemplate_T())
    print(jvulkanLib.vkCreateDescriptorUpdateTemplate)
    retval = jvulkanLib.vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pDescriptorUpdateTemplate" : pDescriptorUpdateTemplate,"retval" : retval}
def vkDestroyDescriptorUpdateTemplate(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorUpdateTemplate" in indict.keys():
         descriptorUpdateTemplate = indict["descriptorUpdateTemplate"]
    else: 
         descriptorUpdateTemplate = VkDescriptorUpdateTemplate_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDescriptorUpdateTemplate)
    retval = jvulkanLib.vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorUpdateTemplate" : descriptorUpdateTemplate,"pAllocator" : pAllocator,"retval" : retval}
def vkUpdateDescriptorSetWithTemplate(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorSet" in indict.keys():
         descriptorSet = indict["descriptorSet"]
    else: 
         descriptorSet = VkDescriptorSet_T()
    if "descriptorUpdateTemplate" in indict.keys():
         descriptorUpdateTemplate = indict["descriptorUpdateTemplate"]
    else: 
         descriptorUpdateTemplate = VkDescriptorUpdateTemplate_T()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkUpdateDescriptorSetWithTemplate)
    retval = jvulkanLib.vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorSet" : descriptorSet,"descriptorUpdateTemplate" : descriptorUpdateTemplate,"pData" : pData,"retval" : retval}
def vkGetPhysicalDeviceExternalBufferProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pExternalBufferInfo" in indict.keys():
         pExternalBufferInfo = indict["pExternalBufferInfo"]
    else: 
         pExternalBufferInfo = VkPhysicalDeviceExternalBufferInfo()
    if "pExternalBufferProperties" in indict.keys():
         pExternalBufferProperties = indict["pExternalBufferProperties"]
    else: 
         pExternalBufferProperties = VkExternalBufferProperties()
    print(jvulkanLib.vkGetPhysicalDeviceExternalBufferProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pExternalBufferInfo" : pExternalBufferInfo,"pExternalBufferProperties" : pExternalBufferProperties,"retval" : retval}
def vkGetPhysicalDeviceExternalFenceProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pExternalFenceInfo" in indict.keys():
         pExternalFenceInfo = indict["pExternalFenceInfo"]
    else: 
         pExternalFenceInfo = VkPhysicalDeviceExternalFenceInfo()
    if "pExternalFenceProperties" in indict.keys():
         pExternalFenceProperties = indict["pExternalFenceProperties"]
    else: 
         pExternalFenceProperties = VkExternalFenceProperties()
    print(jvulkanLib.vkGetPhysicalDeviceExternalFenceProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pExternalFenceInfo" : pExternalFenceInfo,"pExternalFenceProperties" : pExternalFenceProperties,"retval" : retval}
def vkGetPhysicalDeviceExternalSemaphoreProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pExternalSemaphoreInfo" in indict.keys():
         pExternalSemaphoreInfo = indict["pExternalSemaphoreInfo"]
    else: 
         pExternalSemaphoreInfo = VkPhysicalDeviceExternalSemaphoreInfo()
    if "pExternalSemaphoreProperties" in indict.keys():
         pExternalSemaphoreProperties = indict["pExternalSemaphoreProperties"]
    else: 
         pExternalSemaphoreProperties = VkExternalSemaphoreProperties()
    print(jvulkanLib.vkGetPhysicalDeviceExternalSemaphoreProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pExternalSemaphoreInfo" : pExternalSemaphoreInfo,"pExternalSemaphoreProperties" : pExternalSemaphoreProperties,"retval" : retval}
def vkGetDescriptorSetLayoutSupport(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDescriptorSetLayoutCreateInfo()
    if "pSupport" in indict.keys():
         pSupport = indict["pSupport"]
    else: 
         pSupport = VkDescriptorSetLayoutSupport()
    print(jvulkanLib.vkGetDescriptorSetLayoutSupport)
    retval = jvulkanLib.vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pSupport" : pSupport,"retval" : retval}
def vkCmdDrawIndirectCount(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndirectCount)
    retval = jvulkanLib.vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkCmdDrawIndexedIndirectCount(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndexedIndirectCount)
    retval = jvulkanLib.vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkCreateRenderPass2(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkRenderPassCreateInfo2()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pRenderPass" in indict.keys():
         pRenderPass = indict["pRenderPass"]
    else: 
         pRenderPass = pointer(VkRenderPass_T())
    print(jvulkanLib.vkCreateRenderPass2)
    retval = jvulkanLib.vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pRenderPass" : pRenderPass,"retval" : retval}
def vkCmdBeginRenderPass2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRenderPassBegin" in indict.keys():
         pRenderPassBegin = indict["pRenderPassBegin"]
    else: 
         pRenderPassBegin = VkRenderPassBeginInfo()
    if "pSubpassBeginInfo" in indict.keys():
         pSubpassBeginInfo = indict["pSubpassBeginInfo"]
    else: 
         pSubpassBeginInfo = VkSubpassBeginInfo()
    print(jvulkanLib.vkCmdBeginRenderPass2)
    retval = jvulkanLib.vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRenderPassBegin" : pRenderPassBegin,"pSubpassBeginInfo" : pSubpassBeginInfo,"retval" : retval}
def vkCmdNextSubpass2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pSubpassBeginInfo" in indict.keys():
         pSubpassBeginInfo = indict["pSubpassBeginInfo"]
    else: 
         pSubpassBeginInfo = VkSubpassBeginInfo()
    if "pSubpassEndInfo" in indict.keys():
         pSubpassEndInfo = indict["pSubpassEndInfo"]
    else: 
         pSubpassEndInfo = VkSubpassEndInfo()
    print(jvulkanLib.vkCmdNextSubpass2)
    retval = jvulkanLib.vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pSubpassBeginInfo" : pSubpassBeginInfo,"pSubpassEndInfo" : pSubpassEndInfo,"retval" : retval}
def vkCmdEndRenderPass2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pSubpassEndInfo" in indict.keys():
         pSubpassEndInfo = indict["pSubpassEndInfo"]
    else: 
         pSubpassEndInfo = VkSubpassEndInfo()
    print(jvulkanLib.vkCmdEndRenderPass2)
    retval = jvulkanLib.vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pSubpassEndInfo" : pSubpassEndInfo,"retval" : retval}
def vkResetQueryPool(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    if "queryCount" in indict.keys():
         queryCount = indict["queryCount"]
    else: 
         queryCount = c_uint()
    print(jvulkanLib.vkResetQueryPool)
    retval = jvulkanLib.vkResetQueryPool(device, queryPool, firstQuery, queryCount)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"queryPool" : queryPool,"firstQuery" : firstQuery,"queryCount" : queryCount,"retval" : retval}
def vkGetSemaphoreCounterValue(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "semaphore" in indict.keys():
         semaphore = indict["semaphore"]
    else: 
         semaphore = VkSemaphore_T()
    if "pValue" in indict.keys():
         pValue = indict["pValue"]
    else: 
         pValue = pointer(c_ulong())
    print(jvulkanLib.vkGetSemaphoreCounterValue)
    retval = jvulkanLib.vkGetSemaphoreCounterValue(device, semaphore, pValue)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"semaphore" : semaphore,"pValue" : pValue,"retval" : retval}
def vkWaitSemaphores(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pWaitInfo" in indict.keys():
         pWaitInfo = indict["pWaitInfo"]
    else: 
         pWaitInfo = VkSemaphoreWaitInfo()
    if "timeout" in indict.keys():
         timeout = indict["timeout"]
    else: 
         timeout = c_ulong()
    print(jvulkanLib.vkWaitSemaphores)
    retval = jvulkanLib.vkWaitSemaphores(device, pWaitInfo, timeout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pWaitInfo" : pWaitInfo,"timeout" : timeout,"retval" : retval}
def vkSignalSemaphore(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pSignalInfo" in indict.keys():
         pSignalInfo = indict["pSignalInfo"]
    else: 
         pSignalInfo = VkSemaphoreSignalInfo()
    print(jvulkanLib.vkSignalSemaphore)
    retval = jvulkanLib.vkSignalSemaphore(device, pSignalInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pSignalInfo" : pSignalInfo,"retval" : retval}
def vkGetBufferDeviceAddress(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferDeviceAddressInfo()
    print(jvulkanLib.vkGetBufferDeviceAddress)
    retval = jvulkanLib.vkGetBufferDeviceAddress(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetBufferOpaqueCaptureAddress(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferDeviceAddressInfo()
    print(jvulkanLib.vkGetBufferOpaqueCaptureAddress)
    retval = jvulkanLib.vkGetBufferOpaqueCaptureAddress(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetDeviceMemoryOpaqueCaptureAddress(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceMemoryOpaqueCaptureAddressInfo()
    print(jvulkanLib.vkGetDeviceMemoryOpaqueCaptureAddress)
    retval = jvulkanLib.vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetPhysicalDeviceToolProperties(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pToolCount" in indict.keys():
         pToolCount = indict["pToolCount"]
    else: 
         pToolCount = pointer(c_uint())
    if "pToolProperties" in indict.keys():
         pToolProperties = indict["pToolProperties"]
    else: 
         pToolProperties = VkPhysicalDeviceToolProperties()
    print(jvulkanLib.vkGetPhysicalDeviceToolProperties)
    retval = jvulkanLib.vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pToolCount" : pToolCount,"pToolProperties" : pToolProperties,"retval" : retval}
def vkCreatePrivateDataSlot(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkPrivateDataSlotCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPrivateDataSlot" in indict.keys():
         pPrivateDataSlot = indict["pPrivateDataSlot"]
    else: 
         pPrivateDataSlot = pointer(VkPrivateDataSlot_T())
    print(jvulkanLib.vkCreatePrivateDataSlot)
    retval = jvulkanLib.vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pPrivateDataSlot" : pPrivateDataSlot,"retval" : retval}
def vkDestroyPrivateDataSlot(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "privateDataSlot" in indict.keys():
         privateDataSlot = indict["privateDataSlot"]
    else: 
         privateDataSlot = VkPrivateDataSlot_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyPrivateDataSlot)
    retval = jvulkanLib.vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"privateDataSlot" : privateDataSlot,"pAllocator" : pAllocator,"retval" : retval}
def vkSetPrivateData(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "objectType" in indict.keys():
         objectType = indict["objectType"]
    else: 
         objectType = c_int()
    if "objectHandle" in indict.keys():
         objectHandle = indict["objectHandle"]
    else: 
         objectHandle = c_ulong()
    if "privateDataSlot" in indict.keys():
         privateDataSlot = indict["privateDataSlot"]
    else: 
         privateDataSlot = VkPrivateDataSlot_T()
    if "data" in indict.keys():
         data = indict["data"]
    else: 
         data = c_ulong()
    print(jvulkanLib.vkSetPrivateData)
    retval = jvulkanLib.vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"objectType" : objectType,"objectHandle" : objectHandle,"privateDataSlot" : privateDataSlot,"data" : data,"retval" : retval}
def vkGetPrivateData(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "objectType" in indict.keys():
         objectType = indict["objectType"]
    else: 
         objectType = c_int()
    if "objectHandle" in indict.keys():
         objectHandle = indict["objectHandle"]
    else: 
         objectHandle = c_ulong()
    if "privateDataSlot" in indict.keys():
         privateDataSlot = indict["privateDataSlot"]
    else: 
         privateDataSlot = VkPrivateDataSlot_T()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = pointer(c_ulong())
    print(jvulkanLib.vkGetPrivateData)
    retval = jvulkanLib.vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"objectType" : objectType,"objectHandle" : objectHandle,"privateDataSlot" : privateDataSlot,"pData" : pData,"retval" : retval}
def vkCmdSetEvent2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "pDependencyInfo" in indict.keys():
         pDependencyInfo = indict["pDependencyInfo"]
    else: 
         pDependencyInfo = VkDependencyInfo()
    print(jvulkanLib.vkCmdSetEvent2)
    retval = jvulkanLib.vkCmdSetEvent2(commandBuffer, event, pDependencyInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"event" : event,"pDependencyInfo" : pDependencyInfo,"retval" : retval}
def vkCmdResetEvent2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "stageMask" in indict.keys():
         stageMask = indict["stageMask"]
    else: 
         stageMask = c_ulong()
    print(jvulkanLib.vkCmdResetEvent2)
    retval = jvulkanLib.vkCmdResetEvent2(commandBuffer, event, stageMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"event" : event,"stageMask" : stageMask,"retval" : retval}
def vkCmdWaitEvents2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "eventCount" in indict.keys():
         eventCount = indict["eventCount"]
    else: 
         eventCount = c_uint()
    if "pEvents" in indict.keys():
         pEvents = indict["pEvents"]
    else: 
         pEvents = pointer(VkEvent_T())
    if "pDependencyInfos" in indict.keys():
         pDependencyInfos = indict["pDependencyInfos"]
    else: 
         pDependencyInfos = VkDependencyInfo()
    print(jvulkanLib.vkCmdWaitEvents2)
    retval = jvulkanLib.vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"eventCount" : eventCount,"pEvents" : pEvents,"pDependencyInfos" : pDependencyInfos,"retval" : retval}
def vkCmdPipelineBarrier2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pDependencyInfo" in indict.keys():
         pDependencyInfo = indict["pDependencyInfo"]
    else: 
         pDependencyInfo = VkDependencyInfo()
    print(jvulkanLib.vkCmdPipelineBarrier2)
    retval = jvulkanLib.vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pDependencyInfo" : pDependencyInfo,"retval" : retval}
def vkCmdWriteTimestamp2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "stage" in indict.keys():
         stage = indict["stage"]
    else: 
         stage = c_ulong()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    print(jvulkanLib.vkCmdWriteTimestamp2)
    retval = jvulkanLib.vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"stage" : stage,"queryPool" : queryPool,"query" : query,"retval" : retval}
def vkQueueSubmit2(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "submitCount" in indict.keys():
         submitCount = indict["submitCount"]
    else: 
         submitCount = c_uint()
    if "pSubmits" in indict.keys():
         pSubmits = indict["pSubmits"]
    else: 
         pSubmits = VkSubmitInfo2()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    print(jvulkanLib.vkQueueSubmit2)
    retval = jvulkanLib.vkQueueSubmit2(queue, submitCount, pSubmits, fence)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"submitCount" : submitCount,"pSubmits" : pSubmits,"fence" : fence,"retval" : retval}
def vkCmdCopyBuffer2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyBufferInfo" in indict.keys():
         pCopyBufferInfo = indict["pCopyBufferInfo"]
    else: 
         pCopyBufferInfo = VkCopyBufferInfo2()
    print(jvulkanLib.vkCmdCopyBuffer2)
    retval = jvulkanLib.vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyBufferInfo" : pCopyBufferInfo,"retval" : retval}
def vkCmdCopyImage2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyImageInfo" in indict.keys():
         pCopyImageInfo = indict["pCopyImageInfo"]
    else: 
         pCopyImageInfo = VkCopyImageInfo2()
    print(jvulkanLib.vkCmdCopyImage2)
    retval = jvulkanLib.vkCmdCopyImage2(commandBuffer, pCopyImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyImageInfo" : pCopyImageInfo,"retval" : retval}
def vkCmdCopyBufferToImage2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyBufferToImageInfo" in indict.keys():
         pCopyBufferToImageInfo = indict["pCopyBufferToImageInfo"]
    else: 
         pCopyBufferToImageInfo = VkCopyBufferToImageInfo2()
    print(jvulkanLib.vkCmdCopyBufferToImage2)
    retval = jvulkanLib.vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyBufferToImageInfo" : pCopyBufferToImageInfo,"retval" : retval}
def vkCmdCopyImageToBuffer2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyImageToBufferInfo" in indict.keys():
         pCopyImageToBufferInfo = indict["pCopyImageToBufferInfo"]
    else: 
         pCopyImageToBufferInfo = VkCopyImageToBufferInfo2()
    print(jvulkanLib.vkCmdCopyImageToBuffer2)
    retval = jvulkanLib.vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyImageToBufferInfo" : pCopyImageToBufferInfo,"retval" : retval}
def vkCmdBlitImage2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pBlitImageInfo" in indict.keys():
         pBlitImageInfo = indict["pBlitImageInfo"]
    else: 
         pBlitImageInfo = VkBlitImageInfo2()
    print(jvulkanLib.vkCmdBlitImage2)
    retval = jvulkanLib.vkCmdBlitImage2(commandBuffer, pBlitImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pBlitImageInfo" : pBlitImageInfo,"retval" : retval}
def vkCmdResolveImage2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pResolveImageInfo" in indict.keys():
         pResolveImageInfo = indict["pResolveImageInfo"]
    else: 
         pResolveImageInfo = VkResolveImageInfo2()
    print(jvulkanLib.vkCmdResolveImage2)
    retval = jvulkanLib.vkCmdResolveImage2(commandBuffer, pResolveImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pResolveImageInfo" : pResolveImageInfo,"retval" : retval}
def vkCmdBeginRendering(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRenderingInfo" in indict.keys():
         pRenderingInfo = indict["pRenderingInfo"]
    else: 
         pRenderingInfo = VkRenderingInfo()
    print(jvulkanLib.vkCmdBeginRendering)
    retval = jvulkanLib.vkCmdBeginRendering(commandBuffer, pRenderingInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRenderingInfo" : pRenderingInfo,"retval" : retval}
def vkCmdEndRendering(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdEndRendering)
    retval = jvulkanLib.vkCmdEndRendering(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkCmdSetCullMode(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "cullMode" in indict.keys():
         cullMode = indict["cullMode"]
    else: 
         cullMode = c_uint()
    print(jvulkanLib.vkCmdSetCullMode)
    retval = jvulkanLib.vkCmdSetCullMode(commandBuffer, cullMode)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"cullMode" : cullMode,"retval" : retval}
def vkCmdSetFrontFace(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "frontFace" in indict.keys():
         frontFace = indict["frontFace"]
    else: 
         frontFace = c_int()
    print(jvulkanLib.vkCmdSetFrontFace)
    retval = jvulkanLib.vkCmdSetFrontFace(commandBuffer, frontFace)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"frontFace" : frontFace,"retval" : retval}
def vkCmdSetPrimitiveTopology(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "primitiveTopology" in indict.keys():
         primitiveTopology = indict["primitiveTopology"]
    else: 
         primitiveTopology = c_int()
    print(jvulkanLib.vkCmdSetPrimitiveTopology)
    retval = jvulkanLib.vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"primitiveTopology" : primitiveTopology,"retval" : retval}
def vkCmdSetViewportWithCount(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "viewportCount" in indict.keys():
         viewportCount = indict["viewportCount"]
    else: 
         viewportCount = c_uint()
    if "pViewports" in indict.keys():
         pViewports = indict["pViewports"]
    else: 
         pViewports = VkViewport()
    print(jvulkanLib.vkCmdSetViewportWithCount)
    retval = jvulkanLib.vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"viewportCount" : viewportCount,"pViewports" : pViewports,"retval" : retval}
def vkCmdSetScissorWithCount(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "scissorCount" in indict.keys():
         scissorCount = indict["scissorCount"]
    else: 
         scissorCount = c_uint()
    if "pScissors" in indict.keys():
         pScissors = indict["pScissors"]
    else: 
         pScissors = VkRect2D()
    print(jvulkanLib.vkCmdSetScissorWithCount)
    retval = jvulkanLib.vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"scissorCount" : scissorCount,"pScissors" : pScissors,"retval" : retval}
def vkCmdBindVertexBuffers2(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstBinding" in indict.keys():
         firstBinding = indict["firstBinding"]
    else: 
         firstBinding = c_uint()
    if "bindingCount" in indict.keys():
         bindingCount = indict["bindingCount"]
    else: 
         bindingCount = c_uint()
    if "pBuffers" in indict.keys():
         pBuffers = indict["pBuffers"]
    else: 
         pBuffers = pointer(VkBuffer_T())
    if "pOffsets" in indict.keys():
         pOffsets = indict["pOffsets"]
    else: 
         pOffsets = pointer(c_ulong())
    if "pSizes" in indict.keys():
         pSizes = indict["pSizes"]
    else: 
         pSizes = pointer(c_ulong())
    if "pStrides" in indict.keys():
         pStrides = indict["pStrides"]
    else: 
         pStrides = pointer(c_ulong())
    print(jvulkanLib.vkCmdBindVertexBuffers2)
    retval = jvulkanLib.vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstBinding" : firstBinding,"bindingCount" : bindingCount,"pBuffers" : pBuffers,"pOffsets" : pOffsets,"pSizes" : pSizes,"pStrides" : pStrides,"retval" : retval}
def vkCmdSetDepthTestEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthTestEnable" in indict.keys():
         depthTestEnable = indict["depthTestEnable"]
    else: 
         depthTestEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthTestEnable)
    retval = jvulkanLib.vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthTestEnable" : depthTestEnable,"retval" : retval}
def vkCmdSetDepthWriteEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthWriteEnable" in indict.keys():
         depthWriteEnable = indict["depthWriteEnable"]
    else: 
         depthWriteEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthWriteEnable)
    retval = jvulkanLib.vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthWriteEnable" : depthWriteEnable,"retval" : retval}
def vkCmdSetDepthCompareOp(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthCompareOp" in indict.keys():
         depthCompareOp = indict["depthCompareOp"]
    else: 
         depthCompareOp = c_int()
    print(jvulkanLib.vkCmdSetDepthCompareOp)
    retval = jvulkanLib.vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthCompareOp" : depthCompareOp,"retval" : retval}
def vkCmdSetDepthBoundsTestEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthBoundsTestEnable" in indict.keys():
         depthBoundsTestEnable = indict["depthBoundsTestEnable"]
    else: 
         depthBoundsTestEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthBoundsTestEnable)
    retval = jvulkanLib.vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthBoundsTestEnable" : depthBoundsTestEnable,"retval" : retval}
def vkCmdSetStencilTestEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "stencilTestEnable" in indict.keys():
         stencilTestEnable = indict["stencilTestEnable"]
    else: 
         stencilTestEnable = c_uint()
    print(jvulkanLib.vkCmdSetStencilTestEnable)
    retval = jvulkanLib.vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"stencilTestEnable" : stencilTestEnable,"retval" : retval}
def vkCmdSetStencilOp(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "faceMask" in indict.keys():
         faceMask = indict["faceMask"]
    else: 
         faceMask = c_uint()
    if "failOp" in indict.keys():
         failOp = indict["failOp"]
    else: 
         failOp = c_int()
    if "passOp" in indict.keys():
         passOp = indict["passOp"]
    else: 
         passOp = c_int()
    if "depthFailOp" in indict.keys():
         depthFailOp = indict["depthFailOp"]
    else: 
         depthFailOp = c_int()
    if "compareOp" in indict.keys():
         compareOp = indict["compareOp"]
    else: 
         compareOp = c_int()
    print(jvulkanLib.vkCmdSetStencilOp)
    retval = jvulkanLib.vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"faceMask" : faceMask,"failOp" : failOp,"passOp" : passOp,"depthFailOp" : depthFailOp,"compareOp" : compareOp,"retval" : retval}
def vkCmdSetRasterizerDiscardEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "rasterizerDiscardEnable" in indict.keys():
         rasterizerDiscardEnable = indict["rasterizerDiscardEnable"]
    else: 
         rasterizerDiscardEnable = c_uint()
    print(jvulkanLib.vkCmdSetRasterizerDiscardEnable)
    retval = jvulkanLib.vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"rasterizerDiscardEnable" : rasterizerDiscardEnable,"retval" : retval}
def vkCmdSetDepthBiasEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthBiasEnable" in indict.keys():
         depthBiasEnable = indict["depthBiasEnable"]
    else: 
         depthBiasEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthBiasEnable)
    retval = jvulkanLib.vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthBiasEnable" : depthBiasEnable,"retval" : retval}
def vkCmdSetPrimitiveRestartEnable(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "primitiveRestartEnable" in indict.keys():
         primitiveRestartEnable = indict["primitiveRestartEnable"]
    else: 
         primitiveRestartEnable = c_uint()
    print(jvulkanLib.vkCmdSetPrimitiveRestartEnable)
    retval = jvulkanLib.vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"primitiveRestartEnable" : primitiveRestartEnable,"retval" : retval}
def vkGetDeviceBufferMemoryRequirements(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceBufferMemoryRequirements()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetDeviceBufferMemoryRequirements)
    retval = jvulkanLib.vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetDeviceImageMemoryRequirements(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceImageMemoryRequirements()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetDeviceImageMemoryRequirements)
    retval = jvulkanLib.vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetDeviceImageSparseMemoryRequirements(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceImageMemoryRequirements()
    if "pSparseMemoryRequirementCount" in indict.keys():
         pSparseMemoryRequirementCount = indict["pSparseMemoryRequirementCount"]
    else: 
         pSparseMemoryRequirementCount = pointer(c_uint())
    if "pSparseMemoryRequirements" in indict.keys():
         pSparseMemoryRequirements = indict["pSparseMemoryRequirements"]
    else: 
         pSparseMemoryRequirements = VkSparseImageMemoryRequirements2()
    print(jvulkanLib.vkGetDeviceImageSparseMemoryRequirements)
    retval = jvulkanLib.vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pSparseMemoryRequirementCount" : pSparseMemoryRequirementCount,"pSparseMemoryRequirements" : pSparseMemoryRequirements,"retval" : retval}
def vkDestroySurfaceKHR(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroySurfaceKHR)
    retval = jvulkanLib.vkDestroySurfaceKHR(instance, surface, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"surface" : surface,"pAllocator" : pAllocator,"retval" : retval}
def vkGetPhysicalDeviceSurfaceSupportKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "queueFamilyIndex" in indict.keys():
         queueFamilyIndex = indict["queueFamilyIndex"]
    else: 
         queueFamilyIndex = c_uint()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pSupported" in indict.keys():
         pSupported = indict["pSupported"]
    else: 
         pSupported = pointer(c_uint())
    print(jvulkanLib.vkGetPhysicalDeviceSurfaceSupportKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"queueFamilyIndex" : queueFamilyIndex,"surface" : surface,"pSupported" : pSupported,"retval" : retval}
def vkGetPhysicalDeviceSurfaceCapabilitiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pSurfaceCapabilities" in indict.keys():
         pSurfaceCapabilities = indict["pSurfaceCapabilities"]
    else: 
         pSurfaceCapabilities = VkSurfaceCapabilitiesKHR()
    print(jvulkanLib.vkGetPhysicalDeviceSurfaceCapabilitiesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"surface" : surface,"pSurfaceCapabilities" : pSurfaceCapabilities,"retval" : retval}
def vkGetPhysicalDeviceSurfaceFormatsKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pSurfaceFormatCount" in indict.keys():
         pSurfaceFormatCount = indict["pSurfaceFormatCount"]
    else: 
         pSurfaceFormatCount = pointer(c_uint())
    if "pSurfaceFormats" in indict.keys():
         pSurfaceFormats = indict["pSurfaceFormats"]
    else: 
         pSurfaceFormats = VkSurfaceFormatKHR()
    print(jvulkanLib.vkGetPhysicalDeviceSurfaceFormatsKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"surface" : surface,"pSurfaceFormatCount" : pSurfaceFormatCount,"pSurfaceFormats" : pSurfaceFormats,"retval" : retval}
def vkGetPhysicalDeviceSurfacePresentModesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pPresentModeCount" in indict.keys():
         pPresentModeCount = indict["pPresentModeCount"]
    else: 
         pPresentModeCount = pointer(c_uint())
    if "pPresentModes" in indict.keys():
         pPresentModes = indict["pPresentModes"]
    else: 
         pPresentModes = pointer(c_int())
    print(jvulkanLib.vkGetPhysicalDeviceSurfacePresentModesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"surface" : surface,"pPresentModeCount" : pPresentModeCount,"pPresentModes" : pPresentModes,"retval" : retval}
def vkCreateSwapchainKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkSwapchainCreateInfoKHR()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSwapchain" in indict.keys():
         pSwapchain = indict["pSwapchain"]
    else: 
         pSwapchain = pointer(VkSwapchainKHR_T())
    print(jvulkanLib.vkCreateSwapchainKHR)
    retval = jvulkanLib.vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pSwapchain" : pSwapchain,"retval" : retval}
def vkDestroySwapchainKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroySwapchainKHR)
    retval = jvulkanLib.vkDestroySwapchainKHR(device, swapchain, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"pAllocator" : pAllocator,"retval" : retval}
def vkGetSwapchainImagesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "pSwapchainImageCount" in indict.keys():
         pSwapchainImageCount = indict["pSwapchainImageCount"]
    else: 
         pSwapchainImageCount = pointer(c_uint())
    if "pSwapchainImages" in indict.keys():
         pSwapchainImages = indict["pSwapchainImages"]
    else: 
         pSwapchainImages = pointer(VkImage_T())
    print(jvulkanLib.vkGetSwapchainImagesKHR)
    retval = jvulkanLib.vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"pSwapchainImageCount" : pSwapchainImageCount,"pSwapchainImages" : pSwapchainImages,"retval" : retval}
def vkAcquireNextImageKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "timeout" in indict.keys():
         timeout = indict["timeout"]
    else: 
         timeout = c_ulong()
    if "semaphore" in indict.keys():
         semaphore = indict["semaphore"]
    else: 
         semaphore = VkSemaphore_T()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    if "pImageIndex" in indict.keys():
         pImageIndex = indict["pImageIndex"]
    else: 
         pImageIndex = pointer(c_uint())
    print(jvulkanLib.vkAcquireNextImageKHR)
    retval = jvulkanLib.vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"timeout" : timeout,"semaphore" : semaphore,"fence" : fence,"pImageIndex" : pImageIndex,"retval" : retval}
def vkQueuePresentKHR(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "pPresentInfo" in indict.keys():
         pPresentInfo = indict["pPresentInfo"]
    else: 
         pPresentInfo = VkPresentInfoKHR()
    print(jvulkanLib.vkQueuePresentKHR)
    retval = jvulkanLib.vkQueuePresentKHR(queue, pPresentInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"pPresentInfo" : pPresentInfo,"retval" : retval}
def vkGetDeviceGroupPresentCapabilitiesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pDeviceGroupPresentCapabilities" in indict.keys():
         pDeviceGroupPresentCapabilities = indict["pDeviceGroupPresentCapabilities"]
    else: 
         pDeviceGroupPresentCapabilities = VkDeviceGroupPresentCapabilitiesKHR()
    print(jvulkanLib.vkGetDeviceGroupPresentCapabilitiesKHR)
    retval = jvulkanLib.vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pDeviceGroupPresentCapabilities" : pDeviceGroupPresentCapabilities,"retval" : retval}
def vkGetDeviceGroupSurfacePresentModesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pModes" in indict.keys():
         pModes = indict["pModes"]
    else: 
         pModes = pointer(c_uint())
    print(jvulkanLib.vkGetDeviceGroupSurfacePresentModesKHR)
    retval = jvulkanLib.vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"surface" : surface,"pModes" : pModes,"retval" : retval}
def vkGetPhysicalDevicePresentRectanglesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pRectCount" in indict.keys():
         pRectCount = indict["pRectCount"]
    else: 
         pRectCount = pointer(c_uint())
    if "pRects" in indict.keys():
         pRects = indict["pRects"]
    else: 
         pRects = VkRect2D()
    print(jvulkanLib.vkGetPhysicalDevicePresentRectanglesKHR)
    retval = jvulkanLib.vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"surface" : surface,"pRectCount" : pRectCount,"pRects" : pRects,"retval" : retval}
def vkAcquireNextImage2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAcquireInfo" in indict.keys():
         pAcquireInfo = indict["pAcquireInfo"]
    else: 
         pAcquireInfo = VkAcquireNextImageInfoKHR()
    if "pImageIndex" in indict.keys():
         pImageIndex = indict["pImageIndex"]
    else: 
         pImageIndex = pointer(c_uint())
    print(jvulkanLib.vkAcquireNextImage2KHR)
    retval = jvulkanLib.vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAcquireInfo" : pAcquireInfo,"pImageIndex" : pImageIndex,"retval" : retval}
def vkGetPhysicalDeviceDisplayPropertiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkDisplayPropertiesKHR()
    print(jvulkanLib.vkGetPhysicalDeviceDisplayPropertiesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetPhysicalDeviceDisplayPlanePropertiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkDisplayPlanePropertiesKHR()
    print(jvulkanLib.vkGetPhysicalDeviceDisplayPlanePropertiesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetDisplayPlaneSupportedDisplaysKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "planeIndex" in indict.keys():
         planeIndex = indict["planeIndex"]
    else: 
         planeIndex = c_uint()
    if "pDisplayCount" in indict.keys():
         pDisplayCount = indict["pDisplayCount"]
    else: 
         pDisplayCount = pointer(c_uint())
    if "pDisplays" in indict.keys():
         pDisplays = indict["pDisplays"]
    else: 
         pDisplays = pointer(VkDisplayKHR_T())
    print(jvulkanLib.vkGetDisplayPlaneSupportedDisplaysKHR)
    retval = jvulkanLib.vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"planeIndex" : planeIndex,"pDisplayCount" : pDisplayCount,"pDisplays" : pDisplays,"retval" : retval}
def vkGetDisplayModePropertiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkDisplayModePropertiesKHR()
    print(jvulkanLib.vkGetDisplayModePropertiesKHR)
    retval = jvulkanLib.vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"display" : display,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkCreateDisplayModeKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDisplayModeCreateInfoKHR()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pMode" in indict.keys():
         pMode = indict["pMode"]
    else: 
         pMode = pointer(VkDisplayModeKHR_T())
    print(jvulkanLib.vkCreateDisplayModeKHR)
    retval = jvulkanLib.vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"display" : display,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pMode" : pMode,"retval" : retval}
def vkGetDisplayPlaneCapabilitiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "mode" in indict.keys():
         mode = indict["mode"]
    else: 
         mode = VkDisplayModeKHR_T()
    if "planeIndex" in indict.keys():
         planeIndex = indict["planeIndex"]
    else: 
         planeIndex = c_uint()
    if "pCapabilities" in indict.keys():
         pCapabilities = indict["pCapabilities"]
    else: 
         pCapabilities = VkDisplayPlaneCapabilitiesKHR()
    print(jvulkanLib.vkGetDisplayPlaneCapabilitiesKHR)
    retval = jvulkanLib.vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"mode" : mode,"planeIndex" : planeIndex,"pCapabilities" : pCapabilities,"retval" : retval}
def vkCreateDisplayPlaneSurfaceKHR(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDisplaySurfaceCreateInfoKHR()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSurface" in indict.keys():
         pSurface = indict["pSurface"]
    else: 
         pSurface = pointer(VkSurfaceKHR_T())
    print(jvulkanLib.vkCreateDisplayPlaneSurfaceKHR)
    retval = jvulkanLib.vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pSurface" : pSurface,"retval" : retval}
def vkCreateSharedSwapchainsKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchainCount" in indict.keys():
         swapchainCount = indict["swapchainCount"]
    else: 
         swapchainCount = c_uint()
    if "pCreateInfos" in indict.keys():
         pCreateInfos = indict["pCreateInfos"]
    else: 
         pCreateInfos = VkSwapchainCreateInfoKHR()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSwapchains" in indict.keys():
         pSwapchains = indict["pSwapchains"]
    else: 
         pSwapchains = pointer(VkSwapchainKHR_T())
    print(jvulkanLib.vkCreateSharedSwapchainsKHR)
    retval = jvulkanLib.vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchainCount" : swapchainCount,"pCreateInfos" : pCreateInfos,"pAllocator" : pAllocator,"pSwapchains" : pSwapchains,"retval" : retval}
def vkCmdBeginRenderingKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRenderingInfo" in indict.keys():
         pRenderingInfo = indict["pRenderingInfo"]
    else: 
         pRenderingInfo = VkRenderingInfo()
    print(jvulkanLib.vkCmdBeginRenderingKHR)
    retval = jvulkanLib.vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRenderingInfo" : pRenderingInfo,"retval" : retval}
def vkCmdEndRenderingKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdEndRenderingKHR)
    retval = jvulkanLib.vkCmdEndRenderingKHR(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkGetPhysicalDeviceFeatures2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pFeatures" in indict.keys():
         pFeatures = indict["pFeatures"]
    else: 
         pFeatures = VkPhysicalDeviceFeatures2()
    print(jvulkanLib.vkGetPhysicalDeviceFeatures2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pFeatures" : pFeatures,"retval" : retval}
def vkGetPhysicalDeviceProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkPhysicalDeviceProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pProperties" : pProperties,"retval" : retval}
def vkGetPhysicalDeviceFormatProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "format" in indict.keys():
         format = indict["format"]
    else: 
         format = c_int()
    if "pFormatProperties" in indict.keys():
         pFormatProperties = indict["pFormatProperties"]
    else: 
         pFormatProperties = VkFormatProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceFormatProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"format" : format,"pFormatProperties" : pFormatProperties,"retval" : retval}
def vkGetPhysicalDeviceImageFormatProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pImageFormatInfo" in indict.keys():
         pImageFormatInfo = indict["pImageFormatInfo"]
    else: 
         pImageFormatInfo = VkPhysicalDeviceImageFormatInfo2()
    if "pImageFormatProperties" in indict.keys():
         pImageFormatProperties = indict["pImageFormatProperties"]
    else: 
         pImageFormatProperties = VkImageFormatProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceImageFormatProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pImageFormatInfo" : pImageFormatInfo,"pImageFormatProperties" : pImageFormatProperties,"retval" : retval}
def vkGetPhysicalDeviceQueueFamilyProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pQueueFamilyPropertyCount" in indict.keys():
         pQueueFamilyPropertyCount = indict["pQueueFamilyPropertyCount"]
    else: 
         pQueueFamilyPropertyCount = pointer(c_uint())
    if "pQueueFamilyProperties" in indict.keys():
         pQueueFamilyProperties = indict["pQueueFamilyProperties"]
    else: 
         pQueueFamilyProperties = VkQueueFamilyProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceQueueFamilyProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pQueueFamilyPropertyCount" : pQueueFamilyPropertyCount,"pQueueFamilyProperties" : pQueueFamilyProperties,"retval" : retval}
def vkGetPhysicalDeviceMemoryProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pMemoryProperties" in indict.keys():
         pMemoryProperties = indict["pMemoryProperties"]
    else: 
         pMemoryProperties = VkPhysicalDeviceMemoryProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceMemoryProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pMemoryProperties" : pMemoryProperties,"retval" : retval}
def vkGetPhysicalDeviceSparseImageFormatProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pFormatInfo" in indict.keys():
         pFormatInfo = indict["pFormatInfo"]
    else: 
         pFormatInfo = VkPhysicalDeviceSparseImageFormatInfo2()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkSparseImageFormatProperties2()
    print(jvulkanLib.vkGetPhysicalDeviceSparseImageFormatProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pFormatInfo" : pFormatInfo,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetDeviceGroupPeerMemoryFeaturesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "heapIndex" in indict.keys():
         heapIndex = indict["heapIndex"]
    else: 
         heapIndex = c_uint()
    if "localDeviceIndex" in indict.keys():
         localDeviceIndex = indict["localDeviceIndex"]
    else: 
         localDeviceIndex = c_uint()
    if "remoteDeviceIndex" in indict.keys():
         remoteDeviceIndex = indict["remoteDeviceIndex"]
    else: 
         remoteDeviceIndex = c_uint()
    if "pPeerMemoryFeatures" in indict.keys():
         pPeerMemoryFeatures = indict["pPeerMemoryFeatures"]
    else: 
         pPeerMemoryFeatures = pointer(c_uint())
    print(jvulkanLib.vkGetDeviceGroupPeerMemoryFeaturesKHR)
    retval = jvulkanLib.vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"heapIndex" : heapIndex,"localDeviceIndex" : localDeviceIndex,"remoteDeviceIndex" : remoteDeviceIndex,"pPeerMemoryFeatures" : pPeerMemoryFeatures,"retval" : retval}
def vkCmdSetDeviceMaskKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "deviceMask" in indict.keys():
         deviceMask = indict["deviceMask"]
    else: 
         deviceMask = c_uint()
    print(jvulkanLib.vkCmdSetDeviceMaskKHR)
    retval = jvulkanLib.vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"deviceMask" : deviceMask,"retval" : retval}
def vkCmdDispatchBaseKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "baseGroupX" in indict.keys():
         baseGroupX = indict["baseGroupX"]
    else: 
         baseGroupX = c_uint()
    if "baseGroupY" in indict.keys():
         baseGroupY = indict["baseGroupY"]
    else: 
         baseGroupY = c_uint()
    if "baseGroupZ" in indict.keys():
         baseGroupZ = indict["baseGroupZ"]
    else: 
         baseGroupZ = c_uint()
    if "groupCountX" in indict.keys():
         groupCountX = indict["groupCountX"]
    else: 
         groupCountX = c_uint()
    if "groupCountY" in indict.keys():
         groupCountY = indict["groupCountY"]
    else: 
         groupCountY = c_uint()
    if "groupCountZ" in indict.keys():
         groupCountZ = indict["groupCountZ"]
    else: 
         groupCountZ = c_uint()
    print(jvulkanLib.vkCmdDispatchBaseKHR)
    retval = jvulkanLib.vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"baseGroupX" : baseGroupX,"baseGroupY" : baseGroupY,"baseGroupZ" : baseGroupZ,"groupCountX" : groupCountX,"groupCountY" : groupCountY,"groupCountZ" : groupCountZ,"retval" : retval}
def vkTrimCommandPoolKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "commandPool" in indict.keys():
         commandPool = indict["commandPool"]
    else: 
         commandPool = VkCommandPool_T()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    print(jvulkanLib.vkTrimCommandPoolKHR)
    retval = jvulkanLib.vkTrimCommandPoolKHR(device, commandPool, flags)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"commandPool" : commandPool,"flags" : flags,"retval" : retval}
def vkEnumeratePhysicalDeviceGroupsKHR(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pPhysicalDeviceGroupCount" in indict.keys():
         pPhysicalDeviceGroupCount = indict["pPhysicalDeviceGroupCount"]
    else: 
         pPhysicalDeviceGroupCount = pointer(c_uint())
    if "pPhysicalDeviceGroupProperties" in indict.keys():
         pPhysicalDeviceGroupProperties = indict["pPhysicalDeviceGroupProperties"]
    else: 
         pPhysicalDeviceGroupProperties = VkPhysicalDeviceGroupProperties()
    print(jvulkanLib.vkEnumeratePhysicalDeviceGroupsKHR)
    retval = jvulkanLib.vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pPhysicalDeviceGroupCount" : pPhysicalDeviceGroupCount,"pPhysicalDeviceGroupProperties" : pPhysicalDeviceGroupProperties,"retval" : retval}
def vkGetPhysicalDeviceExternalBufferPropertiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pExternalBufferInfo" in indict.keys():
         pExternalBufferInfo = indict["pExternalBufferInfo"]
    else: 
         pExternalBufferInfo = VkPhysicalDeviceExternalBufferInfo()
    if "pExternalBufferProperties" in indict.keys():
         pExternalBufferProperties = indict["pExternalBufferProperties"]
    else: 
         pExternalBufferProperties = VkExternalBufferProperties()
    print(jvulkanLib.vkGetPhysicalDeviceExternalBufferPropertiesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pExternalBufferInfo" : pExternalBufferInfo,"pExternalBufferProperties" : pExternalBufferProperties,"retval" : retval}
def vkGetMemoryFdKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pGetFdInfo" in indict.keys():
         pGetFdInfo = indict["pGetFdInfo"]
    else: 
         pGetFdInfo = VkMemoryGetFdInfoKHR()
    if "pFd" in indict.keys():
         pFd = indict["pFd"]
    else: 
         pFd = pointer(c_int())
    print(jvulkanLib.vkGetMemoryFdKHR)
    retval = jvulkanLib.vkGetMemoryFdKHR(device, pGetFdInfo, pFd)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pGetFdInfo" : pGetFdInfo,"pFd" : pFd,"retval" : retval}
def vkGetMemoryFdPropertiesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "handleType" in indict.keys():
         handleType = indict["handleType"]
    else: 
         handleType = c_int()
    if "fd" in indict.keys():
         fd = indict["fd"]
    else: 
         fd = c_int()
    if "pMemoryFdProperties" in indict.keys():
         pMemoryFdProperties = indict["pMemoryFdProperties"]
    else: 
         pMemoryFdProperties = VkMemoryFdPropertiesKHR()
    print(jvulkanLib.vkGetMemoryFdPropertiesKHR)
    retval = jvulkanLib.vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"handleType" : handleType,"fd" : fd,"pMemoryFdProperties" : pMemoryFdProperties,"retval" : retval}
def vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pExternalSemaphoreInfo" in indict.keys():
         pExternalSemaphoreInfo = indict["pExternalSemaphoreInfo"]
    else: 
         pExternalSemaphoreInfo = VkPhysicalDeviceExternalSemaphoreInfo()
    if "pExternalSemaphoreProperties" in indict.keys():
         pExternalSemaphoreProperties = indict["pExternalSemaphoreProperties"]
    else: 
         pExternalSemaphoreProperties = VkExternalSemaphoreProperties()
    print(jvulkanLib.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pExternalSemaphoreInfo" : pExternalSemaphoreInfo,"pExternalSemaphoreProperties" : pExternalSemaphoreProperties,"retval" : retval}
def vkImportSemaphoreFdKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pImportSemaphoreFdInfo" in indict.keys():
         pImportSemaphoreFdInfo = indict["pImportSemaphoreFdInfo"]
    else: 
         pImportSemaphoreFdInfo = VkImportSemaphoreFdInfoKHR()
    print(jvulkanLib.vkImportSemaphoreFdKHR)
    retval = jvulkanLib.vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pImportSemaphoreFdInfo" : pImportSemaphoreFdInfo,"retval" : retval}
def vkGetSemaphoreFdKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pGetFdInfo" in indict.keys():
         pGetFdInfo = indict["pGetFdInfo"]
    else: 
         pGetFdInfo = VkSemaphoreGetFdInfoKHR()
    if "pFd" in indict.keys():
         pFd = indict["pFd"]
    else: 
         pFd = pointer(c_int())
    print(jvulkanLib.vkGetSemaphoreFdKHR)
    retval = jvulkanLib.vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pGetFdInfo" : pGetFdInfo,"pFd" : pFd,"retval" : retval}
def vkCmdPushDescriptorSetKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineBindPoint" in indict.keys():
         pipelineBindPoint = indict["pipelineBindPoint"]
    else: 
         pipelineBindPoint = c_int()
    if "layout" in indict.keys():
         layout = indict["layout"]
    else: 
         layout = VkPipelineLayout_T()
    if "set" in indict.keys():
         set = indict["set"]
    else: 
         set = c_uint()
    if "descriptorWriteCount" in indict.keys():
         descriptorWriteCount = indict["descriptorWriteCount"]
    else: 
         descriptorWriteCount = c_uint()
    if "pDescriptorWrites" in indict.keys():
         pDescriptorWrites = indict["pDescriptorWrites"]
    else: 
         pDescriptorWrites = VkWriteDescriptorSet()
    print(jvulkanLib.vkCmdPushDescriptorSetKHR)
    retval = jvulkanLib.vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineBindPoint" : pipelineBindPoint,"layout" : layout,"set" : set,"descriptorWriteCount" : descriptorWriteCount,"pDescriptorWrites" : pDescriptorWrites,"retval" : retval}
def vkCmdPushDescriptorSetWithTemplateKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "descriptorUpdateTemplate" in indict.keys():
         descriptorUpdateTemplate = indict["descriptorUpdateTemplate"]
    else: 
         descriptorUpdateTemplate = VkDescriptorUpdateTemplate_T()
    if "layout" in indict.keys():
         layout = indict["layout"]
    else: 
         layout = VkPipelineLayout_T()
    if "set" in indict.keys():
         set = indict["set"]
    else: 
         set = c_uint()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkCmdPushDescriptorSetWithTemplateKHR)
    retval = jvulkanLib.vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"descriptorUpdateTemplate" : descriptorUpdateTemplate,"layout" : layout,"set" : set,"pData" : pData,"retval" : retval}
def vkCreateDescriptorUpdateTemplateKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDescriptorUpdateTemplateCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pDescriptorUpdateTemplate" in indict.keys():
         pDescriptorUpdateTemplate = indict["pDescriptorUpdateTemplate"]
    else: 
         pDescriptorUpdateTemplate = pointer(VkDescriptorUpdateTemplate_T())
    print(jvulkanLib.vkCreateDescriptorUpdateTemplateKHR)
    retval = jvulkanLib.vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pDescriptorUpdateTemplate" : pDescriptorUpdateTemplate,"retval" : retval}
def vkDestroyDescriptorUpdateTemplateKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorUpdateTemplate" in indict.keys():
         descriptorUpdateTemplate = indict["descriptorUpdateTemplate"]
    else: 
         descriptorUpdateTemplate = VkDescriptorUpdateTemplate_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDescriptorUpdateTemplateKHR)
    retval = jvulkanLib.vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorUpdateTemplate" : descriptorUpdateTemplate,"pAllocator" : pAllocator,"retval" : retval}
def vkUpdateDescriptorSetWithTemplateKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorSet" in indict.keys():
         descriptorSet = indict["descriptorSet"]
    else: 
         descriptorSet = VkDescriptorSet_T()
    if "descriptorUpdateTemplate" in indict.keys():
         descriptorUpdateTemplate = indict["descriptorUpdateTemplate"]
    else: 
         descriptorUpdateTemplate = VkDescriptorUpdateTemplate_T()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkUpdateDescriptorSetWithTemplateKHR)
    retval = jvulkanLib.vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorSet" : descriptorSet,"descriptorUpdateTemplate" : descriptorUpdateTemplate,"pData" : pData,"retval" : retval}
def vkCreateRenderPass2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkRenderPassCreateInfo2()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pRenderPass" in indict.keys():
         pRenderPass = indict["pRenderPass"]
    else: 
         pRenderPass = pointer(VkRenderPass_T())
    print(jvulkanLib.vkCreateRenderPass2KHR)
    retval = jvulkanLib.vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pRenderPass" : pRenderPass,"retval" : retval}
def vkCmdBeginRenderPass2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRenderPassBegin" in indict.keys():
         pRenderPassBegin = indict["pRenderPassBegin"]
    else: 
         pRenderPassBegin = VkRenderPassBeginInfo()
    if "pSubpassBeginInfo" in indict.keys():
         pSubpassBeginInfo = indict["pSubpassBeginInfo"]
    else: 
         pSubpassBeginInfo = VkSubpassBeginInfo()
    print(jvulkanLib.vkCmdBeginRenderPass2KHR)
    retval = jvulkanLib.vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRenderPassBegin" : pRenderPassBegin,"pSubpassBeginInfo" : pSubpassBeginInfo,"retval" : retval}
def vkCmdNextSubpass2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pSubpassBeginInfo" in indict.keys():
         pSubpassBeginInfo = indict["pSubpassBeginInfo"]
    else: 
         pSubpassBeginInfo = VkSubpassBeginInfo()
    if "pSubpassEndInfo" in indict.keys():
         pSubpassEndInfo = indict["pSubpassEndInfo"]
    else: 
         pSubpassEndInfo = VkSubpassEndInfo()
    print(jvulkanLib.vkCmdNextSubpass2KHR)
    retval = jvulkanLib.vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pSubpassBeginInfo" : pSubpassBeginInfo,"pSubpassEndInfo" : pSubpassEndInfo,"retval" : retval}
def vkCmdEndRenderPass2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pSubpassEndInfo" in indict.keys():
         pSubpassEndInfo = indict["pSubpassEndInfo"]
    else: 
         pSubpassEndInfo = VkSubpassEndInfo()
    print(jvulkanLib.vkCmdEndRenderPass2KHR)
    retval = jvulkanLib.vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pSubpassEndInfo" : pSubpassEndInfo,"retval" : retval}
def vkGetSwapchainStatusKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    print(jvulkanLib.vkGetSwapchainStatusKHR)
    retval = jvulkanLib.vkGetSwapchainStatusKHR(device, swapchain)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"retval" : retval}
def vkGetPhysicalDeviceExternalFencePropertiesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pExternalFenceInfo" in indict.keys():
         pExternalFenceInfo = indict["pExternalFenceInfo"]
    else: 
         pExternalFenceInfo = VkPhysicalDeviceExternalFenceInfo()
    if "pExternalFenceProperties" in indict.keys():
         pExternalFenceProperties = indict["pExternalFenceProperties"]
    else: 
         pExternalFenceProperties = VkExternalFenceProperties()
    print(jvulkanLib.vkGetPhysicalDeviceExternalFencePropertiesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pExternalFenceInfo" : pExternalFenceInfo,"pExternalFenceProperties" : pExternalFenceProperties,"retval" : retval}
def vkImportFenceFdKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pImportFenceFdInfo" in indict.keys():
         pImportFenceFdInfo = indict["pImportFenceFdInfo"]
    else: 
         pImportFenceFdInfo = VkImportFenceFdInfoKHR()
    print(jvulkanLib.vkImportFenceFdKHR)
    retval = jvulkanLib.vkImportFenceFdKHR(device, pImportFenceFdInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pImportFenceFdInfo" : pImportFenceFdInfo,"retval" : retval}
def vkGetFenceFdKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pGetFdInfo" in indict.keys():
         pGetFdInfo = indict["pGetFdInfo"]
    else: 
         pGetFdInfo = VkFenceGetFdInfoKHR()
    if "pFd" in indict.keys():
         pFd = indict["pFd"]
    else: 
         pFd = pointer(c_int())
    print(jvulkanLib.vkGetFenceFdKHR)
    retval = jvulkanLib.vkGetFenceFdKHR(device, pGetFdInfo, pFd)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pGetFdInfo" : pGetFdInfo,"pFd" : pFd,"retval" : retval}
def vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "queueFamilyIndex" in indict.keys():
         queueFamilyIndex = indict["queueFamilyIndex"]
    else: 
         queueFamilyIndex = c_uint()
    if "pCounterCount" in indict.keys():
         pCounterCount = indict["pCounterCount"]
    else: 
         pCounterCount = pointer(c_uint())
    if "pCounters" in indict.keys():
         pCounters = indict["pCounters"]
    else: 
         pCounters = VkPerformanceCounterKHR()
    if "pCounterDescriptions" in indict.keys():
         pCounterDescriptions = indict["pCounterDescriptions"]
    else: 
         pCounterDescriptions = VkPerformanceCounterDescriptionKHR()
    print(jvulkanLib.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)
    retval = jvulkanLib.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"queueFamilyIndex" : queueFamilyIndex,"pCounterCount" : pCounterCount,"pCounters" : pCounters,"pCounterDescriptions" : pCounterDescriptions,"retval" : retval}
def vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPerformanceQueryCreateInfo" in indict.keys():
         pPerformanceQueryCreateInfo = indict["pPerformanceQueryCreateInfo"]
    else: 
         pPerformanceQueryCreateInfo = VkQueryPoolPerformanceCreateInfoKHR()
    if "pNumPasses" in indict.keys():
         pNumPasses = indict["pNumPasses"]
    else: 
         pNumPasses = pointer(c_uint())
    print(jvulkanLib.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPerformanceQueryCreateInfo" : pPerformanceQueryCreateInfo,"pNumPasses" : pNumPasses,"retval" : retval}
def vkAcquireProfilingLockKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkAcquireProfilingLockInfoKHR()
    print(jvulkanLib.vkAcquireProfilingLockKHR)
    retval = jvulkanLib.vkAcquireProfilingLockKHR(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkReleaseProfilingLockKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    print(jvulkanLib.vkReleaseProfilingLockKHR)
    retval = jvulkanLib.vkReleaseProfilingLockKHR(device)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"retval" : retval}
def vkGetPhysicalDeviceSurfaceCapabilities2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pSurfaceInfo" in indict.keys():
         pSurfaceInfo = indict["pSurfaceInfo"]
    else: 
         pSurfaceInfo = VkPhysicalDeviceSurfaceInfo2KHR()
    if "pSurfaceCapabilities" in indict.keys():
         pSurfaceCapabilities = indict["pSurfaceCapabilities"]
    else: 
         pSurfaceCapabilities = VkSurfaceCapabilities2KHR()
    print(jvulkanLib.vkGetPhysicalDeviceSurfaceCapabilities2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pSurfaceInfo" : pSurfaceInfo,"pSurfaceCapabilities" : pSurfaceCapabilities,"retval" : retval}
def vkGetPhysicalDeviceSurfaceFormats2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pSurfaceInfo" in indict.keys():
         pSurfaceInfo = indict["pSurfaceInfo"]
    else: 
         pSurfaceInfo = VkPhysicalDeviceSurfaceInfo2KHR()
    if "pSurfaceFormatCount" in indict.keys():
         pSurfaceFormatCount = indict["pSurfaceFormatCount"]
    else: 
         pSurfaceFormatCount = pointer(c_uint())
    if "pSurfaceFormats" in indict.keys():
         pSurfaceFormats = indict["pSurfaceFormats"]
    else: 
         pSurfaceFormats = VkSurfaceFormat2KHR()
    print(jvulkanLib.vkGetPhysicalDeviceSurfaceFormats2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pSurfaceInfo" : pSurfaceInfo,"pSurfaceFormatCount" : pSurfaceFormatCount,"pSurfaceFormats" : pSurfaceFormats,"retval" : retval}
def vkGetPhysicalDeviceDisplayProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkDisplayProperties2KHR()
    print(jvulkanLib.vkGetPhysicalDeviceDisplayProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetPhysicalDeviceDisplayPlaneProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkDisplayPlaneProperties2KHR()
    print(jvulkanLib.vkGetPhysicalDeviceDisplayPlaneProperties2KHR)
    retval = jvulkanLib.vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetDisplayModeProperties2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkDisplayModeProperties2KHR()
    print(jvulkanLib.vkGetDisplayModeProperties2KHR)
    retval = jvulkanLib.vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"display" : display,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetDisplayPlaneCapabilities2KHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pDisplayPlaneInfo" in indict.keys():
         pDisplayPlaneInfo = indict["pDisplayPlaneInfo"]
    else: 
         pDisplayPlaneInfo = VkDisplayPlaneInfo2KHR()
    if "pCapabilities" in indict.keys():
         pCapabilities = indict["pCapabilities"]
    else: 
         pCapabilities = VkDisplayPlaneCapabilities2KHR()
    print(jvulkanLib.vkGetDisplayPlaneCapabilities2KHR)
    retval = jvulkanLib.vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pDisplayPlaneInfo" : pDisplayPlaneInfo,"pCapabilities" : pCapabilities,"retval" : retval}
def vkGetImageMemoryRequirements2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkImageMemoryRequirementsInfo2()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetImageMemoryRequirements2KHR)
    retval = jvulkanLib.vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetBufferMemoryRequirements2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferMemoryRequirementsInfo2()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetBufferMemoryRequirements2KHR)
    retval = jvulkanLib.vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetImageSparseMemoryRequirements2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkImageSparseMemoryRequirementsInfo2()
    if "pSparseMemoryRequirementCount" in indict.keys():
         pSparseMemoryRequirementCount = indict["pSparseMemoryRequirementCount"]
    else: 
         pSparseMemoryRequirementCount = pointer(c_uint())
    if "pSparseMemoryRequirements" in indict.keys():
         pSparseMemoryRequirements = indict["pSparseMemoryRequirements"]
    else: 
         pSparseMemoryRequirements = VkSparseImageMemoryRequirements2()
    print(jvulkanLib.vkGetImageSparseMemoryRequirements2KHR)
    retval = jvulkanLib.vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pSparseMemoryRequirementCount" : pSparseMemoryRequirementCount,"pSparseMemoryRequirements" : pSparseMemoryRequirements,"retval" : retval}
def vkCreateSamplerYcbcrConversionKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkSamplerYcbcrConversionCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pYcbcrConversion" in indict.keys():
         pYcbcrConversion = indict["pYcbcrConversion"]
    else: 
         pYcbcrConversion = pointer(VkSamplerYcbcrConversion_T())
    print(jvulkanLib.vkCreateSamplerYcbcrConversionKHR)
    retval = jvulkanLib.vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pYcbcrConversion" : pYcbcrConversion,"retval" : retval}
def vkDestroySamplerYcbcrConversionKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "ycbcrConversion" in indict.keys():
         ycbcrConversion = indict["ycbcrConversion"]
    else: 
         ycbcrConversion = VkSamplerYcbcrConversion_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroySamplerYcbcrConversionKHR)
    retval = jvulkanLib.vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"ycbcrConversion" : ycbcrConversion,"pAllocator" : pAllocator,"retval" : retval}
def vkBindBufferMemory2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "bindInfoCount" in indict.keys():
         bindInfoCount = indict["bindInfoCount"]
    else: 
         bindInfoCount = c_uint()
    if "pBindInfos" in indict.keys():
         pBindInfos = indict["pBindInfos"]
    else: 
         pBindInfos = VkBindBufferMemoryInfo()
    print(jvulkanLib.vkBindBufferMemory2KHR)
    retval = jvulkanLib.vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"bindInfoCount" : bindInfoCount,"pBindInfos" : pBindInfos,"retval" : retval}
def vkBindImageMemory2KHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "bindInfoCount" in indict.keys():
         bindInfoCount = indict["bindInfoCount"]
    else: 
         bindInfoCount = c_uint()
    if "pBindInfos" in indict.keys():
         pBindInfos = indict["pBindInfos"]
    else: 
         pBindInfos = VkBindImageMemoryInfo()
    print(jvulkanLib.vkBindImageMemory2KHR)
    retval = jvulkanLib.vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"bindInfoCount" : bindInfoCount,"pBindInfos" : pBindInfos,"retval" : retval}
def vkGetDescriptorSetLayoutSupportKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDescriptorSetLayoutCreateInfo()
    if "pSupport" in indict.keys():
         pSupport = indict["pSupport"]
    else: 
         pSupport = VkDescriptorSetLayoutSupport()
    print(jvulkanLib.vkGetDescriptorSetLayoutSupportKHR)
    retval = jvulkanLib.vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pSupport" : pSupport,"retval" : retval}
def vkCmdDrawIndirectCountKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndirectCountKHR)
    retval = jvulkanLib.vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkCmdDrawIndexedIndirectCountKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndexedIndirectCountKHR)
    retval = jvulkanLib.vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkGetSemaphoreCounterValueKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "semaphore" in indict.keys():
         semaphore = indict["semaphore"]
    else: 
         semaphore = VkSemaphore_T()
    if "pValue" in indict.keys():
         pValue = indict["pValue"]
    else: 
         pValue = pointer(c_ulong())
    print(jvulkanLib.vkGetSemaphoreCounterValueKHR)
    retval = jvulkanLib.vkGetSemaphoreCounterValueKHR(device, semaphore, pValue)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"semaphore" : semaphore,"pValue" : pValue,"retval" : retval}
def vkWaitSemaphoresKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pWaitInfo" in indict.keys():
         pWaitInfo = indict["pWaitInfo"]
    else: 
         pWaitInfo = VkSemaphoreWaitInfo()
    if "timeout" in indict.keys():
         timeout = indict["timeout"]
    else: 
         timeout = c_ulong()
    print(jvulkanLib.vkWaitSemaphoresKHR)
    retval = jvulkanLib.vkWaitSemaphoresKHR(device, pWaitInfo, timeout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pWaitInfo" : pWaitInfo,"timeout" : timeout,"retval" : retval}
def vkSignalSemaphoreKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pSignalInfo" in indict.keys():
         pSignalInfo = indict["pSignalInfo"]
    else: 
         pSignalInfo = VkSemaphoreSignalInfo()
    print(jvulkanLib.vkSignalSemaphoreKHR)
    retval = jvulkanLib.vkSignalSemaphoreKHR(device, pSignalInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pSignalInfo" : pSignalInfo,"retval" : retval}
def vkGetPhysicalDeviceFragmentShadingRatesKHR(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pFragmentShadingRateCount" in indict.keys():
         pFragmentShadingRateCount = indict["pFragmentShadingRateCount"]
    else: 
         pFragmentShadingRateCount = pointer(c_uint())
    if "pFragmentShadingRates" in indict.keys():
         pFragmentShadingRates = indict["pFragmentShadingRates"]
    else: 
         pFragmentShadingRates = VkPhysicalDeviceFragmentShadingRateKHR()
    print(jvulkanLib.vkGetPhysicalDeviceFragmentShadingRatesKHR)
    retval = jvulkanLib.vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pFragmentShadingRateCount" : pFragmentShadingRateCount,"pFragmentShadingRates" : pFragmentShadingRates,"retval" : retval}
def vkCmdSetFragmentShadingRateKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pFragmentSize" in indict.keys():
         pFragmentSize = indict["pFragmentSize"]
    else: 
         pFragmentSize = VkExtent2D()
    if "combinerOps" in indict.keys():
         combinerOps = indict["combinerOps"]
    else: 
         combinerOps = pointer(c_int())
    print(jvulkanLib.vkCmdSetFragmentShadingRateKHR)
    retval = jvulkanLib.vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pFragmentSize" : pFragmentSize,"combinerOps" : combinerOps,"retval" : retval}
def vkWaitForPresentKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "presentId" in indict.keys():
         presentId = indict["presentId"]
    else: 
         presentId = c_ulong()
    if "timeout" in indict.keys():
         timeout = indict["timeout"]
    else: 
         timeout = c_ulong()
    print(jvulkanLib.vkWaitForPresentKHR)
    retval = jvulkanLib.vkWaitForPresentKHR(device, swapchain, presentId, timeout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"presentId" : presentId,"timeout" : timeout,"retval" : retval}
def vkGetBufferDeviceAddressKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferDeviceAddressInfo()
    print(jvulkanLib.vkGetBufferDeviceAddressKHR)
    retval = jvulkanLib.vkGetBufferDeviceAddressKHR(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetBufferOpaqueCaptureAddressKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferDeviceAddressInfo()
    print(jvulkanLib.vkGetBufferOpaqueCaptureAddressKHR)
    retval = jvulkanLib.vkGetBufferOpaqueCaptureAddressKHR(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetDeviceMemoryOpaqueCaptureAddressKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceMemoryOpaqueCaptureAddressInfo()
    print(jvulkanLib.vkGetDeviceMemoryOpaqueCaptureAddressKHR)
    retval = jvulkanLib.vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkCreateDeferredOperationKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pDeferredOperation" in indict.keys():
         pDeferredOperation = indict["pDeferredOperation"]
    else: 
         pDeferredOperation = pointer(VkDeferredOperationKHR_T())
    print(jvulkanLib.vkCreateDeferredOperationKHR)
    retval = jvulkanLib.vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAllocator" : pAllocator,"pDeferredOperation" : pDeferredOperation,"retval" : retval}
def vkDestroyDeferredOperationKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "operation" in indict.keys():
         operation = indict["operation"]
    else: 
         operation = VkDeferredOperationKHR_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDeferredOperationKHR)
    retval = jvulkanLib.vkDestroyDeferredOperationKHR(device, operation, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"operation" : operation,"pAllocator" : pAllocator,"retval" : retval}
def vkGetDeferredOperationMaxConcurrencyKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "operation" in indict.keys():
         operation = indict["operation"]
    else: 
         operation = VkDeferredOperationKHR_T()
    print(jvulkanLib.vkGetDeferredOperationMaxConcurrencyKHR)
    retval = jvulkanLib.vkGetDeferredOperationMaxConcurrencyKHR(device, operation)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"operation" : operation,"retval" : retval}
def vkGetDeferredOperationResultKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "operation" in indict.keys():
         operation = indict["operation"]
    else: 
         operation = VkDeferredOperationKHR_T()
    print(jvulkanLib.vkGetDeferredOperationResultKHR)
    retval = jvulkanLib.vkGetDeferredOperationResultKHR(device, operation)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"operation" : operation,"retval" : retval}
def vkDeferredOperationJoinKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "operation" in indict.keys():
         operation = indict["operation"]
    else: 
         operation = VkDeferredOperationKHR_T()
    print(jvulkanLib.vkDeferredOperationJoinKHR)
    retval = jvulkanLib.vkDeferredOperationJoinKHR(device, operation)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"operation" : operation,"retval" : retval}
def vkGetPipelineExecutablePropertiesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pPipelineInfo" in indict.keys():
         pPipelineInfo = indict["pPipelineInfo"]
    else: 
         pPipelineInfo = VkPipelineInfoKHR()
    if "pExecutableCount" in indict.keys():
         pExecutableCount = indict["pExecutableCount"]
    else: 
         pExecutableCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkPipelineExecutablePropertiesKHR()
    print(jvulkanLib.vkGetPipelineExecutablePropertiesKHR)
    retval = jvulkanLib.vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pPipelineInfo" : pPipelineInfo,"pExecutableCount" : pExecutableCount,"pProperties" : pProperties,"retval" : retval}
def vkGetPipelineExecutableStatisticsKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pExecutableInfo" in indict.keys():
         pExecutableInfo = indict["pExecutableInfo"]
    else: 
         pExecutableInfo = VkPipelineExecutableInfoKHR()
    if "pStatisticCount" in indict.keys():
         pStatisticCount = indict["pStatisticCount"]
    else: 
         pStatisticCount = pointer(c_uint())
    if "pStatistics" in indict.keys():
         pStatistics = indict["pStatistics"]
    else: 
         pStatistics = VkPipelineExecutableStatisticKHR()
    print(jvulkanLib.vkGetPipelineExecutableStatisticsKHR)
    retval = jvulkanLib.vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pExecutableInfo" : pExecutableInfo,"pStatisticCount" : pStatisticCount,"pStatistics" : pStatistics,"retval" : retval}
def vkGetPipelineExecutableInternalRepresentationsKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pExecutableInfo" in indict.keys():
         pExecutableInfo = indict["pExecutableInfo"]
    else: 
         pExecutableInfo = VkPipelineExecutableInfoKHR()
    if "pInternalRepresentationCount" in indict.keys():
         pInternalRepresentationCount = indict["pInternalRepresentationCount"]
    else: 
         pInternalRepresentationCount = pointer(c_uint())
    if "pInternalRepresentations" in indict.keys():
         pInternalRepresentations = indict["pInternalRepresentations"]
    else: 
         pInternalRepresentations = VkPipelineExecutableInternalRepresentationKHR()
    print(jvulkanLib.vkGetPipelineExecutableInternalRepresentationsKHR)
    retval = jvulkanLib.vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pExecutableInfo" : pExecutableInfo,"pInternalRepresentationCount" : pInternalRepresentationCount,"pInternalRepresentations" : pInternalRepresentations,"retval" : retval}
def vkCmdSetEvent2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "pDependencyInfo" in indict.keys():
         pDependencyInfo = indict["pDependencyInfo"]
    else: 
         pDependencyInfo = VkDependencyInfo()
    print(jvulkanLib.vkCmdSetEvent2KHR)
    retval = jvulkanLib.vkCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"event" : event,"pDependencyInfo" : pDependencyInfo,"retval" : retval}
def vkCmdResetEvent2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "event" in indict.keys():
         event = indict["event"]
    else: 
         event = VkEvent_T()
    if "stageMask" in indict.keys():
         stageMask = indict["stageMask"]
    else: 
         stageMask = c_ulong()
    print(jvulkanLib.vkCmdResetEvent2KHR)
    retval = jvulkanLib.vkCmdResetEvent2KHR(commandBuffer, event, stageMask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"event" : event,"stageMask" : stageMask,"retval" : retval}
def vkCmdWaitEvents2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "eventCount" in indict.keys():
         eventCount = indict["eventCount"]
    else: 
         eventCount = c_uint()
    if "pEvents" in indict.keys():
         pEvents = indict["pEvents"]
    else: 
         pEvents = pointer(VkEvent_T())
    if "pDependencyInfos" in indict.keys():
         pDependencyInfos = indict["pDependencyInfos"]
    else: 
         pDependencyInfos = VkDependencyInfo()
    print(jvulkanLib.vkCmdWaitEvents2KHR)
    retval = jvulkanLib.vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"eventCount" : eventCount,"pEvents" : pEvents,"pDependencyInfos" : pDependencyInfos,"retval" : retval}
def vkCmdPipelineBarrier2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pDependencyInfo" in indict.keys():
         pDependencyInfo = indict["pDependencyInfo"]
    else: 
         pDependencyInfo = VkDependencyInfo()
    print(jvulkanLib.vkCmdPipelineBarrier2KHR)
    retval = jvulkanLib.vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pDependencyInfo" : pDependencyInfo,"retval" : retval}
def vkCmdWriteTimestamp2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "stage" in indict.keys():
         stage = indict["stage"]
    else: 
         stage = c_ulong()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    print(jvulkanLib.vkCmdWriteTimestamp2KHR)
    retval = jvulkanLib.vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"stage" : stage,"queryPool" : queryPool,"query" : query,"retval" : retval}
def vkQueueSubmit2KHR(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "submitCount" in indict.keys():
         submitCount = indict["submitCount"]
    else: 
         submitCount = c_uint()
    if "pSubmits" in indict.keys():
         pSubmits = indict["pSubmits"]
    else: 
         pSubmits = VkSubmitInfo2()
    if "fence" in indict.keys():
         fence = indict["fence"]
    else: 
         fence = VkFence_T()
    print(jvulkanLib.vkQueueSubmit2KHR)
    retval = jvulkanLib.vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"submitCount" : submitCount,"pSubmits" : pSubmits,"fence" : fence,"retval" : retval}
def vkCmdWriteBufferMarker2AMD(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "stage" in indict.keys():
         stage = indict["stage"]
    else: 
         stage = c_ulong()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "dstOffset" in indict.keys():
         dstOffset = indict["dstOffset"]
    else: 
         dstOffset = c_ulong()
    if "marker" in indict.keys():
         marker = indict["marker"]
    else: 
         marker = c_uint()
    print(jvulkanLib.vkCmdWriteBufferMarker2AMD)
    retval = jvulkanLib.vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"stage" : stage,"dstBuffer" : dstBuffer,"dstOffset" : dstOffset,"marker" : marker,"retval" : retval}
def vkGetQueueCheckpointData2NV(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "pCheckpointDataCount" in indict.keys():
         pCheckpointDataCount = indict["pCheckpointDataCount"]
    else: 
         pCheckpointDataCount = pointer(c_uint())
    if "pCheckpointData" in indict.keys():
         pCheckpointData = indict["pCheckpointData"]
    else: 
         pCheckpointData = VkCheckpointData2NV()
    print(jvulkanLib.vkGetQueueCheckpointData2NV)
    retval = jvulkanLib.vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"pCheckpointDataCount" : pCheckpointDataCount,"pCheckpointData" : pCheckpointData,"retval" : retval}
def vkCmdCopyBuffer2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyBufferInfo" in indict.keys():
         pCopyBufferInfo = indict["pCopyBufferInfo"]
    else: 
         pCopyBufferInfo = VkCopyBufferInfo2()
    print(jvulkanLib.vkCmdCopyBuffer2KHR)
    retval = jvulkanLib.vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyBufferInfo" : pCopyBufferInfo,"retval" : retval}
def vkCmdCopyImage2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyImageInfo" in indict.keys():
         pCopyImageInfo = indict["pCopyImageInfo"]
    else: 
         pCopyImageInfo = VkCopyImageInfo2()
    print(jvulkanLib.vkCmdCopyImage2KHR)
    retval = jvulkanLib.vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyImageInfo" : pCopyImageInfo,"retval" : retval}
def vkCmdCopyBufferToImage2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyBufferToImageInfo" in indict.keys():
         pCopyBufferToImageInfo = indict["pCopyBufferToImageInfo"]
    else: 
         pCopyBufferToImageInfo = VkCopyBufferToImageInfo2()
    print(jvulkanLib.vkCmdCopyBufferToImage2KHR)
    retval = jvulkanLib.vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyBufferToImageInfo" : pCopyBufferToImageInfo,"retval" : retval}
def vkCmdCopyImageToBuffer2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCopyImageToBufferInfo" in indict.keys():
         pCopyImageToBufferInfo = indict["pCopyImageToBufferInfo"]
    else: 
         pCopyImageToBufferInfo = VkCopyImageToBufferInfo2()
    print(jvulkanLib.vkCmdCopyImageToBuffer2KHR)
    retval = jvulkanLib.vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCopyImageToBufferInfo" : pCopyImageToBufferInfo,"retval" : retval}
def vkCmdBlitImage2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pBlitImageInfo" in indict.keys():
         pBlitImageInfo = indict["pBlitImageInfo"]
    else: 
         pBlitImageInfo = VkBlitImageInfo2()
    print(jvulkanLib.vkCmdBlitImage2KHR)
    retval = jvulkanLib.vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pBlitImageInfo" : pBlitImageInfo,"retval" : retval}
def vkCmdResolveImage2KHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pResolveImageInfo" in indict.keys():
         pResolveImageInfo = indict["pResolveImageInfo"]
    else: 
         pResolveImageInfo = VkResolveImageInfo2()
    print(jvulkanLib.vkCmdResolveImage2KHR)
    retval = jvulkanLib.vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pResolveImageInfo" : pResolveImageInfo,"retval" : retval}
def vkGetDeviceBufferMemoryRequirementsKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceBufferMemoryRequirements()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetDeviceBufferMemoryRequirementsKHR)
    retval = jvulkanLib.vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetDeviceImageMemoryRequirementsKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceImageMemoryRequirements()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetDeviceImageMemoryRequirementsKHR)
    retval = jvulkanLib.vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkGetDeviceImageSparseMemoryRequirementsKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkDeviceImageMemoryRequirements()
    if "pSparseMemoryRequirementCount" in indict.keys():
         pSparseMemoryRequirementCount = indict["pSparseMemoryRequirementCount"]
    else: 
         pSparseMemoryRequirementCount = pointer(c_uint())
    if "pSparseMemoryRequirements" in indict.keys():
         pSparseMemoryRequirements = indict["pSparseMemoryRequirements"]
    else: 
         pSparseMemoryRequirements = VkSparseImageMemoryRequirements2()
    print(jvulkanLib.vkGetDeviceImageSparseMemoryRequirementsKHR)
    retval = jvulkanLib.vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pSparseMemoryRequirementCount" : pSparseMemoryRequirementCount,"pSparseMemoryRequirements" : pSparseMemoryRequirements,"retval" : retval}
def vkCreateDebugReportCallbackEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDebugReportCallbackCreateInfoEXT()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pCallback" in indict.keys():
         pCallback = indict["pCallback"]
    else: 
         pCallback = pointer(VkDebugReportCallbackEXT_T())
    print(jvulkanLib.vkCreateDebugReportCallbackEXT)
    retval = jvulkanLib.vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pCallback" : pCallback,"retval" : retval}
def vkDestroyDebugReportCallbackEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "callback" in indict.keys():
         callback = indict["callback"]
    else: 
         callback = VkDebugReportCallbackEXT_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDebugReportCallbackEXT)
    retval = jvulkanLib.vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"callback" : callback,"pAllocator" : pAllocator,"retval" : retval}
def vkDebugReportMessageEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    if "objectType" in indict.keys():
         objectType = indict["objectType"]
    else: 
         objectType = c_int()
    if "object" in indict.keys():
         object = indict["object"]
    else: 
         object = c_ulong()
    if "location" in indict.keys():
         location = indict["location"]
    else: 
         location = c_ulong()
    if "messageCode" in indict.keys():
         messageCode = indict["messageCode"]
    else: 
         messageCode = c_int()
    if "pLayerPrefix" in indict.keys():
         pLayerPrefix = indict["pLayerPrefix"]
    else: 
         pLayerPrefix = c_char_p()
    if "pMessage" in indict.keys():
         pMessage = indict["pMessage"]
    else: 
         pMessage = c_char_p()
    print(jvulkanLib.vkDebugReportMessageEXT)
    retval = jvulkanLib.vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"flags" : flags,"objectType" : objectType,"object" : object,"location" : location,"messageCode" : messageCode,"pLayerPrefix" : pLayerPrefix,"pMessage" : pMessage,"retval" : retval}
def vkDebugMarkerSetObjectTagEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pTagInfo" in indict.keys():
         pTagInfo = indict["pTagInfo"]
    else: 
         pTagInfo = VkDebugMarkerObjectTagInfoEXT()
    print(jvulkanLib.vkDebugMarkerSetObjectTagEXT)
    retval = jvulkanLib.vkDebugMarkerSetObjectTagEXT(device, pTagInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pTagInfo" : pTagInfo,"retval" : retval}
def vkDebugMarkerSetObjectNameEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pNameInfo" in indict.keys():
         pNameInfo = indict["pNameInfo"]
    else: 
         pNameInfo = VkDebugMarkerObjectNameInfoEXT()
    print(jvulkanLib.vkDebugMarkerSetObjectNameEXT)
    retval = jvulkanLib.vkDebugMarkerSetObjectNameEXT(device, pNameInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pNameInfo" : pNameInfo,"retval" : retval}
def vkCmdDebugMarkerBeginEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pMarkerInfo" in indict.keys():
         pMarkerInfo = indict["pMarkerInfo"]
    else: 
         pMarkerInfo = VkDebugMarkerMarkerInfoEXT()
    print(jvulkanLib.vkCmdDebugMarkerBeginEXT)
    retval = jvulkanLib.vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pMarkerInfo" : pMarkerInfo,"retval" : retval}
def vkCmdDebugMarkerEndEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdDebugMarkerEndEXT)
    retval = jvulkanLib.vkCmdDebugMarkerEndEXT(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkCmdDebugMarkerInsertEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pMarkerInfo" in indict.keys():
         pMarkerInfo = indict["pMarkerInfo"]
    else: 
         pMarkerInfo = VkDebugMarkerMarkerInfoEXT()
    print(jvulkanLib.vkCmdDebugMarkerInsertEXT)
    retval = jvulkanLib.vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pMarkerInfo" : pMarkerInfo,"retval" : retval}
def vkCmdBindTransformFeedbackBuffersEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstBinding" in indict.keys():
         firstBinding = indict["firstBinding"]
    else: 
         firstBinding = c_uint()
    if "bindingCount" in indict.keys():
         bindingCount = indict["bindingCount"]
    else: 
         bindingCount = c_uint()
    if "pBuffers" in indict.keys():
         pBuffers = indict["pBuffers"]
    else: 
         pBuffers = pointer(VkBuffer_T())
    if "pOffsets" in indict.keys():
         pOffsets = indict["pOffsets"]
    else: 
         pOffsets = pointer(c_ulong())
    if "pSizes" in indict.keys():
         pSizes = indict["pSizes"]
    else: 
         pSizes = pointer(c_ulong())
    print(jvulkanLib.vkCmdBindTransformFeedbackBuffersEXT)
    retval = jvulkanLib.vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstBinding" : firstBinding,"bindingCount" : bindingCount,"pBuffers" : pBuffers,"pOffsets" : pOffsets,"pSizes" : pSizes,"retval" : retval}
def vkCmdBeginTransformFeedbackEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstCounterBuffer" in indict.keys():
         firstCounterBuffer = indict["firstCounterBuffer"]
    else: 
         firstCounterBuffer = c_uint()
    if "counterBufferCount" in indict.keys():
         counterBufferCount = indict["counterBufferCount"]
    else: 
         counterBufferCount = c_uint()
    if "pCounterBuffers" in indict.keys():
         pCounterBuffers = indict["pCounterBuffers"]
    else: 
         pCounterBuffers = pointer(VkBuffer_T())
    if "pCounterBufferOffsets" in indict.keys():
         pCounterBufferOffsets = indict["pCounterBufferOffsets"]
    else: 
         pCounterBufferOffsets = pointer(c_ulong())
    print(jvulkanLib.vkCmdBeginTransformFeedbackEXT)
    retval = jvulkanLib.vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstCounterBuffer" : firstCounterBuffer,"counterBufferCount" : counterBufferCount,"pCounterBuffers" : pCounterBuffers,"pCounterBufferOffsets" : pCounterBufferOffsets,"retval" : retval}
def vkCmdEndTransformFeedbackEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstCounterBuffer" in indict.keys():
         firstCounterBuffer = indict["firstCounterBuffer"]
    else: 
         firstCounterBuffer = c_uint()
    if "counterBufferCount" in indict.keys():
         counterBufferCount = indict["counterBufferCount"]
    else: 
         counterBufferCount = c_uint()
    if "pCounterBuffers" in indict.keys():
         pCounterBuffers = indict["pCounterBuffers"]
    else: 
         pCounterBuffers = pointer(VkBuffer_T())
    if "pCounterBufferOffsets" in indict.keys():
         pCounterBufferOffsets = indict["pCounterBufferOffsets"]
    else: 
         pCounterBufferOffsets = pointer(c_ulong())
    print(jvulkanLib.vkCmdEndTransformFeedbackEXT)
    retval = jvulkanLib.vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstCounterBuffer" : firstCounterBuffer,"counterBufferCount" : counterBufferCount,"pCounterBuffers" : pCounterBuffers,"pCounterBufferOffsets" : pCounterBufferOffsets,"retval" : retval}
def vkCmdBeginQueryIndexedEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    if "index" in indict.keys():
         index = indict["index"]
    else: 
         index = c_uint()
    print(jvulkanLib.vkCmdBeginQueryIndexedEXT)
    retval = jvulkanLib.vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"queryPool" : queryPool,"query" : query,"flags" : flags,"index" : index,"retval" : retval}
def vkCmdEndQueryIndexedEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "query" in indict.keys():
         query = indict["query"]
    else: 
         query = c_uint()
    if "index" in indict.keys():
         index = indict["index"]
    else: 
         index = c_uint()
    print(jvulkanLib.vkCmdEndQueryIndexedEXT)
    retval = jvulkanLib.vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"queryPool" : queryPool,"query" : query,"index" : index,"retval" : retval}
def vkCmdDrawIndirectByteCountEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "instanceCount" in indict.keys():
         instanceCount = indict["instanceCount"]
    else: 
         instanceCount = c_uint()
    if "firstInstance" in indict.keys():
         firstInstance = indict["firstInstance"]
    else: 
         firstInstance = c_uint()
    if "counterBuffer" in indict.keys():
         counterBuffer = indict["counterBuffer"]
    else: 
         counterBuffer = VkBuffer_T()
    if "counterBufferOffset" in indict.keys():
         counterBufferOffset = indict["counterBufferOffset"]
    else: 
         counterBufferOffset = c_ulong()
    if "counterOffset" in indict.keys():
         counterOffset = indict["counterOffset"]
    else: 
         counterOffset = c_uint()
    if "vertexStride" in indict.keys():
         vertexStride = indict["vertexStride"]
    else: 
         vertexStride = c_uint()
    print(jvulkanLib.vkCmdDrawIndirectByteCountEXT)
    retval = jvulkanLib.vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"instanceCount" : instanceCount,"firstInstance" : firstInstance,"counterBuffer" : counterBuffer,"counterBufferOffset" : counterBufferOffset,"counterOffset" : counterOffset,"vertexStride" : vertexStride,"retval" : retval}
def vkCreateCuModuleNVX(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkCuModuleCreateInfoNVX()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pModule" in indict.keys():
         pModule = indict["pModule"]
    else: 
         pModule = pointer(VkCuModuleNVX_T())
    print(jvulkanLib.vkCreateCuModuleNVX)
    retval = jvulkanLib.vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pModule" : pModule,"retval" : retval}
def vkCreateCuFunctionNVX(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkCuFunctionCreateInfoNVX()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pFunction" in indict.keys():
         pFunction = indict["pFunction"]
    else: 
         pFunction = pointer(VkCuFunctionNVX_T())
    print(jvulkanLib.vkCreateCuFunctionNVX)
    retval = jvulkanLib.vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pFunction" : pFunction,"retval" : retval}
def vkDestroyCuModuleNVX(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "module" in indict.keys():
         module = indict["module"]
    else: 
         module = VkCuModuleNVX_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyCuModuleNVX)
    retval = jvulkanLib.vkDestroyCuModuleNVX(device, module, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"module" : module,"pAllocator" : pAllocator,"retval" : retval}
def vkDestroyCuFunctionNVX(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "function" in indict.keys():
         function = indict["function"]
    else: 
         function = VkCuFunctionNVX_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyCuFunctionNVX)
    retval = jvulkanLib.vkDestroyCuFunctionNVX(device, function, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"function" : function,"pAllocator" : pAllocator,"retval" : retval}
def vkCmdCuLaunchKernelNVX(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pLaunchInfo" in indict.keys():
         pLaunchInfo = indict["pLaunchInfo"]
    else: 
         pLaunchInfo = VkCuLaunchInfoNVX()
    print(jvulkanLib.vkCmdCuLaunchKernelNVX)
    retval = jvulkanLib.vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pLaunchInfo" : pLaunchInfo,"retval" : retval}
def vkGetImageViewHandleNVX(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkImageViewHandleInfoNVX()
    print(jvulkanLib.vkGetImageViewHandleNVX)
    retval = jvulkanLib.vkGetImageViewHandleNVX(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetImageViewAddressNVX(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "imageView" in indict.keys():
         imageView = indict["imageView"]
    else: 
         imageView = VkImageView_T()
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkImageViewAddressPropertiesNVX()
    print(jvulkanLib.vkGetImageViewAddressNVX)
    retval = jvulkanLib.vkGetImageViewAddressNVX(device, imageView, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"imageView" : imageView,"pProperties" : pProperties,"retval" : retval}
def vkCmdDrawIndirectCountAMD(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndirectCountAMD)
    retval = jvulkanLib.vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkCmdDrawIndexedIndirectCountAMD(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawIndexedIndirectCountAMD)
    retval = jvulkanLib.vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkGetShaderInfoAMD(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "shaderStage" in indict.keys():
         shaderStage = indict["shaderStage"]
    else: 
         shaderStage = c_int()
    if "infoType" in indict.keys():
         infoType = indict["infoType"]
    else: 
         infoType = c_int()
    if "pInfoSize" in indict.keys():
         pInfoSize = indict["pInfoSize"]
    else: 
         pInfoSize = pointer(c_ulong())
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = c_void_p()
    print(jvulkanLib.vkGetShaderInfoAMD)
    retval = jvulkanLib.vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"shaderStage" : shaderStage,"infoType" : infoType,"pInfoSize" : pInfoSize,"pInfo" : pInfo,"retval" : retval}
def vkGetPhysicalDeviceExternalImageFormatPropertiesNV(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "format" in indict.keys():
         format = indict["format"]
    else: 
         format = c_int()
    if "type" in indict.keys():
         type = indict["type"]
    else: 
         type = c_int()
    if "tiling" in indict.keys():
         tiling = indict["tiling"]
    else: 
         tiling = c_int()
    if "usage" in indict.keys():
         usage = indict["usage"]
    else: 
         usage = c_uint()
    if "flags" in indict.keys():
         flags = indict["flags"]
    else: 
         flags = c_uint()
    if "externalHandleType" in indict.keys():
         externalHandleType = indict["externalHandleType"]
    else: 
         externalHandleType = c_uint()
    if "pExternalImageFormatProperties" in indict.keys():
         pExternalImageFormatProperties = indict["pExternalImageFormatProperties"]
    else: 
         pExternalImageFormatProperties = VkExternalImageFormatPropertiesNV()
    print(jvulkanLib.vkGetPhysicalDeviceExternalImageFormatPropertiesNV)
    retval = jvulkanLib.vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"format" : format,"type" : type,"tiling" : tiling,"usage" : usage,"flags" : flags,"externalHandleType" : externalHandleType,"pExternalImageFormatProperties" : pExternalImageFormatProperties,"retval" : retval}
def vkCmdBeginConditionalRenderingEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pConditionalRenderingBegin" in indict.keys():
         pConditionalRenderingBegin = indict["pConditionalRenderingBegin"]
    else: 
         pConditionalRenderingBegin = VkConditionalRenderingBeginInfoEXT()
    print(jvulkanLib.vkCmdBeginConditionalRenderingEXT)
    retval = jvulkanLib.vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pConditionalRenderingBegin" : pConditionalRenderingBegin,"retval" : retval}
def vkCmdEndConditionalRenderingEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdEndConditionalRenderingEXT)
    retval = jvulkanLib.vkCmdEndConditionalRenderingEXT(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkCmdSetViewportWScalingNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstViewport" in indict.keys():
         firstViewport = indict["firstViewport"]
    else: 
         firstViewport = c_uint()
    if "viewportCount" in indict.keys():
         viewportCount = indict["viewportCount"]
    else: 
         viewportCount = c_uint()
    if "pViewportWScalings" in indict.keys():
         pViewportWScalings = indict["pViewportWScalings"]
    else: 
         pViewportWScalings = VkViewportWScalingNV()
    print(jvulkanLib.vkCmdSetViewportWScalingNV)
    retval = jvulkanLib.vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstViewport" : firstViewport,"viewportCount" : viewportCount,"pViewportWScalings" : pViewportWScalings,"retval" : retval}
def vkReleaseDisplayEXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    print(jvulkanLib.vkReleaseDisplayEXT)
    retval = jvulkanLib.vkReleaseDisplayEXT(physicalDevice, display)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"display" : display,"retval" : retval}
def vkGetPhysicalDeviceSurfaceCapabilities2EXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "surface" in indict.keys():
         surface = indict["surface"]
    else: 
         surface = VkSurfaceKHR_T()
    if "pSurfaceCapabilities" in indict.keys():
         pSurfaceCapabilities = indict["pSurfaceCapabilities"]
    else: 
         pSurfaceCapabilities = VkSurfaceCapabilities2EXT()
    print(jvulkanLib.vkGetPhysicalDeviceSurfaceCapabilities2EXT)
    retval = jvulkanLib.vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"surface" : surface,"pSurfaceCapabilities" : pSurfaceCapabilities,"retval" : retval}
def vkDisplayPowerControlEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    if "pDisplayPowerInfo" in indict.keys():
         pDisplayPowerInfo = indict["pDisplayPowerInfo"]
    else: 
         pDisplayPowerInfo = VkDisplayPowerInfoEXT()
    print(jvulkanLib.vkDisplayPowerControlEXT)
    retval = jvulkanLib.vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"display" : display,"pDisplayPowerInfo" : pDisplayPowerInfo,"retval" : retval}
def vkRegisterDeviceEventEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pDeviceEventInfo" in indict.keys():
         pDeviceEventInfo = indict["pDeviceEventInfo"]
    else: 
         pDeviceEventInfo = VkDeviceEventInfoEXT()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pFence" in indict.keys():
         pFence = indict["pFence"]
    else: 
         pFence = pointer(VkFence_T())
    print(jvulkanLib.vkRegisterDeviceEventEXT)
    retval = jvulkanLib.vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pDeviceEventInfo" : pDeviceEventInfo,"pAllocator" : pAllocator,"pFence" : pFence,"retval" : retval}
def vkRegisterDisplayEventEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    if "pDisplayEventInfo" in indict.keys():
         pDisplayEventInfo = indict["pDisplayEventInfo"]
    else: 
         pDisplayEventInfo = VkDisplayEventInfoEXT()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pFence" in indict.keys():
         pFence = indict["pFence"]
    else: 
         pFence = pointer(VkFence_T())
    print(jvulkanLib.vkRegisterDisplayEventEXT)
    retval = jvulkanLib.vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"display" : display,"pDisplayEventInfo" : pDisplayEventInfo,"pAllocator" : pAllocator,"pFence" : pFence,"retval" : retval}
def vkGetSwapchainCounterEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "counter" in indict.keys():
         counter = indict["counter"]
    else: 
         counter = c_int()
    if "pCounterValue" in indict.keys():
         pCounterValue = indict["pCounterValue"]
    else: 
         pCounterValue = pointer(c_ulong())
    print(jvulkanLib.vkGetSwapchainCounterEXT)
    retval = jvulkanLib.vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"counter" : counter,"pCounterValue" : pCounterValue,"retval" : retval}
def vkGetRefreshCycleDurationGOOGLE(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "pDisplayTimingProperties" in indict.keys():
         pDisplayTimingProperties = indict["pDisplayTimingProperties"]
    else: 
         pDisplayTimingProperties = VkRefreshCycleDurationGOOGLE()
    print(jvulkanLib.vkGetRefreshCycleDurationGOOGLE)
    retval = jvulkanLib.vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"pDisplayTimingProperties" : pDisplayTimingProperties,"retval" : retval}
def vkGetPastPresentationTimingGOOGLE(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchain" in indict.keys():
         swapchain = indict["swapchain"]
    else: 
         swapchain = VkSwapchainKHR_T()
    if "pPresentationTimingCount" in indict.keys():
         pPresentationTimingCount = indict["pPresentationTimingCount"]
    else: 
         pPresentationTimingCount = pointer(c_uint())
    if "pPresentationTimings" in indict.keys():
         pPresentationTimings = indict["pPresentationTimings"]
    else: 
         pPresentationTimings = VkPastPresentationTimingGOOGLE()
    print(jvulkanLib.vkGetPastPresentationTimingGOOGLE)
    retval = jvulkanLib.vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchain" : swapchain,"pPresentationTimingCount" : pPresentationTimingCount,"pPresentationTimings" : pPresentationTimings,"retval" : retval}
def vkCmdSetDiscardRectangleEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstDiscardRectangle" in indict.keys():
         firstDiscardRectangle = indict["firstDiscardRectangle"]
    else: 
         firstDiscardRectangle = c_uint()
    if "discardRectangleCount" in indict.keys():
         discardRectangleCount = indict["discardRectangleCount"]
    else: 
         discardRectangleCount = c_uint()
    if "pDiscardRectangles" in indict.keys():
         pDiscardRectangles = indict["pDiscardRectangles"]
    else: 
         pDiscardRectangles = VkRect2D()
    print(jvulkanLib.vkCmdSetDiscardRectangleEXT)
    retval = jvulkanLib.vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstDiscardRectangle" : firstDiscardRectangle,"discardRectangleCount" : discardRectangleCount,"pDiscardRectangles" : pDiscardRectangles,"retval" : retval}
def vkSetHdrMetadataEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapchainCount" in indict.keys():
         swapchainCount = indict["swapchainCount"]
    else: 
         swapchainCount = c_uint()
    if "pSwapchains" in indict.keys():
         pSwapchains = indict["pSwapchains"]
    else: 
         pSwapchains = pointer(VkSwapchainKHR_T())
    if "pMetadata" in indict.keys():
         pMetadata = indict["pMetadata"]
    else: 
         pMetadata = VkHdrMetadataEXT()
    print(jvulkanLib.vkSetHdrMetadataEXT)
    retval = jvulkanLib.vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapchainCount" : swapchainCount,"pSwapchains" : pSwapchains,"pMetadata" : pMetadata,"retval" : retval}
def vkSetDebugUtilsObjectNameEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pNameInfo" in indict.keys():
         pNameInfo = indict["pNameInfo"]
    else: 
         pNameInfo = VkDebugUtilsObjectNameInfoEXT()
    print(jvulkanLib.vkSetDebugUtilsObjectNameEXT)
    retval = jvulkanLib.vkSetDebugUtilsObjectNameEXT(device, pNameInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pNameInfo" : pNameInfo,"retval" : retval}
def vkSetDebugUtilsObjectTagEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pTagInfo" in indict.keys():
         pTagInfo = indict["pTagInfo"]
    else: 
         pTagInfo = VkDebugUtilsObjectTagInfoEXT()
    print(jvulkanLib.vkSetDebugUtilsObjectTagEXT)
    retval = jvulkanLib.vkSetDebugUtilsObjectTagEXT(device, pTagInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pTagInfo" : pTagInfo,"retval" : retval}
def vkQueueBeginDebugUtilsLabelEXT(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "pLabelInfo" in indict.keys():
         pLabelInfo = indict["pLabelInfo"]
    else: 
         pLabelInfo = VkDebugUtilsLabelEXT()
    print(jvulkanLib.vkQueueBeginDebugUtilsLabelEXT)
    retval = jvulkanLib.vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"pLabelInfo" : pLabelInfo,"retval" : retval}
def vkQueueEndDebugUtilsLabelEXT(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    print(jvulkanLib.vkQueueEndDebugUtilsLabelEXT)
    retval = jvulkanLib.vkQueueEndDebugUtilsLabelEXT(queue)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"retval" : retval}
def vkQueueInsertDebugUtilsLabelEXT(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "pLabelInfo" in indict.keys():
         pLabelInfo = indict["pLabelInfo"]
    else: 
         pLabelInfo = VkDebugUtilsLabelEXT()
    print(jvulkanLib.vkQueueInsertDebugUtilsLabelEXT)
    retval = jvulkanLib.vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"pLabelInfo" : pLabelInfo,"retval" : retval}
def vkCmdBeginDebugUtilsLabelEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pLabelInfo" in indict.keys():
         pLabelInfo = indict["pLabelInfo"]
    else: 
         pLabelInfo = VkDebugUtilsLabelEXT()
    print(jvulkanLib.vkCmdBeginDebugUtilsLabelEXT)
    retval = jvulkanLib.vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pLabelInfo" : pLabelInfo,"retval" : retval}
def vkCmdEndDebugUtilsLabelEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdEndDebugUtilsLabelEXT)
    retval = jvulkanLib.vkCmdEndDebugUtilsLabelEXT(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkCmdInsertDebugUtilsLabelEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pLabelInfo" in indict.keys():
         pLabelInfo = indict["pLabelInfo"]
    else: 
         pLabelInfo = VkDebugUtilsLabelEXT()
    print(jvulkanLib.vkCmdInsertDebugUtilsLabelEXT)
    retval = jvulkanLib.vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pLabelInfo" : pLabelInfo,"retval" : retval}
def vkCreateDebugUtilsMessengerEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkDebugUtilsMessengerCreateInfoEXT()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pMessenger" in indict.keys():
         pMessenger = indict["pMessenger"]
    else: 
         pMessenger = pointer(VkDebugUtilsMessengerEXT_T())
    print(jvulkanLib.vkCreateDebugUtilsMessengerEXT)
    retval = jvulkanLib.vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pMessenger" : pMessenger,"retval" : retval}
def vkDestroyDebugUtilsMessengerEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "messenger" in indict.keys():
         messenger = indict["messenger"]
    else: 
         messenger = VkDebugUtilsMessengerEXT_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyDebugUtilsMessengerEXT)
    retval = jvulkanLib.vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"messenger" : messenger,"pAllocator" : pAllocator,"retval" : retval}
def vkSubmitDebugUtilsMessageEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "messageSeverity" in indict.keys():
         messageSeverity = indict["messageSeverity"]
    else: 
         messageSeverity = c_int()
    if "messageTypes" in indict.keys():
         messageTypes = indict["messageTypes"]
    else: 
         messageTypes = c_uint()
    if "pCallbackData" in indict.keys():
         pCallbackData = indict["pCallbackData"]
    else: 
         pCallbackData = VkDebugUtilsMessengerCallbackDataEXT()
    print(jvulkanLib.vkSubmitDebugUtilsMessageEXT)
    retval = jvulkanLib.vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"messageSeverity" : messageSeverity,"messageTypes" : messageTypes,"pCallbackData" : pCallbackData,"retval" : retval}
def vkCmdSetSampleLocationsEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pSampleLocationsInfo" in indict.keys():
         pSampleLocationsInfo = indict["pSampleLocationsInfo"]
    else: 
         pSampleLocationsInfo = VkSampleLocationsInfoEXT()
    print(jvulkanLib.vkCmdSetSampleLocationsEXT)
    retval = jvulkanLib.vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pSampleLocationsInfo" : pSampleLocationsInfo,"retval" : retval}
def vkGetPhysicalDeviceMultisamplePropertiesEXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "samples" in indict.keys():
         samples = indict["samples"]
    else: 
         samples = c_int()
    if "pMultisampleProperties" in indict.keys():
         pMultisampleProperties = indict["pMultisampleProperties"]
    else: 
         pMultisampleProperties = VkMultisamplePropertiesEXT()
    print(jvulkanLib.vkGetPhysicalDeviceMultisamplePropertiesEXT)
    retval = jvulkanLib.vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"samples" : samples,"pMultisampleProperties" : pMultisampleProperties,"retval" : retval}
def vkGetImageDrmFormatModifierPropertiesEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "image" in indict.keys():
         image = indict["image"]
    else: 
         image = VkImage_T()
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkImageDrmFormatModifierPropertiesEXT()
    print(jvulkanLib.vkGetImageDrmFormatModifierPropertiesEXT)
    retval = jvulkanLib.vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"image" : image,"pProperties" : pProperties,"retval" : retval}
def vkCreateValidationCacheEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkValidationCacheCreateInfoEXT()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pValidationCache" in indict.keys():
         pValidationCache = indict["pValidationCache"]
    else: 
         pValidationCache = pointer(VkValidationCacheEXT_T())
    print(jvulkanLib.vkCreateValidationCacheEXT)
    retval = jvulkanLib.vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pValidationCache" : pValidationCache,"retval" : retval}
def vkDestroyValidationCacheEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "validationCache" in indict.keys():
         validationCache = indict["validationCache"]
    else: 
         validationCache = VkValidationCacheEXT_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyValidationCacheEXT)
    retval = jvulkanLib.vkDestroyValidationCacheEXT(device, validationCache, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"validationCache" : validationCache,"pAllocator" : pAllocator,"retval" : retval}
def vkMergeValidationCachesEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "dstCache" in indict.keys():
         dstCache = indict["dstCache"]
    else: 
         dstCache = VkValidationCacheEXT_T()
    if "srcCacheCount" in indict.keys():
         srcCacheCount = indict["srcCacheCount"]
    else: 
         srcCacheCount = c_uint()
    if "pSrcCaches" in indict.keys():
         pSrcCaches = indict["pSrcCaches"]
    else: 
         pSrcCaches = pointer(VkValidationCacheEXT_T())
    print(jvulkanLib.vkMergeValidationCachesEXT)
    retval = jvulkanLib.vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"dstCache" : dstCache,"srcCacheCount" : srcCacheCount,"pSrcCaches" : pSrcCaches,"retval" : retval}
def vkGetValidationCacheDataEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "validationCache" in indict.keys():
         validationCache = indict["validationCache"]
    else: 
         validationCache = VkValidationCacheEXT_T()
    if "pDataSize" in indict.keys():
         pDataSize = indict["pDataSize"]
    else: 
         pDataSize = pointer(c_ulong())
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkGetValidationCacheDataEXT)
    retval = jvulkanLib.vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"validationCache" : validationCache,"pDataSize" : pDataSize,"pData" : pData,"retval" : retval}
def vkCmdBindShadingRateImageNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "imageView" in indict.keys():
         imageView = indict["imageView"]
    else: 
         imageView = VkImageView_T()
    if "imageLayout" in indict.keys():
         imageLayout = indict["imageLayout"]
    else: 
         imageLayout = c_int()
    print(jvulkanLib.vkCmdBindShadingRateImageNV)
    retval = jvulkanLib.vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"imageView" : imageView,"imageLayout" : imageLayout,"retval" : retval}
def vkCmdSetViewportShadingRatePaletteNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstViewport" in indict.keys():
         firstViewport = indict["firstViewport"]
    else: 
         firstViewport = c_uint()
    if "viewportCount" in indict.keys():
         viewportCount = indict["viewportCount"]
    else: 
         viewportCount = c_uint()
    if "pShadingRatePalettes" in indict.keys():
         pShadingRatePalettes = indict["pShadingRatePalettes"]
    else: 
         pShadingRatePalettes = VkShadingRatePaletteNV()
    print(jvulkanLib.vkCmdSetViewportShadingRatePaletteNV)
    retval = jvulkanLib.vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstViewport" : firstViewport,"viewportCount" : viewportCount,"pShadingRatePalettes" : pShadingRatePalettes,"retval" : retval}
def vkCmdSetCoarseSampleOrderNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "sampleOrderType" in indict.keys():
         sampleOrderType = indict["sampleOrderType"]
    else: 
         sampleOrderType = c_int()
    if "customSampleOrderCount" in indict.keys():
         customSampleOrderCount = indict["customSampleOrderCount"]
    else: 
         customSampleOrderCount = c_uint()
    if "pCustomSampleOrders" in indict.keys():
         pCustomSampleOrders = indict["pCustomSampleOrders"]
    else: 
         pCustomSampleOrders = VkCoarseSampleOrderCustomNV()
    print(jvulkanLib.vkCmdSetCoarseSampleOrderNV)
    retval = jvulkanLib.vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"sampleOrderType" : sampleOrderType,"customSampleOrderCount" : customSampleOrderCount,"pCustomSampleOrders" : pCustomSampleOrders,"retval" : retval}
def vkCreateAccelerationStructureNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkAccelerationStructureCreateInfoNV()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pAccelerationStructure" in indict.keys():
         pAccelerationStructure = indict["pAccelerationStructure"]
    else: 
         pAccelerationStructure = pointer(VkAccelerationStructureNV_T())
    print(jvulkanLib.vkCreateAccelerationStructureNV)
    retval = jvulkanLib.vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pAccelerationStructure" : pAccelerationStructure,"retval" : retval}
def vkDestroyAccelerationStructureNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "accelerationStructure" in indict.keys():
         accelerationStructure = indict["accelerationStructure"]
    else: 
         accelerationStructure = VkAccelerationStructureNV_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyAccelerationStructureNV)
    retval = jvulkanLib.vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"accelerationStructure" : accelerationStructure,"pAllocator" : pAllocator,"retval" : retval}
def vkGetAccelerationStructureMemoryRequirementsNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkAccelerationStructureMemoryRequirementsInfoNV()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetAccelerationStructureMemoryRequirementsNV)
    retval = jvulkanLib.vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkBindAccelerationStructureMemoryNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "bindInfoCount" in indict.keys():
         bindInfoCount = indict["bindInfoCount"]
    else: 
         bindInfoCount = c_uint()
    if "pBindInfos" in indict.keys():
         pBindInfos = indict["pBindInfos"]
    else: 
         pBindInfos = VkBindAccelerationStructureMemoryInfoNV()
    print(jvulkanLib.vkBindAccelerationStructureMemoryNV)
    retval = jvulkanLib.vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"bindInfoCount" : bindInfoCount,"pBindInfos" : pBindInfos,"retval" : retval}
def vkCmdBuildAccelerationStructureNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkAccelerationStructureInfoNV()
    if "instanceData" in indict.keys():
         instanceData = indict["instanceData"]
    else: 
         instanceData = VkBuffer_T()
    if "instanceOffset" in indict.keys():
         instanceOffset = indict["instanceOffset"]
    else: 
         instanceOffset = c_ulong()
    if "update" in indict.keys():
         update = indict["update"]
    else: 
         update = c_uint()
    if "dst" in indict.keys():
         dst = indict["dst"]
    else: 
         dst = VkAccelerationStructureNV_T()
    if "src" in indict.keys():
         src = indict["src"]
    else: 
         src = VkAccelerationStructureNV_T()
    if "scratch" in indict.keys():
         scratch = indict["scratch"]
    else: 
         scratch = VkBuffer_T()
    if "scratchOffset" in indict.keys():
         scratchOffset = indict["scratchOffset"]
    else: 
         scratchOffset = c_ulong()
    print(jvulkanLib.vkCmdBuildAccelerationStructureNV)
    retval = jvulkanLib.vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pInfo" : pInfo,"instanceData" : instanceData,"instanceOffset" : instanceOffset,"update" : update,"dst" : dst,"src" : src,"scratch" : scratch,"scratchOffset" : scratchOffset,"retval" : retval}
def vkCmdCopyAccelerationStructureNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "dst" in indict.keys():
         dst = indict["dst"]
    else: 
         dst = VkAccelerationStructureNV_T()
    if "src" in indict.keys():
         src = indict["src"]
    else: 
         src = VkAccelerationStructureNV_T()
    if "mode" in indict.keys():
         mode = indict["mode"]
    else: 
         mode = c_int()
    print(jvulkanLib.vkCmdCopyAccelerationStructureNV)
    retval = jvulkanLib.vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"dst" : dst,"src" : src,"mode" : mode,"retval" : retval}
def vkCmdTraceRaysNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "raygenShaderBindingTableBuffer" in indict.keys():
         raygenShaderBindingTableBuffer = indict["raygenShaderBindingTableBuffer"]
    else: 
         raygenShaderBindingTableBuffer = VkBuffer_T()
    if "raygenShaderBindingOffset" in indict.keys():
         raygenShaderBindingOffset = indict["raygenShaderBindingOffset"]
    else: 
         raygenShaderBindingOffset = c_ulong()
    if "missShaderBindingTableBuffer" in indict.keys():
         missShaderBindingTableBuffer = indict["missShaderBindingTableBuffer"]
    else: 
         missShaderBindingTableBuffer = VkBuffer_T()
    if "missShaderBindingOffset" in indict.keys():
         missShaderBindingOffset = indict["missShaderBindingOffset"]
    else: 
         missShaderBindingOffset = c_ulong()
    if "missShaderBindingStride" in indict.keys():
         missShaderBindingStride = indict["missShaderBindingStride"]
    else: 
         missShaderBindingStride = c_ulong()
    if "hitShaderBindingTableBuffer" in indict.keys():
         hitShaderBindingTableBuffer = indict["hitShaderBindingTableBuffer"]
    else: 
         hitShaderBindingTableBuffer = VkBuffer_T()
    if "hitShaderBindingOffset" in indict.keys():
         hitShaderBindingOffset = indict["hitShaderBindingOffset"]
    else: 
         hitShaderBindingOffset = c_ulong()
    if "hitShaderBindingStride" in indict.keys():
         hitShaderBindingStride = indict["hitShaderBindingStride"]
    else: 
         hitShaderBindingStride = c_ulong()
    if "callableShaderBindingTableBuffer" in indict.keys():
         callableShaderBindingTableBuffer = indict["callableShaderBindingTableBuffer"]
    else: 
         callableShaderBindingTableBuffer = VkBuffer_T()
    if "callableShaderBindingOffset" in indict.keys():
         callableShaderBindingOffset = indict["callableShaderBindingOffset"]
    else: 
         callableShaderBindingOffset = c_ulong()
    if "callableShaderBindingStride" in indict.keys():
         callableShaderBindingStride = indict["callableShaderBindingStride"]
    else: 
         callableShaderBindingStride = c_ulong()
    if "width" in indict.keys():
         width = indict["width"]
    else: 
         width = c_uint()
    if "height" in indict.keys():
         height = indict["height"]
    else: 
         height = c_uint()
    if "depth" in indict.keys():
         depth = indict["depth"]
    else: 
         depth = c_uint()
    print(jvulkanLib.vkCmdTraceRaysNV)
    retval = jvulkanLib.vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"raygenShaderBindingTableBuffer" : raygenShaderBindingTableBuffer,"raygenShaderBindingOffset" : raygenShaderBindingOffset,"missShaderBindingTableBuffer" : missShaderBindingTableBuffer,"missShaderBindingOffset" : missShaderBindingOffset,"missShaderBindingStride" : missShaderBindingStride,"hitShaderBindingTableBuffer" : hitShaderBindingTableBuffer,"hitShaderBindingOffset" : hitShaderBindingOffset,"hitShaderBindingStride" : hitShaderBindingStride,"callableShaderBindingTableBuffer" : callableShaderBindingTableBuffer,"callableShaderBindingOffset" : callableShaderBindingOffset,"callableShaderBindingStride" : callableShaderBindingStride,"width" : width,"height" : height,"depth" : depth,"retval" : retval}
def vkCreateRayTracingPipelinesNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipelineCache" in indict.keys():
         pipelineCache = indict["pipelineCache"]
    else: 
         pipelineCache = VkPipelineCache_T()
    if "createInfoCount" in indict.keys():
         createInfoCount = indict["createInfoCount"]
    else: 
         createInfoCount = c_uint()
    if "pCreateInfos" in indict.keys():
         pCreateInfos = indict["pCreateInfos"]
    else: 
         pCreateInfos = VkRayTracingPipelineCreateInfoNV()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPipelines" in indict.keys():
         pPipelines = indict["pPipelines"]
    else: 
         pPipelines = pointer(VkPipeline_T())
    print(jvulkanLib.vkCreateRayTracingPipelinesNV)
    retval = jvulkanLib.vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipelineCache" : pipelineCache,"createInfoCount" : createInfoCount,"pCreateInfos" : pCreateInfos,"pAllocator" : pAllocator,"pPipelines" : pPipelines,"retval" : retval}
def vkGetRayTracingShaderGroupHandlesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "firstGroup" in indict.keys():
         firstGroup = indict["firstGroup"]
    else: 
         firstGroup = c_uint()
    if "groupCount" in indict.keys():
         groupCount = indict["groupCount"]
    else: 
         groupCount = c_uint()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkGetRayTracingShaderGroupHandlesKHR)
    retval = jvulkanLib.vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"firstGroup" : firstGroup,"groupCount" : groupCount,"dataSize" : dataSize,"pData" : pData,"retval" : retval}
def vkGetRayTracingShaderGroupHandlesNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "firstGroup" in indict.keys():
         firstGroup = indict["firstGroup"]
    else: 
         firstGroup = c_uint()
    if "groupCount" in indict.keys():
         groupCount = indict["groupCount"]
    else: 
         groupCount = c_uint()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkGetRayTracingShaderGroupHandlesNV)
    retval = jvulkanLib.vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"firstGroup" : firstGroup,"groupCount" : groupCount,"dataSize" : dataSize,"pData" : pData,"retval" : retval}
def vkGetAccelerationStructureHandleNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "accelerationStructure" in indict.keys():
         accelerationStructure = indict["accelerationStructure"]
    else: 
         accelerationStructure = VkAccelerationStructureNV_T()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkGetAccelerationStructureHandleNV)
    retval = jvulkanLib.vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"accelerationStructure" : accelerationStructure,"dataSize" : dataSize,"pData" : pData,"retval" : retval}
def vkCmdWriteAccelerationStructuresPropertiesNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "accelerationStructureCount" in indict.keys():
         accelerationStructureCount = indict["accelerationStructureCount"]
    else: 
         accelerationStructureCount = c_uint()
    if "pAccelerationStructures" in indict.keys():
         pAccelerationStructures = indict["pAccelerationStructures"]
    else: 
         pAccelerationStructures = pointer(VkAccelerationStructureNV_T())
    if "queryType" in indict.keys():
         queryType = indict["queryType"]
    else: 
         queryType = c_int()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    print(jvulkanLib.vkCmdWriteAccelerationStructuresPropertiesNV)
    retval = jvulkanLib.vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"accelerationStructureCount" : accelerationStructureCount,"pAccelerationStructures" : pAccelerationStructures,"queryType" : queryType,"queryPool" : queryPool,"firstQuery" : firstQuery,"retval" : retval}
def vkCompileDeferredNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "shader" in indict.keys():
         shader = indict["shader"]
    else: 
         shader = c_uint()
    print(jvulkanLib.vkCompileDeferredNV)
    retval = jvulkanLib.vkCompileDeferredNV(device, pipeline, shader)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"shader" : shader,"retval" : retval}
def vkGetMemoryHostPointerPropertiesEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "handleType" in indict.keys():
         handleType = indict["handleType"]
    else: 
         handleType = c_int()
    if "pHostPointer" in indict.keys():
         pHostPointer = indict["pHostPointer"]
    else: 
         pHostPointer = c_void_p()
    if "pMemoryHostPointerProperties" in indict.keys():
         pMemoryHostPointerProperties = indict["pMemoryHostPointerProperties"]
    else: 
         pMemoryHostPointerProperties = VkMemoryHostPointerPropertiesEXT()
    print(jvulkanLib.vkGetMemoryHostPointerPropertiesEXT)
    retval = jvulkanLib.vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"handleType" : handleType,"pHostPointer" : pHostPointer,"pMemoryHostPointerProperties" : pMemoryHostPointerProperties,"retval" : retval}
def vkCmdWriteBufferMarkerAMD(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineStage" in indict.keys():
         pipelineStage = indict["pipelineStage"]
    else: 
         pipelineStage = c_int()
    if "dstBuffer" in indict.keys():
         dstBuffer = indict["dstBuffer"]
    else: 
         dstBuffer = VkBuffer_T()
    if "dstOffset" in indict.keys():
         dstOffset = indict["dstOffset"]
    else: 
         dstOffset = c_ulong()
    if "marker" in indict.keys():
         marker = indict["marker"]
    else: 
         marker = c_uint()
    print(jvulkanLib.vkCmdWriteBufferMarkerAMD)
    retval = jvulkanLib.vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineStage" : pipelineStage,"dstBuffer" : dstBuffer,"dstOffset" : dstOffset,"marker" : marker,"retval" : retval}
def vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pTimeDomainCount" in indict.keys():
         pTimeDomainCount = indict["pTimeDomainCount"]
    else: 
         pTimeDomainCount = pointer(c_uint())
    if "pTimeDomains" in indict.keys():
         pTimeDomains = indict["pTimeDomains"]
    else: 
         pTimeDomains = pointer(c_int())
    print(jvulkanLib.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)
    retval = jvulkanLib.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pTimeDomainCount" : pTimeDomainCount,"pTimeDomains" : pTimeDomains,"retval" : retval}
def vkGetCalibratedTimestampsEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "timestampCount" in indict.keys():
         timestampCount = indict["timestampCount"]
    else: 
         timestampCount = c_uint()
    if "pTimestampInfos" in indict.keys():
         pTimestampInfos = indict["pTimestampInfos"]
    else: 
         pTimestampInfos = VkCalibratedTimestampInfoEXT()
    if "pTimestamps" in indict.keys():
         pTimestamps = indict["pTimestamps"]
    else: 
         pTimestamps = pointer(c_ulong())
    if "pMaxDeviation" in indict.keys():
         pMaxDeviation = indict["pMaxDeviation"]
    else: 
         pMaxDeviation = pointer(c_ulong())
    print(jvulkanLib.vkGetCalibratedTimestampsEXT)
    retval = jvulkanLib.vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"timestampCount" : timestampCount,"pTimestampInfos" : pTimestampInfos,"pTimestamps" : pTimestamps,"pMaxDeviation" : pMaxDeviation,"retval" : retval}
def vkCmdDrawMeshTasksNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "taskCount" in indict.keys():
         taskCount = indict["taskCount"]
    else: 
         taskCount = c_uint()
    if "firstTask" in indict.keys():
         firstTask = indict["firstTask"]
    else: 
         firstTask = c_uint()
    print(jvulkanLib.vkCmdDrawMeshTasksNV)
    retval = jvulkanLib.vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"taskCount" : taskCount,"firstTask" : firstTask,"retval" : retval}
def vkCmdDrawMeshTasksIndirectNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "drawCount" in indict.keys():
         drawCount = indict["drawCount"]
    else: 
         drawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawMeshTasksIndirectNV)
    retval = jvulkanLib.vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"drawCount" : drawCount,"stride" : stride,"retval" : retval}
def vkCmdDrawMeshTasksIndirectCountNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "buffer" in indict.keys():
         buffer = indict["buffer"]
    else: 
         buffer = VkBuffer_T()
    if "offset" in indict.keys():
         offset = indict["offset"]
    else: 
         offset = c_ulong()
    if "countBuffer" in indict.keys():
         countBuffer = indict["countBuffer"]
    else: 
         countBuffer = VkBuffer_T()
    if "countBufferOffset" in indict.keys():
         countBufferOffset = indict["countBufferOffset"]
    else: 
         countBufferOffset = c_ulong()
    if "maxDrawCount" in indict.keys():
         maxDrawCount = indict["maxDrawCount"]
    else: 
         maxDrawCount = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawMeshTasksIndirectCountNV)
    retval = jvulkanLib.vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"buffer" : buffer,"offset" : offset,"countBuffer" : countBuffer,"countBufferOffset" : countBufferOffset,"maxDrawCount" : maxDrawCount,"stride" : stride,"retval" : retval}
def vkCmdSetExclusiveScissorNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstExclusiveScissor" in indict.keys():
         firstExclusiveScissor = indict["firstExclusiveScissor"]
    else: 
         firstExclusiveScissor = c_uint()
    if "exclusiveScissorCount" in indict.keys():
         exclusiveScissorCount = indict["exclusiveScissorCount"]
    else: 
         exclusiveScissorCount = c_uint()
    if "pExclusiveScissors" in indict.keys():
         pExclusiveScissors = indict["pExclusiveScissors"]
    else: 
         pExclusiveScissors = VkRect2D()
    print(jvulkanLib.vkCmdSetExclusiveScissorNV)
    retval = jvulkanLib.vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstExclusiveScissor" : firstExclusiveScissor,"exclusiveScissorCount" : exclusiveScissorCount,"pExclusiveScissors" : pExclusiveScissors,"retval" : retval}
def vkCmdSetCheckpointNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pCheckpointMarker" in indict.keys():
         pCheckpointMarker = indict["pCheckpointMarker"]
    else: 
         pCheckpointMarker = c_void_p()
    print(jvulkanLib.vkCmdSetCheckpointNV)
    retval = jvulkanLib.vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pCheckpointMarker" : pCheckpointMarker,"retval" : retval}
def vkGetQueueCheckpointDataNV(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "pCheckpointDataCount" in indict.keys():
         pCheckpointDataCount = indict["pCheckpointDataCount"]
    else: 
         pCheckpointDataCount = pointer(c_uint())
    if "pCheckpointData" in indict.keys():
         pCheckpointData = indict["pCheckpointData"]
    else: 
         pCheckpointData = VkCheckpointDataNV()
    print(jvulkanLib.vkGetQueueCheckpointDataNV)
    retval = jvulkanLib.vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"pCheckpointDataCount" : pCheckpointDataCount,"pCheckpointData" : pCheckpointData,"retval" : retval}
def vkInitializePerformanceApiINTEL(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInitializeInfo" in indict.keys():
         pInitializeInfo = indict["pInitializeInfo"]
    else: 
         pInitializeInfo = VkInitializePerformanceApiInfoINTEL()
    print(jvulkanLib.vkInitializePerformanceApiINTEL)
    retval = jvulkanLib.vkInitializePerformanceApiINTEL(device, pInitializeInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInitializeInfo" : pInitializeInfo,"retval" : retval}
def vkUninitializePerformanceApiINTEL(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    print(jvulkanLib.vkUninitializePerformanceApiINTEL)
    retval = jvulkanLib.vkUninitializePerformanceApiINTEL(device)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"retval" : retval}
def vkCmdSetPerformanceMarkerINTEL(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pMarkerInfo" in indict.keys():
         pMarkerInfo = indict["pMarkerInfo"]
    else: 
         pMarkerInfo = VkPerformanceMarkerInfoINTEL()
    print(jvulkanLib.vkCmdSetPerformanceMarkerINTEL)
    retval = jvulkanLib.vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pMarkerInfo" : pMarkerInfo,"retval" : retval}
def vkCmdSetPerformanceStreamMarkerINTEL(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pMarkerInfo" in indict.keys():
         pMarkerInfo = indict["pMarkerInfo"]
    else: 
         pMarkerInfo = VkPerformanceStreamMarkerInfoINTEL()
    print(jvulkanLib.vkCmdSetPerformanceStreamMarkerINTEL)
    retval = jvulkanLib.vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pMarkerInfo" : pMarkerInfo,"retval" : retval}
def vkCmdSetPerformanceOverrideINTEL(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pOverrideInfo" in indict.keys():
         pOverrideInfo = indict["pOverrideInfo"]
    else: 
         pOverrideInfo = VkPerformanceOverrideInfoINTEL()
    print(jvulkanLib.vkCmdSetPerformanceOverrideINTEL)
    retval = jvulkanLib.vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pOverrideInfo" : pOverrideInfo,"retval" : retval}
def vkAcquirePerformanceConfigurationINTEL(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pAcquireInfo" in indict.keys():
         pAcquireInfo = indict["pAcquireInfo"]
    else: 
         pAcquireInfo = VkPerformanceConfigurationAcquireInfoINTEL()
    if "pConfiguration" in indict.keys():
         pConfiguration = indict["pConfiguration"]
    else: 
         pConfiguration = pointer(VkPerformanceConfigurationINTEL_T())
    print(jvulkanLib.vkAcquirePerformanceConfigurationINTEL)
    retval = jvulkanLib.vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pAcquireInfo" : pAcquireInfo,"pConfiguration" : pConfiguration,"retval" : retval}
def vkReleasePerformanceConfigurationINTEL(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "configuration" in indict.keys():
         configuration = indict["configuration"]
    else: 
         configuration = VkPerformanceConfigurationINTEL_T()
    print(jvulkanLib.vkReleasePerformanceConfigurationINTEL)
    retval = jvulkanLib.vkReleasePerformanceConfigurationINTEL(device, configuration)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"configuration" : configuration,"retval" : retval}
def vkQueueSetPerformanceConfigurationINTEL(indict):
    indict = preprocess(indict)
    if "queue" in indict.keys():
         queue = indict["queue"]
    else: 
         queue = VkQueue_T()
    if "configuration" in indict.keys():
         configuration = indict["configuration"]
    else: 
         configuration = VkPerformanceConfigurationINTEL_T()
    print(jvulkanLib.vkQueueSetPerformanceConfigurationINTEL)
    retval = jvulkanLib.vkQueueSetPerformanceConfigurationINTEL(queue, configuration)
    if retval:
       raise(BaseException(str(retval)))
    return {"queue" : queue,"configuration" : configuration,"retval" : retval}
def vkGetPerformanceParameterINTEL(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "parameter" in indict.keys():
         parameter = indict["parameter"]
    else: 
         parameter = c_int()
    if "pValue" in indict.keys():
         pValue = indict["pValue"]
    else: 
         pValue = VkPerformanceValueINTEL()
    print(jvulkanLib.vkGetPerformanceParameterINTEL)
    retval = jvulkanLib.vkGetPerformanceParameterINTEL(device, parameter, pValue)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"parameter" : parameter,"pValue" : pValue,"retval" : retval}
def vkSetLocalDimmingAMD(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "swapChain" in indict.keys():
         swapChain = indict["swapChain"]
    else: 
         swapChain = VkSwapchainKHR_T()
    if "localDimmingEnable" in indict.keys():
         localDimmingEnable = indict["localDimmingEnable"]
    else: 
         localDimmingEnable = c_uint()
    print(jvulkanLib.vkSetLocalDimmingAMD)
    retval = jvulkanLib.vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"swapChain" : swapChain,"localDimmingEnable" : localDimmingEnable,"retval" : retval}
def vkGetBufferDeviceAddressEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkBufferDeviceAddressInfo()
    print(jvulkanLib.vkGetBufferDeviceAddressEXT)
    retval = jvulkanLib.vkGetBufferDeviceAddressEXT(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkGetPhysicalDeviceToolPropertiesEXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pToolCount" in indict.keys():
         pToolCount = indict["pToolCount"]
    else: 
         pToolCount = pointer(c_uint())
    if "pToolProperties" in indict.keys():
         pToolProperties = indict["pToolProperties"]
    else: 
         pToolProperties = VkPhysicalDeviceToolProperties()
    print(jvulkanLib.vkGetPhysicalDeviceToolPropertiesEXT)
    retval = jvulkanLib.vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pToolCount" : pToolCount,"pToolProperties" : pToolProperties,"retval" : retval}
def vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pPropertyCount" in indict.keys():
         pPropertyCount = indict["pPropertyCount"]
    else: 
         pPropertyCount = pointer(c_uint())
    if "pProperties" in indict.keys():
         pProperties = indict["pProperties"]
    else: 
         pProperties = VkCooperativeMatrixPropertiesNV()
    print(jvulkanLib.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)
    retval = jvulkanLib.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pPropertyCount" : pPropertyCount,"pProperties" : pProperties,"retval" : retval}
def vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "pCombinationCount" in indict.keys():
         pCombinationCount = indict["pCombinationCount"]
    else: 
         pCombinationCount = pointer(c_uint())
    if "pCombinations" in indict.keys():
         pCombinations = indict["pCombinations"]
    else: 
         pCombinations = VkFramebufferMixedSamplesCombinationNV()
    print(jvulkanLib.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)
    retval = jvulkanLib.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"pCombinationCount" : pCombinationCount,"pCombinations" : pCombinations,"retval" : retval}
def vkCreateHeadlessSurfaceEXT(indict):
    indict = preprocess(indict)
    if "instance" in indict.keys():
         instance = indict["instance"]
    else: 
         instance = VkInstance_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkHeadlessSurfaceCreateInfoEXT()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pSurface" in indict.keys():
         pSurface = indict["pSurface"]
    else: 
         pSurface = pointer(VkSurfaceKHR_T())
    print(jvulkanLib.vkCreateHeadlessSurfaceEXT)
    retval = jvulkanLib.vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface)
    if retval:
       raise(BaseException(str(retval)))
    return {"instance" : instance,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pSurface" : pSurface,"retval" : retval}
def vkCmdSetLineStippleEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "lineStippleFactor" in indict.keys():
         lineStippleFactor = indict["lineStippleFactor"]
    else: 
         lineStippleFactor = c_uint()
    if "lineStipplePattern" in indict.keys():
         lineStipplePattern = indict["lineStipplePattern"]
    else: 
         lineStipplePattern = c_ushort()
    print(jvulkanLib.vkCmdSetLineStippleEXT)
    retval = jvulkanLib.vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"lineStippleFactor" : lineStippleFactor,"lineStipplePattern" : lineStipplePattern,"retval" : retval}
def vkResetQueryPoolEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    if "queryCount" in indict.keys():
         queryCount = indict["queryCount"]
    else: 
         queryCount = c_uint()
    print(jvulkanLib.vkResetQueryPoolEXT)
    retval = jvulkanLib.vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"queryPool" : queryPool,"firstQuery" : firstQuery,"queryCount" : queryCount,"retval" : retval}
def vkCmdSetCullModeEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "cullMode" in indict.keys():
         cullMode = indict["cullMode"]
    else: 
         cullMode = c_uint()
    print(jvulkanLib.vkCmdSetCullModeEXT)
    retval = jvulkanLib.vkCmdSetCullModeEXT(commandBuffer, cullMode)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"cullMode" : cullMode,"retval" : retval}
def vkCmdSetFrontFaceEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "frontFace" in indict.keys():
         frontFace = indict["frontFace"]
    else: 
         frontFace = c_int()
    print(jvulkanLib.vkCmdSetFrontFaceEXT)
    retval = jvulkanLib.vkCmdSetFrontFaceEXT(commandBuffer, frontFace)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"frontFace" : frontFace,"retval" : retval}
def vkCmdSetPrimitiveTopologyEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "primitiveTopology" in indict.keys():
         primitiveTopology = indict["primitiveTopology"]
    else: 
         primitiveTopology = c_int()
    print(jvulkanLib.vkCmdSetPrimitiveTopologyEXT)
    retval = jvulkanLib.vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"primitiveTopology" : primitiveTopology,"retval" : retval}
def vkCmdSetViewportWithCountEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "viewportCount" in indict.keys():
         viewportCount = indict["viewportCount"]
    else: 
         viewportCount = c_uint()
    if "pViewports" in indict.keys():
         pViewports = indict["pViewports"]
    else: 
         pViewports = VkViewport()
    print(jvulkanLib.vkCmdSetViewportWithCountEXT)
    retval = jvulkanLib.vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"viewportCount" : viewportCount,"pViewports" : pViewports,"retval" : retval}
def vkCmdSetScissorWithCountEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "scissorCount" in indict.keys():
         scissorCount = indict["scissorCount"]
    else: 
         scissorCount = c_uint()
    if "pScissors" in indict.keys():
         pScissors = indict["pScissors"]
    else: 
         pScissors = VkRect2D()
    print(jvulkanLib.vkCmdSetScissorWithCountEXT)
    retval = jvulkanLib.vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"scissorCount" : scissorCount,"pScissors" : pScissors,"retval" : retval}
def vkCmdBindVertexBuffers2EXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "firstBinding" in indict.keys():
         firstBinding = indict["firstBinding"]
    else: 
         firstBinding = c_uint()
    if "bindingCount" in indict.keys():
         bindingCount = indict["bindingCount"]
    else: 
         bindingCount = c_uint()
    if "pBuffers" in indict.keys():
         pBuffers = indict["pBuffers"]
    else: 
         pBuffers = pointer(VkBuffer_T())
    if "pOffsets" in indict.keys():
         pOffsets = indict["pOffsets"]
    else: 
         pOffsets = pointer(c_ulong())
    if "pSizes" in indict.keys():
         pSizes = indict["pSizes"]
    else: 
         pSizes = pointer(c_ulong())
    if "pStrides" in indict.keys():
         pStrides = indict["pStrides"]
    else: 
         pStrides = pointer(c_ulong())
    print(jvulkanLib.vkCmdBindVertexBuffers2EXT)
    retval = jvulkanLib.vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"firstBinding" : firstBinding,"bindingCount" : bindingCount,"pBuffers" : pBuffers,"pOffsets" : pOffsets,"pSizes" : pSizes,"pStrides" : pStrides,"retval" : retval}
def vkCmdSetDepthTestEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthTestEnable" in indict.keys():
         depthTestEnable = indict["depthTestEnable"]
    else: 
         depthTestEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthTestEnableEXT)
    retval = jvulkanLib.vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthTestEnable" : depthTestEnable,"retval" : retval}
def vkCmdSetDepthWriteEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthWriteEnable" in indict.keys():
         depthWriteEnable = indict["depthWriteEnable"]
    else: 
         depthWriteEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthWriteEnableEXT)
    retval = jvulkanLib.vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthWriteEnable" : depthWriteEnable,"retval" : retval}
def vkCmdSetDepthCompareOpEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthCompareOp" in indict.keys():
         depthCompareOp = indict["depthCompareOp"]
    else: 
         depthCompareOp = c_int()
    print(jvulkanLib.vkCmdSetDepthCompareOpEXT)
    retval = jvulkanLib.vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthCompareOp" : depthCompareOp,"retval" : retval}
def vkCmdSetDepthBoundsTestEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthBoundsTestEnable" in indict.keys():
         depthBoundsTestEnable = indict["depthBoundsTestEnable"]
    else: 
         depthBoundsTestEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthBoundsTestEnableEXT)
    retval = jvulkanLib.vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthBoundsTestEnable" : depthBoundsTestEnable,"retval" : retval}
def vkCmdSetStencilTestEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "stencilTestEnable" in indict.keys():
         stencilTestEnable = indict["stencilTestEnable"]
    else: 
         stencilTestEnable = c_uint()
    print(jvulkanLib.vkCmdSetStencilTestEnableEXT)
    retval = jvulkanLib.vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"stencilTestEnable" : stencilTestEnable,"retval" : retval}
def vkCmdSetStencilOpEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "faceMask" in indict.keys():
         faceMask = indict["faceMask"]
    else: 
         faceMask = c_uint()
    if "failOp" in indict.keys():
         failOp = indict["failOp"]
    else: 
         failOp = c_int()
    if "passOp" in indict.keys():
         passOp = indict["passOp"]
    else: 
         passOp = c_int()
    if "depthFailOp" in indict.keys():
         depthFailOp = indict["depthFailOp"]
    else: 
         depthFailOp = c_int()
    if "compareOp" in indict.keys():
         compareOp = indict["compareOp"]
    else: 
         compareOp = c_int()
    print(jvulkanLib.vkCmdSetStencilOpEXT)
    retval = jvulkanLib.vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"faceMask" : faceMask,"failOp" : failOp,"passOp" : passOp,"depthFailOp" : depthFailOp,"compareOp" : compareOp,"retval" : retval}
def vkGetGeneratedCommandsMemoryRequirementsNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkGeneratedCommandsMemoryRequirementsInfoNV()
    if "pMemoryRequirements" in indict.keys():
         pMemoryRequirements = indict["pMemoryRequirements"]
    else: 
         pMemoryRequirements = VkMemoryRequirements2()
    print(jvulkanLib.vkGetGeneratedCommandsMemoryRequirementsNV)
    retval = jvulkanLib.vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"pMemoryRequirements" : pMemoryRequirements,"retval" : retval}
def vkCmdPreprocessGeneratedCommandsNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pGeneratedCommandsInfo" in indict.keys():
         pGeneratedCommandsInfo = indict["pGeneratedCommandsInfo"]
    else: 
         pGeneratedCommandsInfo = VkGeneratedCommandsInfoNV()
    print(jvulkanLib.vkCmdPreprocessGeneratedCommandsNV)
    retval = jvulkanLib.vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pGeneratedCommandsInfo" : pGeneratedCommandsInfo,"retval" : retval}
def vkCmdExecuteGeneratedCommandsNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "isPreprocessed" in indict.keys():
         isPreprocessed = indict["isPreprocessed"]
    else: 
         isPreprocessed = c_uint()
    if "pGeneratedCommandsInfo" in indict.keys():
         pGeneratedCommandsInfo = indict["pGeneratedCommandsInfo"]
    else: 
         pGeneratedCommandsInfo = VkGeneratedCommandsInfoNV()
    print(jvulkanLib.vkCmdExecuteGeneratedCommandsNV)
    retval = jvulkanLib.vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"isPreprocessed" : isPreprocessed,"pGeneratedCommandsInfo" : pGeneratedCommandsInfo,"retval" : retval}
def vkCmdBindPipelineShaderGroupNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineBindPoint" in indict.keys():
         pipelineBindPoint = indict["pipelineBindPoint"]
    else: 
         pipelineBindPoint = c_int()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "groupIndex" in indict.keys():
         groupIndex = indict["groupIndex"]
    else: 
         groupIndex = c_uint()
    print(jvulkanLib.vkCmdBindPipelineShaderGroupNV)
    retval = jvulkanLib.vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineBindPoint" : pipelineBindPoint,"pipeline" : pipeline,"groupIndex" : groupIndex,"retval" : retval}
def vkCreateIndirectCommandsLayoutNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkIndirectCommandsLayoutCreateInfoNV()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pIndirectCommandsLayout" in indict.keys():
         pIndirectCommandsLayout = indict["pIndirectCommandsLayout"]
    else: 
         pIndirectCommandsLayout = pointer(VkIndirectCommandsLayoutNV_T())
    print(jvulkanLib.vkCreateIndirectCommandsLayoutNV)
    retval = jvulkanLib.vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pIndirectCommandsLayout" : pIndirectCommandsLayout,"retval" : retval}
def vkDestroyIndirectCommandsLayoutNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "indirectCommandsLayout" in indict.keys():
         indirectCommandsLayout = indict["indirectCommandsLayout"]
    else: 
         indirectCommandsLayout = VkIndirectCommandsLayoutNV_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyIndirectCommandsLayoutNV)
    retval = jvulkanLib.vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"indirectCommandsLayout" : indirectCommandsLayout,"pAllocator" : pAllocator,"retval" : retval}
def vkAcquireDrmDisplayEXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "drmFd" in indict.keys():
         drmFd = indict["drmFd"]
    else: 
         drmFd = c_int()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    print(jvulkanLib.vkAcquireDrmDisplayEXT)
    retval = jvulkanLib.vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"drmFd" : drmFd,"display" : display,"retval" : retval}
def vkGetDrmDisplayEXT(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "drmFd" in indict.keys():
         drmFd = indict["drmFd"]
    else: 
         drmFd = c_int()
    if "connectorId" in indict.keys():
         connectorId = indict["connectorId"]
    else: 
         connectorId = c_uint()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = pointer(VkDisplayKHR_T())
    print(jvulkanLib.vkGetDrmDisplayEXT)
    retval = jvulkanLib.vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"drmFd" : drmFd,"connectorId" : connectorId,"display" : display,"retval" : retval}
def vkCreatePrivateDataSlotEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkPrivateDataSlotCreateInfo()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPrivateDataSlot" in indict.keys():
         pPrivateDataSlot = indict["pPrivateDataSlot"]
    else: 
         pPrivateDataSlot = pointer(VkPrivateDataSlot_T())
    print(jvulkanLib.vkCreatePrivateDataSlotEXT)
    retval = jvulkanLib.vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pPrivateDataSlot" : pPrivateDataSlot,"retval" : retval}
def vkDestroyPrivateDataSlotEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "privateDataSlot" in indict.keys():
         privateDataSlot = indict["privateDataSlot"]
    else: 
         privateDataSlot = VkPrivateDataSlot_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyPrivateDataSlotEXT)
    retval = jvulkanLib.vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"privateDataSlot" : privateDataSlot,"pAllocator" : pAllocator,"retval" : retval}
def vkSetPrivateDataEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "objectType" in indict.keys():
         objectType = indict["objectType"]
    else: 
         objectType = c_int()
    if "objectHandle" in indict.keys():
         objectHandle = indict["objectHandle"]
    else: 
         objectHandle = c_ulong()
    if "privateDataSlot" in indict.keys():
         privateDataSlot = indict["privateDataSlot"]
    else: 
         privateDataSlot = VkPrivateDataSlot_T()
    if "data" in indict.keys():
         data = indict["data"]
    else: 
         data = c_ulong()
    print(jvulkanLib.vkSetPrivateDataEXT)
    retval = jvulkanLib.vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"objectType" : objectType,"objectHandle" : objectHandle,"privateDataSlot" : privateDataSlot,"data" : data,"retval" : retval}
def vkGetPrivateDataEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "objectType" in indict.keys():
         objectType = indict["objectType"]
    else: 
         objectType = c_int()
    if "objectHandle" in indict.keys():
         objectHandle = indict["objectHandle"]
    else: 
         objectHandle = c_ulong()
    if "privateDataSlot" in indict.keys():
         privateDataSlot = indict["privateDataSlot"]
    else: 
         privateDataSlot = VkPrivateDataSlot_T()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = pointer(c_ulong())
    print(jvulkanLib.vkGetPrivateDataEXT)
    retval = jvulkanLib.vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"objectType" : objectType,"objectHandle" : objectHandle,"privateDataSlot" : privateDataSlot,"pData" : pData,"retval" : retval}
def vkCmdSetFragmentShadingRateEnumNV(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "shadingRate" in indict.keys():
         shadingRate = indict["shadingRate"]
    else: 
         shadingRate = c_int()
    if "combinerOps" in indict.keys():
         combinerOps = indict["combinerOps"]
    else: 
         combinerOps = pointer(c_int())
    print(jvulkanLib.vkCmdSetFragmentShadingRateEnumNV)
    retval = jvulkanLib.vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"shadingRate" : shadingRate,"combinerOps" : combinerOps,"retval" : retval}
def vkAcquireWinrtDisplayNV(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "display" in indict.keys():
         display = indict["display"]
    else: 
         display = VkDisplayKHR_T()
    print(jvulkanLib.vkAcquireWinrtDisplayNV)
    retval = jvulkanLib.vkAcquireWinrtDisplayNV(physicalDevice, display)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"display" : display,"retval" : retval}
def vkGetWinrtDisplayNV(indict):
    indict = preprocess(indict)
    if "physicalDevice" in indict.keys():
         physicalDevice = indict["physicalDevice"]
    else: 
         physicalDevice = VkPhysicalDevice_T()
    if "deviceRelativeId" in indict.keys():
         deviceRelativeId = indict["deviceRelativeId"]
    else: 
         deviceRelativeId = c_uint()
    if "pDisplay" in indict.keys():
         pDisplay = indict["pDisplay"]
    else: 
         pDisplay = pointer(VkDisplayKHR_T())
    print(jvulkanLib.vkGetWinrtDisplayNV)
    retval = jvulkanLib.vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay)
    if retval:
       raise(BaseException(str(retval)))
    return {"physicalDevice" : physicalDevice,"deviceRelativeId" : deviceRelativeId,"pDisplay" : pDisplay,"retval" : retval}
def vkCmdSetVertexInputEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "vertexBindingDescriptionCount" in indict.keys():
         vertexBindingDescriptionCount = indict["vertexBindingDescriptionCount"]
    else: 
         vertexBindingDescriptionCount = c_uint()
    if "pVertexBindingDescriptions" in indict.keys():
         pVertexBindingDescriptions = indict["pVertexBindingDescriptions"]
    else: 
         pVertexBindingDescriptions = VkVertexInputBindingDescription2EXT()
    if "vertexAttributeDescriptionCount" in indict.keys():
         vertexAttributeDescriptionCount = indict["vertexAttributeDescriptionCount"]
    else: 
         vertexAttributeDescriptionCount = c_uint()
    if "pVertexAttributeDescriptions" in indict.keys():
         pVertexAttributeDescriptions = indict["pVertexAttributeDescriptions"]
    else: 
         pVertexAttributeDescriptions = VkVertexInputAttributeDescription2EXT()
    print(jvulkanLib.vkCmdSetVertexInputEXT)
    retval = jvulkanLib.vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"vertexBindingDescriptionCount" : vertexBindingDescriptionCount,"pVertexBindingDescriptions" : pVertexBindingDescriptions,"vertexAttributeDescriptionCount" : vertexAttributeDescriptionCount,"pVertexAttributeDescriptions" : pVertexAttributeDescriptions,"retval" : retval}
def vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "renderpass" in indict.keys():
         renderpass = indict["renderpass"]
    else: 
         renderpass = VkRenderPass_T()
    if "pMaxWorkgroupSize" in indict.keys():
         pMaxWorkgroupSize = indict["pMaxWorkgroupSize"]
    else: 
         pMaxWorkgroupSize = VkExtent2D()
    print(jvulkanLib.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)
    retval = jvulkanLib.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"renderpass" : renderpass,"pMaxWorkgroupSize" : pMaxWorkgroupSize,"retval" : retval}
def vkCmdSubpassShadingHUAWEI(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    print(jvulkanLib.vkCmdSubpassShadingHUAWEI)
    retval = jvulkanLib.vkCmdSubpassShadingHUAWEI(commandBuffer)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"retval" : retval}
def vkCmdBindInvocationMaskHUAWEI(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "imageView" in indict.keys():
         imageView = indict["imageView"]
    else: 
         imageView = VkImageView_T()
    if "imageLayout" in indict.keys():
         imageLayout = indict["imageLayout"]
    else: 
         imageLayout = c_int()
    print(jvulkanLib.vkCmdBindInvocationMaskHUAWEI)
    retval = jvulkanLib.vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"imageView" : imageView,"imageLayout" : imageLayout,"retval" : retval}
def vkGetMemoryRemoteAddressNV(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pMemoryGetRemoteAddressInfo" in indict.keys():
         pMemoryGetRemoteAddressInfo = indict["pMemoryGetRemoteAddressInfo"]
    else: 
         pMemoryGetRemoteAddressInfo = VkMemoryGetRemoteAddressInfoNV()
    if "pAddress" in indict.keys():
         pAddress = indict["pAddress"]
    else: 
         pAddress = pointer(c_void_p())
    print(jvulkanLib.vkGetMemoryRemoteAddressNV)
    retval = jvulkanLib.vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pMemoryGetRemoteAddressInfo" : pMemoryGetRemoteAddressInfo,"pAddress" : pAddress,"retval" : retval}
def vkCmdSetPatchControlPointsEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "patchControlPoints" in indict.keys():
         patchControlPoints = indict["patchControlPoints"]
    else: 
         patchControlPoints = c_uint()
    print(jvulkanLib.vkCmdSetPatchControlPointsEXT)
    retval = jvulkanLib.vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"patchControlPoints" : patchControlPoints,"retval" : retval}
def vkCmdSetRasterizerDiscardEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "rasterizerDiscardEnable" in indict.keys():
         rasterizerDiscardEnable = indict["rasterizerDiscardEnable"]
    else: 
         rasterizerDiscardEnable = c_uint()
    print(jvulkanLib.vkCmdSetRasterizerDiscardEnableEXT)
    retval = jvulkanLib.vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"rasterizerDiscardEnable" : rasterizerDiscardEnable,"retval" : retval}
def vkCmdSetDepthBiasEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "depthBiasEnable" in indict.keys():
         depthBiasEnable = indict["depthBiasEnable"]
    else: 
         depthBiasEnable = c_uint()
    print(jvulkanLib.vkCmdSetDepthBiasEnableEXT)
    retval = jvulkanLib.vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"depthBiasEnable" : depthBiasEnable,"retval" : retval}
def vkCmdSetLogicOpEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "logicOp" in indict.keys():
         logicOp = indict["logicOp"]
    else: 
         logicOp = c_int()
    print(jvulkanLib.vkCmdSetLogicOpEXT)
    retval = jvulkanLib.vkCmdSetLogicOpEXT(commandBuffer, logicOp)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"logicOp" : logicOp,"retval" : retval}
def vkCmdSetPrimitiveRestartEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "primitiveRestartEnable" in indict.keys():
         primitiveRestartEnable = indict["primitiveRestartEnable"]
    else: 
         primitiveRestartEnable = c_uint()
    print(jvulkanLib.vkCmdSetPrimitiveRestartEnableEXT)
    retval = jvulkanLib.vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"primitiveRestartEnable" : primitiveRestartEnable,"retval" : retval}
def vkCmdSetColorWriteEnableEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "attachmentCount" in indict.keys():
         attachmentCount = indict["attachmentCount"]
    else: 
         attachmentCount = c_uint()
    if "pColorWriteEnables" in indict.keys():
         pColorWriteEnables = indict["pColorWriteEnables"]
    else: 
         pColorWriteEnables = pointer(c_uint())
    print(jvulkanLib.vkCmdSetColorWriteEnableEXT)
    retval = jvulkanLib.vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"attachmentCount" : attachmentCount,"pColorWriteEnables" : pColorWriteEnables,"retval" : retval}
def vkCmdDrawMultiEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "drawCount" in indict.keys():
         drawCount = indict["drawCount"]
    else: 
         drawCount = c_uint()
    if "pVertexInfo" in indict.keys():
         pVertexInfo = indict["pVertexInfo"]
    else: 
         pVertexInfo = VkMultiDrawInfoEXT()
    if "instanceCount" in indict.keys():
         instanceCount = indict["instanceCount"]
    else: 
         instanceCount = c_uint()
    if "firstInstance" in indict.keys():
         firstInstance = indict["firstInstance"]
    else: 
         firstInstance = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    print(jvulkanLib.vkCmdDrawMultiEXT)
    retval = jvulkanLib.vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"drawCount" : drawCount,"pVertexInfo" : pVertexInfo,"instanceCount" : instanceCount,"firstInstance" : firstInstance,"stride" : stride,"retval" : retval}
def vkCmdDrawMultiIndexedEXT(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "drawCount" in indict.keys():
         drawCount = indict["drawCount"]
    else: 
         drawCount = c_uint()
    if "pIndexInfo" in indict.keys():
         pIndexInfo = indict["pIndexInfo"]
    else: 
         pIndexInfo = VkMultiDrawIndexedInfoEXT()
    if "instanceCount" in indict.keys():
         instanceCount = indict["instanceCount"]
    else: 
         instanceCount = c_uint()
    if "firstInstance" in indict.keys():
         firstInstance = indict["firstInstance"]
    else: 
         firstInstance = c_uint()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_uint()
    if "pVertexOffset" in indict.keys():
         pVertexOffset = indict["pVertexOffset"]
    else: 
         pVertexOffset = pointer(c_int())
    print(jvulkanLib.vkCmdDrawMultiIndexedEXT)
    retval = jvulkanLib.vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"drawCount" : drawCount,"pIndexInfo" : pIndexInfo,"instanceCount" : instanceCount,"firstInstance" : firstInstance,"stride" : stride,"pVertexOffset" : pVertexOffset,"retval" : retval}
def vkSetDeviceMemoryPriorityEXT(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "memory" in indict.keys():
         memory = indict["memory"]
    else: 
         memory = VkDeviceMemory_T()
    if "priority" in indict.keys():
         priority = indict["priority"]
    else: 
         priority = c_float()
    print(jvulkanLib.vkSetDeviceMemoryPriorityEXT)
    retval = jvulkanLib.vkSetDeviceMemoryPriorityEXT(device, memory, priority)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"memory" : memory,"priority" : priority,"retval" : retval}
def vkGetDescriptorSetLayoutHostMappingInfoVALVE(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pBindingReference" in indict.keys():
         pBindingReference = indict["pBindingReference"]
    else: 
         pBindingReference = VkDescriptorSetBindingReferenceVALVE()
    if "pHostMapping" in indict.keys():
         pHostMapping = indict["pHostMapping"]
    else: 
         pHostMapping = VkDescriptorSetLayoutHostMappingInfoVALVE()
    print(jvulkanLib.vkGetDescriptorSetLayoutHostMappingInfoVALVE)
    retval = jvulkanLib.vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pBindingReference" : pBindingReference,"pHostMapping" : pHostMapping,"retval" : retval}
def vkGetDescriptorSetHostMappingVALVE(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "descriptorSet" in indict.keys():
         descriptorSet = indict["descriptorSet"]
    else: 
         descriptorSet = VkDescriptorSet_T()
    if "ppData" in indict.keys():
         ppData = indict["ppData"]
    else: 
         ppData = POINTER(c_void_p)()
    print(jvulkanLib.vkGetDescriptorSetHostMappingVALVE)
    retval = jvulkanLib.vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"descriptorSet" : descriptorSet,"ppData" : ppData,"retval" : retval}
def vkCreateAccelerationStructureKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pCreateInfo" in indict.keys():
         pCreateInfo = indict["pCreateInfo"]
    else: 
         pCreateInfo = VkAccelerationStructureCreateInfoKHR()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pAccelerationStructure" in indict.keys():
         pAccelerationStructure = indict["pAccelerationStructure"]
    else: 
         pAccelerationStructure = pointer(VkAccelerationStructureKHR_T())
    print(jvulkanLib.vkCreateAccelerationStructureKHR)
    retval = jvulkanLib.vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pCreateInfo" : pCreateInfo,"pAllocator" : pAllocator,"pAccelerationStructure" : pAccelerationStructure,"retval" : retval}
def vkDestroyAccelerationStructureKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "accelerationStructure" in indict.keys():
         accelerationStructure = indict["accelerationStructure"]
    else: 
         accelerationStructure = VkAccelerationStructureKHR_T()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    print(jvulkanLib.vkDestroyAccelerationStructureKHR)
    retval = jvulkanLib.vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"accelerationStructure" : accelerationStructure,"pAllocator" : pAllocator,"retval" : retval}
def vkCmdBuildAccelerationStructuresKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "infoCount" in indict.keys():
         infoCount = indict["infoCount"]
    else: 
         infoCount = c_uint()
    if "pInfos" in indict.keys():
         pInfos = indict["pInfos"]
    else: 
         pInfos = VkAccelerationStructureBuildGeometryInfoKHR()
    if "ppBuildRangeInfos" in indict.keys():
         ppBuildRangeInfos = indict["ppBuildRangeInfos"]
    else: 
         ppBuildRangeInfos = VkAccelerationStructureBuildRangeInfoKHR()
    print(jvulkanLib.vkCmdBuildAccelerationStructuresKHR)
    retval = jvulkanLib.vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"infoCount" : infoCount,"pInfos" : pInfos,"ppBuildRangeInfos" : ppBuildRangeInfos,"retval" : retval}
def vkCmdBuildAccelerationStructuresIndirectKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "infoCount" in indict.keys():
         infoCount = indict["infoCount"]
    else: 
         infoCount = c_uint()
    if "pInfos" in indict.keys():
         pInfos = indict["pInfos"]
    else: 
         pInfos = VkAccelerationStructureBuildGeometryInfoKHR()
    if "pIndirectDeviceAddresses" in indict.keys():
         pIndirectDeviceAddresses = indict["pIndirectDeviceAddresses"]
    else: 
         pIndirectDeviceAddresses = pointer(c_ulong())
    if "pIndirectStrides" in indict.keys():
         pIndirectStrides = indict["pIndirectStrides"]
    else: 
         pIndirectStrides = pointer(c_uint())
    if "ppMaxPrimitiveCounts" in indict.keys():
         ppMaxPrimitiveCounts = indict["ppMaxPrimitiveCounts"]
    else: 
         ppMaxPrimitiveCounts = pointer(c_uint())
    print(jvulkanLib.vkCmdBuildAccelerationStructuresIndirectKHR)
    retval = jvulkanLib.vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"infoCount" : infoCount,"pInfos" : pInfos,"pIndirectDeviceAddresses" : pIndirectDeviceAddresses,"pIndirectStrides" : pIndirectStrides,"ppMaxPrimitiveCounts" : ppMaxPrimitiveCounts,"retval" : retval}
def vkBuildAccelerationStructuresKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "deferredOperation" in indict.keys():
         deferredOperation = indict["deferredOperation"]
    else: 
         deferredOperation = VkDeferredOperationKHR_T()
    if "infoCount" in indict.keys():
         infoCount = indict["infoCount"]
    else: 
         infoCount = c_uint()
    if "pInfos" in indict.keys():
         pInfos = indict["pInfos"]
    else: 
         pInfos = VkAccelerationStructureBuildGeometryInfoKHR()
    if "ppBuildRangeInfos" in indict.keys():
         ppBuildRangeInfos = indict["ppBuildRangeInfos"]
    else: 
         ppBuildRangeInfos = VkAccelerationStructureBuildRangeInfoKHR()
    print(jvulkanLib.vkBuildAccelerationStructuresKHR)
    retval = jvulkanLib.vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"deferredOperation" : deferredOperation,"infoCount" : infoCount,"pInfos" : pInfos,"ppBuildRangeInfos" : ppBuildRangeInfos,"retval" : retval}
def vkCopyAccelerationStructureKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "deferredOperation" in indict.keys():
         deferredOperation = indict["deferredOperation"]
    else: 
         deferredOperation = VkDeferredOperationKHR_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkCopyAccelerationStructureInfoKHR()
    print(jvulkanLib.vkCopyAccelerationStructureKHR)
    retval = jvulkanLib.vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"deferredOperation" : deferredOperation,"pInfo" : pInfo,"retval" : retval}
def vkCopyAccelerationStructureToMemoryKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "deferredOperation" in indict.keys():
         deferredOperation = indict["deferredOperation"]
    else: 
         deferredOperation = VkDeferredOperationKHR_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkCopyAccelerationStructureToMemoryInfoKHR()
    print(jvulkanLib.vkCopyAccelerationStructureToMemoryKHR)
    retval = jvulkanLib.vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"deferredOperation" : deferredOperation,"pInfo" : pInfo,"retval" : retval}
def vkCopyMemoryToAccelerationStructureKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "deferredOperation" in indict.keys():
         deferredOperation = indict["deferredOperation"]
    else: 
         deferredOperation = VkDeferredOperationKHR_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkCopyMemoryToAccelerationStructureInfoKHR()
    print(jvulkanLib.vkCopyMemoryToAccelerationStructureKHR)
    retval = jvulkanLib.vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"deferredOperation" : deferredOperation,"pInfo" : pInfo,"retval" : retval}
def vkWriteAccelerationStructuresPropertiesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "accelerationStructureCount" in indict.keys():
         accelerationStructureCount = indict["accelerationStructureCount"]
    else: 
         accelerationStructureCount = c_uint()
    if "pAccelerationStructures" in indict.keys():
         pAccelerationStructures = indict["pAccelerationStructures"]
    else: 
         pAccelerationStructures = pointer(VkAccelerationStructureKHR_T())
    if "queryType" in indict.keys():
         queryType = indict["queryType"]
    else: 
         queryType = c_int()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    if "stride" in indict.keys():
         stride = indict["stride"]
    else: 
         stride = c_ulong()
    print(jvulkanLib.vkWriteAccelerationStructuresPropertiesKHR)
    retval = jvulkanLib.vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"accelerationStructureCount" : accelerationStructureCount,"pAccelerationStructures" : pAccelerationStructures,"queryType" : queryType,"dataSize" : dataSize,"pData" : pData,"stride" : stride,"retval" : retval}
def vkCmdCopyAccelerationStructureKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkCopyAccelerationStructureInfoKHR()
    print(jvulkanLib.vkCmdCopyAccelerationStructureKHR)
    retval = jvulkanLib.vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pInfo" : pInfo,"retval" : retval}
def vkCmdCopyAccelerationStructureToMemoryKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkCopyAccelerationStructureToMemoryInfoKHR()
    print(jvulkanLib.vkCmdCopyAccelerationStructureToMemoryKHR)
    retval = jvulkanLib.vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pInfo" : pInfo,"retval" : retval}
def vkCmdCopyMemoryToAccelerationStructureKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkCopyMemoryToAccelerationStructureInfoKHR()
    print(jvulkanLib.vkCmdCopyMemoryToAccelerationStructureKHR)
    retval = jvulkanLib.vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pInfo" : pInfo,"retval" : retval}
def vkGetAccelerationStructureDeviceAddressKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pInfo" in indict.keys():
         pInfo = indict["pInfo"]
    else: 
         pInfo = VkAccelerationStructureDeviceAddressInfoKHR()
    print(jvulkanLib.vkGetAccelerationStructureDeviceAddressKHR)
    retval = jvulkanLib.vkGetAccelerationStructureDeviceAddressKHR(device, pInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pInfo" : pInfo,"retval" : retval}
def vkCmdWriteAccelerationStructuresPropertiesKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "accelerationStructureCount" in indict.keys():
         accelerationStructureCount = indict["accelerationStructureCount"]
    else: 
         accelerationStructureCount = c_uint()
    if "pAccelerationStructures" in indict.keys():
         pAccelerationStructures = indict["pAccelerationStructures"]
    else: 
         pAccelerationStructures = pointer(VkAccelerationStructureKHR_T())
    if "queryType" in indict.keys():
         queryType = indict["queryType"]
    else: 
         queryType = c_int()
    if "queryPool" in indict.keys():
         queryPool = indict["queryPool"]
    else: 
         queryPool = VkQueryPool_T()
    if "firstQuery" in indict.keys():
         firstQuery = indict["firstQuery"]
    else: 
         firstQuery = c_uint()
    print(jvulkanLib.vkCmdWriteAccelerationStructuresPropertiesKHR)
    retval = jvulkanLib.vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"accelerationStructureCount" : accelerationStructureCount,"pAccelerationStructures" : pAccelerationStructures,"queryType" : queryType,"queryPool" : queryPool,"firstQuery" : firstQuery,"retval" : retval}
def vkGetDeviceAccelerationStructureCompatibilityKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pVersionInfo" in indict.keys():
         pVersionInfo = indict["pVersionInfo"]
    else: 
         pVersionInfo = VkAccelerationStructureVersionInfoKHR()
    if "pCompatibility" in indict.keys():
         pCompatibility = indict["pCompatibility"]
    else: 
         pCompatibility = pointer(c_int())
    print(jvulkanLib.vkGetDeviceAccelerationStructureCompatibilityKHR)
    retval = jvulkanLib.vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pVersionInfo" : pVersionInfo,"pCompatibility" : pCompatibility,"retval" : retval}
def vkGetAccelerationStructureBuildSizesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "buildType" in indict.keys():
         buildType = indict["buildType"]
    else: 
         buildType = c_int()
    if "pBuildInfo" in indict.keys():
         pBuildInfo = indict["pBuildInfo"]
    else: 
         pBuildInfo = VkAccelerationStructureBuildGeometryInfoKHR()
    if "pMaxPrimitiveCounts" in indict.keys():
         pMaxPrimitiveCounts = indict["pMaxPrimitiveCounts"]
    else: 
         pMaxPrimitiveCounts = pointer(c_uint())
    if "pSizeInfo" in indict.keys():
         pSizeInfo = indict["pSizeInfo"]
    else: 
         pSizeInfo = VkAccelerationStructureBuildSizesInfoKHR()
    print(jvulkanLib.vkGetAccelerationStructureBuildSizesKHR)
    retval = jvulkanLib.vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"buildType" : buildType,"pBuildInfo" : pBuildInfo,"pMaxPrimitiveCounts" : pMaxPrimitiveCounts,"pSizeInfo" : pSizeInfo,"retval" : retval}
def vkCmdTraceRaysKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRaygenShaderBindingTable" in indict.keys():
         pRaygenShaderBindingTable = indict["pRaygenShaderBindingTable"]
    else: 
         pRaygenShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "pMissShaderBindingTable" in indict.keys():
         pMissShaderBindingTable = indict["pMissShaderBindingTable"]
    else: 
         pMissShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "pHitShaderBindingTable" in indict.keys():
         pHitShaderBindingTable = indict["pHitShaderBindingTable"]
    else: 
         pHitShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "pCallableShaderBindingTable" in indict.keys():
         pCallableShaderBindingTable = indict["pCallableShaderBindingTable"]
    else: 
         pCallableShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "width" in indict.keys():
         width = indict["width"]
    else: 
         width = c_uint()
    if "height" in indict.keys():
         height = indict["height"]
    else: 
         height = c_uint()
    if "depth" in indict.keys():
         depth = indict["depth"]
    else: 
         depth = c_uint()
    print(jvulkanLib.vkCmdTraceRaysKHR)
    retval = jvulkanLib.vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRaygenShaderBindingTable" : pRaygenShaderBindingTable,"pMissShaderBindingTable" : pMissShaderBindingTable,"pHitShaderBindingTable" : pHitShaderBindingTable,"pCallableShaderBindingTable" : pCallableShaderBindingTable,"width" : width,"height" : height,"depth" : depth,"retval" : retval}
def vkCreateRayTracingPipelinesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "deferredOperation" in indict.keys():
         deferredOperation = indict["deferredOperation"]
    else: 
         deferredOperation = VkDeferredOperationKHR_T()
    if "pipelineCache" in indict.keys():
         pipelineCache = indict["pipelineCache"]
    else: 
         pipelineCache = VkPipelineCache_T()
    if "createInfoCount" in indict.keys():
         createInfoCount = indict["createInfoCount"]
    else: 
         createInfoCount = c_uint()
    if "pCreateInfos" in indict.keys():
         pCreateInfos = indict["pCreateInfos"]
    else: 
         pCreateInfos = VkRayTracingPipelineCreateInfoKHR()
    if "pAllocator" in indict.keys():
         pAllocator = indict["pAllocator"]
    else: 
         pAllocator = VkAllocationCallbacks()
    if "pPipelines" in indict.keys():
         pPipelines = indict["pPipelines"]
    else: 
         pPipelines = pointer(VkPipeline_T())
    print(jvulkanLib.vkCreateRayTracingPipelinesKHR)
    retval = jvulkanLib.vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"deferredOperation" : deferredOperation,"pipelineCache" : pipelineCache,"createInfoCount" : createInfoCount,"pCreateInfos" : pCreateInfos,"pAllocator" : pAllocator,"pPipelines" : pPipelines,"retval" : retval}
def vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "firstGroup" in indict.keys():
         firstGroup = indict["firstGroup"]
    else: 
         firstGroup = c_uint()
    if "groupCount" in indict.keys():
         groupCount = indict["groupCount"]
    else: 
         groupCount = c_uint()
    if "dataSize" in indict.keys():
         dataSize = indict["dataSize"]
    else: 
         dataSize = c_ulong()
    if "pData" in indict.keys():
         pData = indict["pData"]
    else: 
         pData = c_void_p()
    print(jvulkanLib.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)
    retval = jvulkanLib.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"firstGroup" : firstGroup,"groupCount" : groupCount,"dataSize" : dataSize,"pData" : pData,"retval" : retval}
def vkCmdTraceRaysIndirectKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pRaygenShaderBindingTable" in indict.keys():
         pRaygenShaderBindingTable = indict["pRaygenShaderBindingTable"]
    else: 
         pRaygenShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "pMissShaderBindingTable" in indict.keys():
         pMissShaderBindingTable = indict["pMissShaderBindingTable"]
    else: 
         pMissShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "pHitShaderBindingTable" in indict.keys():
         pHitShaderBindingTable = indict["pHitShaderBindingTable"]
    else: 
         pHitShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "pCallableShaderBindingTable" in indict.keys():
         pCallableShaderBindingTable = indict["pCallableShaderBindingTable"]
    else: 
         pCallableShaderBindingTable = VkStridedDeviceAddressRegionKHR()
    if "indirectDeviceAddress" in indict.keys():
         indirectDeviceAddress = indict["indirectDeviceAddress"]
    else: 
         indirectDeviceAddress = c_ulong()
    print(jvulkanLib.vkCmdTraceRaysIndirectKHR)
    retval = jvulkanLib.vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pRaygenShaderBindingTable" : pRaygenShaderBindingTable,"pMissShaderBindingTable" : pMissShaderBindingTable,"pHitShaderBindingTable" : pHitShaderBindingTable,"pCallableShaderBindingTable" : pCallableShaderBindingTable,"indirectDeviceAddress" : indirectDeviceAddress,"retval" : retval}
def vkGetRayTracingShaderGroupStackSizeKHR(indict):
    indict = preprocess(indict)
    if "device" in indict.keys():
         device = indict["device"]
    else: 
         device = VkDevice_T()
    if "pipeline" in indict.keys():
         pipeline = indict["pipeline"]
    else: 
         pipeline = VkPipeline_T()
    if "group" in indict.keys():
         group = indict["group"]
    else: 
         group = c_uint()
    if "groupShader" in indict.keys():
         groupShader = indict["groupShader"]
    else: 
         groupShader = c_int()
    print(jvulkanLib.vkGetRayTracingShaderGroupStackSizeKHR)
    retval = jvulkanLib.vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader)
    if retval:
       raise(BaseException(str(retval)))
    return {"device" : device,"pipeline" : pipeline,"group" : group,"groupShader" : groupShader,"retval" : retval}
def vkCmdSetRayTracingPipelineStackSizeKHR(indict):
    indict = preprocess(indict)
    if "commandBuffer" in indict.keys():
         commandBuffer = indict["commandBuffer"]
    else: 
         commandBuffer = VkCommandBuffer_T()
    if "pipelineStackSize" in indict.keys():
         pipelineStackSize = indict["pipelineStackSize"]
    else: 
         pipelineStackSize = c_uint()
    print(jvulkanLib.vkCmdSetRayTracingPipelineStackSizeKHR)
    retval = jvulkanLib.vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize)
    if retval:
       raise(BaseException(str(retval)))
    return {"commandBuffer" : commandBuffer,"pipelineStackSize" : pipelineStackSize,"retval" : retval}
